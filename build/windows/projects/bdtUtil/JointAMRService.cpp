// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JointAMRService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <JointAMRService.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __iBS__JointAMRService__GetBlankAMRFinderTask_name = "GetBlankAMRFinderTask";

const ::std::string __iBS__JointAMRService__RunAMRFinder_name = "RunAMRFinder";

const ::std::string __iBS__JointAMRService__SetCpGSiteMap_name = "SetCpGSiteMap";

const ::std::string __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name = "GetBlankCpGSiteMapInfo";

const ::std::string __iBS__JointAMRService__GetCpGSites_name = "GetCpGSites";

const ::std::string __iBS__JointAMRService__GetCpGIdxs_name = "GetCpGIdxs";

const ::std::string __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name = "GetBlankJAMRFixedPQModelTask";

const ::std::string __iBS__JointAMRService__RebuildJAMRFixedPQModel_name = "RebuildJAMRFixedPQModel";

const ::std::string __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name = "GetBlankJEvalKnownAMRTask";

const ::std::string __iBS__JointAMRService__RunJEvalKnownAMR_name = "RunJEvalKnownAMR";

const ::std::string __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name = "GetBlankJEvalSingleH0H1BiasTask";

const ::std::string __iBS__JointAMRService__RunJEvalH0H1Bias_name = "RunJEvalH0H1Bias";

}

namespace Ice
{
}

IceAsync::iBS::AMD_JointAMRService_RunAMRFinder::AMD_JointAMRService_RunAMRFinder(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_JointAMRService_RunAMRFinder::ice_response(::Ice::Int __ret, ::Ice::Long taskID)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(taskID);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_JointAMRService_RunAMRFinder::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel::AMD_JointAMRService_RebuildJAMRFixedPQModel(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel::ice_response(::Ice::Int __ret, ::Ice::Long taskID)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(taskID);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::iBS::AMD_JointAMRService_RunJEvalKnownAMR::AMD_JointAMRService_RunJEvalKnownAMR(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_JointAMRService_RunJEvalKnownAMR::ice_response(::Ice::Int __ret, ::Ice::Long taskID)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(taskID);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_JointAMRService_RunJEvalKnownAMR::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::iBS::AMD_JointAMRService_RunJEvalH0H1Bias::AMD_JointAMRService_RunJEvalH0H1Bias(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_JointAMRService_RunJEvalH0H1Bias::ice_response(::Ice::Int __ret, ::Ice::Long taskID)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(taskID);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_JointAMRService_RunJEvalH0H1Bias::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::iBS::upCast(::IceProxy::iBS::JointAMRService* p) { return p; }

void
::IceProxy::iBS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::iBS::JointAMRService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::iBS::JointAMRService;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetBlankAMRFinderTask(bool saveproperty, ::iBS::AMRFinderTask& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetBlankAMRFinderTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetBlankAMRFinderTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetBlankAMRFinderTask(saveproperty, task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetBlankAMRFinderTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetBlankAMRFinderTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetBlankAMRFinderTask_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(saveproperty);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetBlankAMRFinderTask(::iBS::AMRFinderTask& task, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetBlankAMRFinderTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(task);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::RunAMRFinder(const ::iBS::AMRFinderTask& task, ::Ice::Long& taskID, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__RunAMRFinder_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__RunAMRFinder_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->RunAMRFinder(task, taskID, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__RunAMRFinder_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__RunAMRFinder_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__RunAMRFinder_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_RunAMRFinder(::Ice::Long& taskID, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__RunAMRFinder_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__SetCpGSiteMap_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__SetCpGSiteMap_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->SetCpGSiteMap(cpgMap, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__SetCpGSiteMap_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__SetCpGSiteMap_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__SetCpGSiteMap_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(cpgMap);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_SetCpGSiteMap(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__SetCpGSiteMap_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::iBS::CpGSiteMapInfo
IceProxy::iBS::JointAMRService::GetBlankCpGSiteMapInfo(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetBlankCpGSiteMapInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetBlankCpGSiteMapInfo(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetBlankCpGSiteMapInfo(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetBlankCpGSiteMapInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetBlankCpGSiteMapInfo_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::iBS::CpGSiteMapInfo
IceProxy::iBS::JointAMRService::end_GetBlankCpGSiteMapInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name);
    ::iBS::CpGSiteMapInfo __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, ::iBS::LongVec& cpgBpIdxs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetCpGSites_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetCpGSites_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, cpgBpIdxs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetCpGSites_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetCpGSites_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetCpGSites_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ref);
        __os->write(bpIdxFrom);
        __os->write(bpIdxTo);
        __os->write(watson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetCpGSites(::iBS::LongVec& cpgBpIdxs, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetCpGSites_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(cpgBpIdxs);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, ::iBS::LongVec& cpgIdxs, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetCpGIdxs_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetCpGIdxs_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetCpGIdxs(ref, bpIdxs, watson, cpgIdxs, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetCpGIdxs_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetCpGIdxs_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetCpGIdxs_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(ref);
        __os->write(bpIdxs);
        __os->write(watson);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetCpGIdxs(::iBS::LongVec& cpgIdxs, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetCpGIdxs_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(cpgIdxs);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetBlankJAMRFixedPQModelTask(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(task);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, ::Ice::Long& taskID, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__RebuildJAMRFixedPQModel_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__RebuildJAMRFixedPQModel_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->RebuildJAMRFixedPQModel(task, taskID, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__RebuildJAMRFixedPQModel_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__RebuildJAMRFixedPQModel_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__RebuildJAMRFixedPQModel_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_RebuildJAMRFixedPQModel(::Ice::Long& taskID, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__RebuildJAMRFixedPQModel_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetBlankJEvalKnownAMRTask(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(task);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, ::Ice::Long& taskID, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__RunJEvalKnownAMR_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__RunJEvalKnownAMR_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->RunJEvalKnownAMR(task, taskID, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__RunJEvalKnownAMR_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__RunJEvalKnownAMR_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__RunJEvalKnownAMR_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_RunJEvalKnownAMR(::Ice::Long& taskID, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__RunJEvalKnownAMR_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->GetBlankJEvalSingleH0H1BiasTask(task, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(task);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::JointAMRService::RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, ::Ice::Long& taskID, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__JointAMRService__RunJEvalH0H1Bias_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__JointAMRService__RunJEvalH0H1Bias_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::JointAMRService* __del = dynamic_cast< ::IceDelegate::iBS::JointAMRService*>(__delBase.get());
            return __del->RunJEvalH0H1Bias(task, taskID, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::JointAMRService::begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__JointAMRService__RunJEvalH0H1Bias_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__JointAMRService__RunJEvalH0H1Bias_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__JointAMRService__RunJEvalH0H1Bias_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::JointAMRService::end_RunJEvalH0H1Bias(::Ice::Long& taskID, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__JointAMRService__RunJEvalH0H1Bias_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::iBS::JointAMRService::ice_staticId()
{
    return ::iBS::JointAMRService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::iBS::JointAMRService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::iBS::JointAMRService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::iBS::JointAMRService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::iBS::JointAMRService);
}

::IceProxy::Ice::Object*
IceProxy::iBS::JointAMRService::__newInstance() const
{
    return new JointAMRService;
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetBlankAMRFinderTask(bool saveproperty, ::iBS::AMRFinderTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetBlankAMRFinderTask_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(saveproperty);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(task);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::RunAMRFinder(const ::iBS::AMRFinderTask& task, ::Ice::Long& taskID, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__RunAMRFinder_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__SetCpGSiteMap_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(cpgMap);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::iBS::CpGSiteMapInfo
IceDelegateM::iBS::JointAMRService::GetBlankCpGSiteMapInfo(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::iBS::CpGSiteMapInfo __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, ::iBS::LongVec& cpgBpIdxs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetCpGSites_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ref);
        __os->write(bpIdxFrom);
        __os->write(bpIdxTo);
        __os->write(watson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(cpgBpIdxs);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, ::iBS::LongVec& cpgIdxs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetCpGIdxs_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(ref);
        __os->write(bpIdxs);
        __os->write(watson);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(cpgIdxs);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(task);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, ::Ice::Long& taskID, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__RebuildJAMRFixedPQModel_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(task);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, ::Ice::Long& taskID, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__RunJEvalKnownAMR_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(task);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::JointAMRService::RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, ::Ice::Long& taskID, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__JointAMRService__RunJEvalH0H1Bias_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(taskID);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetBlankAMRFinderTask(bool saveproperty, ::iBS::AMRFinderTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, bool __p_saveproperty, ::iBS::AMRFinderTask& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_saveproperty(__p_saveproperty),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankAMRFinderTask(_m_saveproperty, _m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        bool _m_saveproperty;
        ::iBS::AMRFinderTask& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetBlankAMRFinderTask_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, saveproperty, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::RunAMRFinder(const ::iBS::AMRFinderTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::iBS::CpGSiteMapInfo& __p_cpgMap, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_cpgMap(__p_cpgMap)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->SetCpGSiteMap(_m_cpgMap, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::iBS::CpGSiteMapInfo& _m_cpgMap;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__SetCpGSiteMap_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, cpgMap, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::iBS::CpGSiteMapInfo
IceDelegateD::iBS::JointAMRService::GetBlankCpGSiteMapInfo(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::iBS::CpGSiteMapInfo& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetBlankCpGSiteMapInfo(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::iBS::CpGSiteMapInfo& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetBlankCpGSiteMapInfo_name, ::Ice::Normal, __context);
    ::iBS::CpGSiteMapInfo __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, ::iBS::LongVec& cpgBpIdxs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_ref, ::Ice::Long __p_bpIdxFrom, ::Ice::Long __p_bpIdxTo, bool __p_watson, ::iBS::LongVec& __p_cpgBpIdxs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ref(__p_ref),
            _m_bpIdxFrom(__p_bpIdxFrom),
            _m_bpIdxTo(__p_bpIdxTo),
            _m_watson(__p_watson),
            _m_cpgBpIdxs(__p_cpgBpIdxs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetCpGSites(_m_ref, _m_bpIdxFrom, _m_bpIdxTo, _m_watson, _m_cpgBpIdxs, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_ref;
        ::Ice::Long _m_bpIdxFrom;
        ::Ice::Long _m_bpIdxTo;
        bool _m_watson;
        ::iBS::LongVec& _m_cpgBpIdxs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetCpGSites_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, ref, bpIdxFrom, bpIdxTo, watson, cpgBpIdxs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, ::iBS::LongVec& cpgIdxs, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_ref, const ::iBS::LongVec& __p_bpIdxs, bool __p_watson, ::iBS::LongVec& __p_cpgIdxs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_ref(__p_ref),
            _m_bpIdxs(__p_bpIdxs),
            _m_watson(__p_watson),
            _m_cpgIdxs(__p_cpgIdxs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetCpGIdxs(_m_ref, _m_bpIdxs, _m_watson, _m_cpgIdxs, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_ref;
        const ::iBS::LongVec& _m_bpIdxs;
        bool _m_watson;
        ::iBS::LongVec& _m_cpgIdxs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetCpGIdxs_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, ref, bpIdxs, watson, cpgIdxs, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::iBS::JAMRFixedPQModelTask& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankJAMRFixedPQModelTask(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::iBS::JAMRFixedPQModelTask& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetBlankJAMRFixedPQModelTask_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::iBS::JEvalKnownAMRTask& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankJEvalKnownAMRTask(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::iBS::JEvalKnownAMRTask& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetBlankJEvalKnownAMRTask_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::iBS::JEvalSingleH0H1BiasTask& __p_task, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_task(__p_task)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::JointAMRService* servant = dynamic_cast< ::iBS::JointAMRService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankJEvalSingleH0H1BiasTask(_m_task, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        ::iBS::JEvalSingleH0H1BiasTask& _m_task;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__JointAMRService__GetBlankJEvalSingleH0H1BiasTask_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, task, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::JointAMRService::RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Object* iBS::upCast(::iBS::JointAMRService* p) { return p; }

namespace
{
const ::std::string __iBS__JointAMRService_ids[2] =
{
    "::Ice::Object",
    "::iBS::JointAMRService"
};

}

bool
iBS::JointAMRService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__iBS__JointAMRService_ids, __iBS__JointAMRService_ids + 2, _s);
}

::std::vector< ::std::string>
iBS::JointAMRService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__iBS__JointAMRService_ids[0], &__iBS__JointAMRService_ids[2]);
}

const ::std::string&
iBS::JointAMRService::ice_id(const ::Ice::Current&) const
{
    return __iBS__JointAMRService_ids[1];
}

const ::std::string&
iBS::JointAMRService::ice_staticId()
{
    return __iBS__JointAMRService_ids[1];
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetBlankAMRFinderTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool saveproperty;
    __is->read(saveproperty);
    __inS.endReadParams();
    ::iBS::AMRFinderTask task;
    try
    {
        ::Ice::Int __ret = GetBlankAMRFinderTask(saveproperty, task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___RunAMRFinder(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::AMRFinderTask task;
    __is->read(task);
    __inS.endReadParams();
    ::iBS::AMD_JointAMRService_RunAMRFinderPtr __cb = new IceAsync::iBS::AMD_JointAMRService_RunAMRFinder(__inS);
    try
    {
        RunAMRFinder_async(__cb, task, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
iBS::JointAMRService::___SetCpGSiteMap(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::CpGSiteMapInfo cpgMap;
    __is->read(cpgMap);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = SetCpGSiteMap(cpgMap, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetBlankCpGSiteMapInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::iBS::CpGSiteMapInfo __ret = GetBlankCpGSiteMapInfo(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetCpGSites(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ref;
    ::Ice::Long bpIdxFrom;
    ::Ice::Long bpIdxTo;
    bool watson;
    __is->read(ref);
    __is->read(bpIdxFrom);
    __is->read(bpIdxTo);
    __is->read(watson);
    __inS.endReadParams();
    ::iBS::LongVec cpgBpIdxs;
    try
    {
        ::Ice::Int __ret = GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, cpgBpIdxs, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(cpgBpIdxs);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetCpGIdxs(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string ref;
    ::iBS::LongVec bpIdxs;
    bool watson;
    __is->read(ref);
    __is->read(bpIdxs);
    __is->read(watson);
    __inS.endReadParams();
    ::iBS::LongVec cpgIdxs;
    try
    {
        ::Ice::Int __ret = GetCpGIdxs(ref, bpIdxs, watson, cpgIdxs, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(cpgIdxs);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetBlankJAMRFixedPQModelTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::iBS::JAMRFixedPQModelTask task;
    try
    {
        ::Ice::Int __ret = GetBlankJAMRFixedPQModelTask(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___RebuildJAMRFixedPQModel(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::JAMRFixedPQModelTask task;
    __is->read(task);
    __inS.endReadParams();
    ::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModelPtr __cb = new IceAsync::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel(__inS);
    try
    {
        RebuildJAMRFixedPQModel_async(__cb, task, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetBlankJEvalKnownAMRTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::iBS::JEvalKnownAMRTask task;
    try
    {
        ::Ice::Int __ret = GetBlankJEvalKnownAMRTask(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___RunJEvalKnownAMR(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::JEvalKnownAMRTask task;
    __is->read(task);
    __inS.endReadParams();
    ::iBS::AMD_JointAMRService_RunJEvalKnownAMRPtr __cb = new IceAsync::iBS::AMD_JointAMRService_RunJEvalKnownAMR(__inS);
    try
    {
        RunJEvalKnownAMR_async(__cb, task, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
iBS::JointAMRService::___GetBlankJEvalSingleH0H1BiasTask(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::iBS::JEvalSingleH0H1BiasTask task;
    try
    {
        ::Ice::Int __ret = GetBlankJEvalSingleH0H1BiasTask(task, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(task);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::JointAMRService::___RunJEvalH0H1Bias(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::JEvalSingleH0H1BiasTask task;
    __is->read(task);
    __inS.endReadParams();
    ::iBS::AMD_JointAMRService_RunJEvalH0H1BiasPtr __cb = new IceAsync::iBS::AMD_JointAMRService_RunJEvalH0H1Bias(__inS);
    try
    {
        RunJEvalH0H1Bias_async(__cb, task, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __iBS__JointAMRService_all[] =
{
    "GetBlankAMRFinderTask",
    "GetBlankCpGSiteMapInfo",
    "GetBlankJAMRFixedPQModelTask",
    "GetBlankJEvalKnownAMRTask",
    "GetBlankJEvalSingleH0H1BiasTask",
    "GetCpGIdxs",
    "GetCpGSites",
    "RebuildJAMRFixedPQModel",
    "RunAMRFinder",
    "RunJEvalH0H1Bias",
    "RunJEvalKnownAMR",
    "SetCpGSiteMap",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
iBS::JointAMRService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__iBS__JointAMRService_all, __iBS__JointAMRService_all + 16, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __iBS__JointAMRService_all)
    {
        case 0:
        {
            return ___GetBlankAMRFinderTask(in, current);
        }
        case 1:
        {
            return ___GetBlankCpGSiteMapInfo(in, current);
        }
        case 2:
        {
            return ___GetBlankJAMRFixedPQModelTask(in, current);
        }
        case 3:
        {
            return ___GetBlankJEvalKnownAMRTask(in, current);
        }
        case 4:
        {
            return ___GetBlankJEvalSingleH0H1BiasTask(in, current);
        }
        case 5:
        {
            return ___GetCpGIdxs(in, current);
        }
        case 6:
        {
            return ___GetCpGSites(in, current);
        }
        case 7:
        {
            return ___RebuildJAMRFixedPQModel(in, current);
        }
        case 8:
        {
            return ___RunAMRFinder(in, current);
        }
        case 9:
        {
            return ___RunJEvalH0H1Bias(in, current);
        }
        case 10:
        {
            return ___RunJEvalKnownAMR(in, current);
        }
        case 11:
        {
            return ___SetCpGSiteMap(in, current);
        }
        case 12:
        {
            return ___ice_id(in, current);
        }
        case 13:
        {
            return ___ice_ids(in, current);
        }
        case 14:
        {
            return ___ice_isA(in, current);
        }
        case 15:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
iBS::JointAMRService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
iBS::JointAMRService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
iBS::__patch(JointAMRServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::iBS::JointAMRServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::iBS::JointAMRService::ice_staticId(), v);
    }
}
