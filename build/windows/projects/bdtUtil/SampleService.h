// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SampleService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __SampleService_h__
#define __SampleService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <BasicSliceDefine.h>
#include <FCDCentralService.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iBS
{

class SeqSampleService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::SeqSampleService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::SeqSampleService*);

}

}

namespace iBS
{

class SeqSampleService;
bool operator==(const SeqSampleService&, const SeqSampleService&);
bool operator<(const SeqSampleService&, const SeqSampleService&);
::Ice::Object* upCast(::iBS::SeqSampleService*);
typedef ::IceInternal::Handle< ::iBS::SeqSampleService> SeqSampleServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::SeqSampleService> SeqSampleServicePrx;
void __patch(SeqSampleServicePtr&, const ::Ice::ObjectPtr&);

}

namespace iBS
{

struct BamToBinCountSampleInfo
{
    ::std::string SampleName;
    ::std::string BamFile;
    ::std::string Cell;
    ::std::string Treatment;
    ::std::string Description;
    ::iBS::GenomeEnum Genome;
    ::iBS::StringVec RefNames;
    ::Ice::Int BinWidth;
};

typedef ::std::vector< ::iBS::BamToBinCountSampleInfo> BamToBinCountSampleInfoVec;

enum BatchSampleOrganizeEnum
{
    BatchSampleOrganizeSeparate = 0,
    BatchSampleOrganizeGroup = 1
};

struct BamToBinCountInfo
{
    ::std::string BamFile;
    ::iBS::StringVec RefNames;
    ::Ice::Int BinWidth;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::iBS::BamToBinCountSampleInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::BamToBinCountSampleInfo, S>
{
    static void write(S* __os, const ::iBS::BamToBinCountSampleInfo& v)
    {
        __os->write(v.SampleName);
        __os->write(v.BamFile);
        __os->write(v.Cell);
        __os->write(v.Treatment);
        __os->write(v.Description);
        __os->write(v.Genome);
        __os->write(v.RefNames);
        __os->write(v.BinWidth);
    }
};

template<class S>
struct StreamReader< ::iBS::BamToBinCountSampleInfo, S>
{
    static void read(S* __is, ::iBS::BamToBinCountSampleInfo& v)
    {
        __is->read(v.SampleName);
        __is->read(v.BamFile);
        __is->read(v.Cell);
        __is->read(v.Treatment);
        __is->read(v.Description);
        __is->read(v.Genome);
        __is->read(v.RefNames);
        __is->read(v.BinWidth);
    }
};

template<>
struct StreamableTraits< ::iBS::BatchSampleOrganizeEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::BamToBinCountInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::BamToBinCountInfo, S>
{
    static void write(S* __os, const ::iBS::BamToBinCountInfo& v)
    {
        __os->write(v.BamFile);
        __os->write(v.RefNames);
        __os->write(v.BinWidth);
    }
};

template<class S>
struct StreamReader< ::iBS::BamToBinCountInfo, S>
{
    static void read(S* __is, ::iBS::BamToBinCountInfo& v)
    {
        __is->read(v.BamFile);
        __is->read(v.RefNames);
        __is->read(v.BinWidth);
    }
};

}

namespace iBS
{

class AMD_SeqSampleService_CreateBamToBinCountSamples : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples> AMD_SeqSampleService_CreateBamToBinCountSamplesPtr;

class AMD_SeqSampleService_GetHighCountBins : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_SeqSampleService_GetHighCountBins> AMD_SeqSampleService_GetHighCountBinsPtr;

class AMD_SeqSampleService_GetBasePairCountsInBins : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::iBS::IntVecVec&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_SeqSampleService_GetBasePairCountsInBins> AMD_SeqSampleService_GetBasePairCountsInBinsPtr;

}

namespace IceAsync
{

namespace iBS
{

class AMD_SeqSampleService_CreateBamToBinCountSamples : public ::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples, public ::IceInternal::IncomingAsync
{
public:

    AMD_SeqSampleService_CreateBamToBinCountSamples(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_SeqSampleService_GetHighCountBins : public ::iBS::AMD_SeqSampleService_GetHighCountBins, public ::IceInternal::IncomingAsync
{
public:

    AMD_SeqSampleService_GetHighCountBins(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_SeqSampleService_GetBasePairCountsInBins : public ::iBS::AMD_SeqSampleService_GetBasePairCountsInBins, public ::IceInternal::IncomingAsync
{
public:

    AMD_SeqSampleService_GetBasePairCountsInBins(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::iBS::IntVecVec&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace iBS
{

class Callback_SeqSampleService_CreateBamToBinCountSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_CreateBamToBinCountSamples_Base> Callback_SeqSampleService_CreateBamToBinCountSamplesPtr;

class Callback_SeqSampleService_GetBlankBamToBinCountSample_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetBlankBamToBinCountSample_Base> Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr;

class Callback_SeqSampleService_GetRefDataFromBamFile_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetRefDataFromBamFile_Base> Callback_SeqSampleService_GetRefDataFromBamFilePtr;

class Callback_SeqSampleService_GetRefBinRanges_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetRefBinRanges_Base> Callback_SeqSampleService_GetRefBinRangesPtr;

class Callback_SeqSampleService_GetBlankBamToBinCountInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetBlankBamToBinCountInfo_Base> Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr;

class Callback_SeqSampleService_GetHighCountBins_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetHighCountBins_Base> Callback_SeqSampleService_GetHighCountBinsPtr;

class Callback_SeqSampleService_GetBasePairCountsInBins_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SeqSampleService_GetBasePairCountsInBins_Base> Callback_SeqSampleService_GetBasePairCountsInBinsPtr;

}

namespace IceProxy
{

namespace iBS
{

class SeqSampleService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, ::iBS::IntVec& sampleIDs, ::Ice::Long& taskID)
    {
        return CreateBamToBinCountSamples(samples, sampleIDs, taskID, 0);
    }
    ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, ::iBS::IntVec& sampleIDs, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return CreateBamToBinCountSamples(samples, sampleIDs, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateBamToBinCountSamples(samples, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateBamToBinCountSamples(samples, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateBamToBinCountSamples(samples, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateBamToBinCountSamples(samples, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVec&, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVec sampleIDs;
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_CreateBamToBinCountSamples(sampleIDs, taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, sampleIDs, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVec&, ::Ice::Long)> _response;
        };
        return begin_CreateBamToBinCountSamples(samples, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples)
    {
        return begin_CreateBamToBinCountSamples(samples, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context& __ctx)
    {
        return begin_CreateBamToBinCountSamples(samples, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateBamToBinCountSamples(samples, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateBamToBinCountSamples(samples, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::iBS::Callback_SeqSampleService_CreateBamToBinCountSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateBamToBinCountSamples(samples, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_CreateBamToBinCountSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateBamToBinCountSamples(samples, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_CreateBamToBinCountSamples(::iBS::IntVec& sampleIDs, ::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, ::iBS::IntVec&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample()
    {
        return GetBlankBamToBinCountSample(0);
    }
    ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Context& __ctx)
    {
        return GetBlankBamToBinCountSample(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountSample(const ::IceInternal::Function<void (const ::iBS::BamToBinCountSampleInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankBamToBinCountSample(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountSample(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankBamToBinCountSample(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::iBS::BamToBinCountSampleInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankBamToBinCountSample(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountSample(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankBamToBinCountSample(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankBamToBinCountSample(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::iBS::BamToBinCountSampleInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::iBS::BamToBinCountSampleInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::BamToBinCountSampleInfo __ret;
                try
                {
                    __ret = __proxy->end_GetBlankBamToBinCountSample(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::iBS::BamToBinCountSampleInfo&)> _response;
        };
        return begin_GetBlankBamToBinCountSample(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample()
    {
        return begin_GetBlankBamToBinCountSample(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankBamToBinCountSample(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountSample(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::iBS::Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountSample(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountSample(&__ctx, __del, __cookie);
    }

    ::iBS::BamToBinCountSampleInfo end_GetBlankBamToBinCountSample(const ::Ice::AsyncResultPtr&);
    
private:

    ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountSample(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetRefDataFromBamFile(const ::std::string& bamFile, ::iBS::StringVec& refNames, ::iBS::LongVec& refLengths)
    {
        return GetRefDataFromBamFile(bamFile, refNames, refLengths, 0);
    }
    ::Ice::Int GetRefDataFromBamFile(const ::std::string& bamFile, ::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::Context& __ctx)
    {
        return GetRefDataFromBamFile(bamFile, refNames, refLengths, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRefDataFromBamFile(bamFile, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRefDataFromBamFile(bamFile, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRefDataFromBamFile(bamFile, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRefDataFromBamFile(bamFile, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::StringVec refNames;
                ::iBS::LongVec refLengths;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetRefDataFromBamFile(refNames, refLengths, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, refNames, refLengths);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&)> _response;
        };
        return begin_GetRefDataFromBamFile(bamFile, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile)
    {
        return begin_GetRefDataFromBamFile(bamFile, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context& __ctx)
    {
        return begin_GetRefDataFromBamFile(bamFile, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefDataFromBamFile(bamFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefDataFromBamFile(bamFile, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::iBS::Callback_SeqSampleService_GetRefDataFromBamFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefDataFromBamFile(bamFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetRefDataFromBamFilePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefDataFromBamFile(bamFile, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetRefDataFromBamFile(::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetRefDataFromBamFile(const ::std::string&, ::iBS::StringVec&, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetRefDataFromBamFile(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, ::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos)
    {
        return GetRefBinRanges(bbci, refBinFroms, refBinTos, 0);
    }
    ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, ::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::Context& __ctx)
    {
        return GetRefBinRanges(bbci, refBinFroms, refBinTos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRefBinRanges(bbci, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRefBinRanges(bbci, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRefBinRanges(bbci, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRefBinRanges(bbci, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::LongVec refBinFroms;
                ::iBS::LongVec refBinTos;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetRefBinRanges(refBinFroms, refBinTos, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, refBinFroms, refBinTos);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)> _response;
        };
        return begin_GetRefBinRanges(bbci, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci)
    {
        return begin_GetRefBinRanges(bbci, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context& __ctx)
    {
        return begin_GetRefBinRanges(bbci, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefBinRanges(bbci, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefBinRanges(bbci, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::Callback_SeqSampleService_GetRefBinRangesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefBinRanges(bbci, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetRefBinRangesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRefBinRanges(bbci, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetRefBinRanges(::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo&, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo()
    {
        return GetBlankBamToBinCountInfo(0);
    }
    ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx)
    {
        return GetBlankBamToBinCountInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountInfo(const ::IceInternal::Function<void (const ::iBS::BamToBinCountInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankBamToBinCountInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankBamToBinCountInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::iBS::BamToBinCountInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankBamToBinCountInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankBamToBinCountInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankBamToBinCountInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::iBS::BamToBinCountInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::iBS::BamToBinCountInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::BamToBinCountInfo __ret;
                try
                {
                    __ret = __proxy->end_GetBlankBamToBinCountInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::iBS::BamToBinCountInfo&)> _response;
        };
        return begin_GetBlankBamToBinCountInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo()
    {
        return begin_GetBlankBamToBinCountInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankBamToBinCountInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::iBS::Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankBamToBinCountInfo(&__ctx, __del, __cookie);
    }

    ::iBS::BamToBinCountInfo end_GetBlankBamToBinCountInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankBamToBinCountInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, ::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts)
    {
        return GetHighCountBins(bbci, cutoff, binIdxs, binCounts, 0);
    }
    ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, ::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts, const ::Ice::Context& __ctx)
    {
        return GetHighCountBins(bbci, cutoff, binIdxs, binCounts, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHighCountBins(bbci, cutoff, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHighCountBins(bbci, cutoff, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetHighCountBins(bbci, cutoff, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetHighCountBins(bbci, cutoff, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::LongVec binIdxs;
                ::iBS::LongVec binCounts;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetHighCountBins(binIdxs, binCounts, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, binIdxs, binCounts);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&)> _response;
        };
        return begin_GetHighCountBins(bbci, cutoff, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff)
    {
        return begin_GetHighCountBins(bbci, cutoff, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context& __ctx)
    {
        return begin_GetHighCountBins(bbci, cutoff, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHighCountBins(bbci, cutoff, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHighCountBins(bbci, cutoff, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::iBS::Callback_SeqSampleService_GetHighCountBinsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHighCountBins(bbci, cutoff, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetHighCountBinsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetHighCountBins(bbci, cutoff, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetHighCountBins(::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, ::iBS::IntVecVec& bpcounts)
    {
        return GetBasePairCountsInBins(bbci, binIdxs, bpcounts, 0);
    }
    ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, ::iBS::IntVecVec& bpcounts, const ::Ice::Context& __ctx)
    {
        return GetBasePairCountsInBins(bbci, binIdxs, bpcounts, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBasePairCountsInBins(bbci, binIdxs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBasePairCountsInBins(bbci, binIdxs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVecVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVecVec bpcounts;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBasePairCountsInBins(bpcounts, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, bpcounts);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVecVec&)> _response;
        };
        return begin_GetBasePairCountsInBins(bbci, binIdxs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context& __ctx)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::iBS::Callback_SeqSampleService_GetBasePairCountsInBinsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context& __ctx, const ::iBS::Callback_SeqSampleService_GetBasePairCountsInBinsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBasePairCountsInBins(bbci, binIdxs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBasePairCountsInBins(::iBS::IntVecVec& bpcounts, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, ::iBS::IntVecVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_secure(bool __secure) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_twoway() const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_oneway() const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_batchOneway() const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_datagram() const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_batchDatagram() const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_compress(bool __compress) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SeqSampleService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SeqSampleService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iBS
{

class SeqSampleService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, ::iBS::IntVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetRefDataFromBamFile(const ::std::string&, ::iBS::StringVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo&, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace iBS
{

class SeqSampleService : virtual public ::IceDelegate::iBS::SeqSampleService,
                         virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, ::iBS::IntVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRefDataFromBamFile(const ::std::string&, ::iBS::StringVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo&, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace iBS
{

class SeqSampleService : virtual public ::IceDelegate::iBS::SeqSampleService,
                         virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, ::iBS::IntVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRefDataFromBamFile(const ::std::string&, ::iBS::StringVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo&, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace iBS
{

class SeqSampleService : virtual public ::Ice::Object
{
public:

    typedef SeqSampleServicePrx ProxyType;
    typedef SeqSampleServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void CreateBamToBinCountSamples_async(const ::iBS::AMD_SeqSampleService_CreateBamToBinCountSamplesPtr&, const ::iBS::BamToBinCountSampleInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CreateBamToBinCountSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iBS::BamToBinCountSampleInfo GetBlankBamToBinCountSample(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankBamToBinCountSample(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetRefDataFromBamFile(const ::std::string&, ::iBS::StringVec&, ::iBS::LongVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetRefDataFromBamFile(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetRefBinRanges(const ::iBS::BamToBinCountInfo&, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetRefBinRanges(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iBS::BamToBinCountInfo GetBlankBamToBinCountInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankBamToBinCountInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetHighCountBins_async(const ::iBS::AMD_SeqSampleService_GetHighCountBinsPtr&, const ::iBS::BamToBinCountInfo&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetHighCountBins(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetBasePairCountsInBins_async(const ::iBS::AMD_SeqSampleService_GetBasePairCountsInBinsPtr&, const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBasePairCountsInBins(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const SeqSampleService& l, const SeqSampleService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SeqSampleService& l, const SeqSampleService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iBS
{

template<class T>
class CallbackNC_SeqSampleService_CreateBamToBinCountSamples : public Callback_SeqSampleService_CreateBamToBinCountSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long);

    CallbackNC_SeqSampleService_CreateBamToBinCountSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec sampleIDs;
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CreateBamToBinCountSamples(sampleIDs, taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, sampleIDs, taskID);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_CreateBamToBinCountSamplesPtr
newCallback_SeqSampleService_CreateBamToBinCountSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_CreateBamToBinCountSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_CreateBamToBinCountSamplesPtr
newCallback_SeqSampleService_CreateBamToBinCountSamples(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_CreateBamToBinCountSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_CreateBamToBinCountSamples : public Callback_SeqSampleService_CreateBamToBinCountSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, const CT&);

    Callback_SeqSampleService_CreateBamToBinCountSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec sampleIDs;
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CreateBamToBinCountSamples(sampleIDs, taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, sampleIDs, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_CreateBamToBinCountSamplesPtr
newCallback_SeqSampleService_CreateBamToBinCountSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_CreateBamToBinCountSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_CreateBamToBinCountSamplesPtr
newCallback_SeqSampleService_CreateBamToBinCountSamples(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_CreateBamToBinCountSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetBlankBamToBinCountSample : public Callback_SeqSampleService_GetBlankBamToBinCountSample_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iBS::BamToBinCountSampleInfo&);

    CallbackNC_SeqSampleService_GetBlankBamToBinCountSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BamToBinCountSampleInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankBamToBinCountSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr
newCallback_SeqSampleService_GetBlankBamToBinCountSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BamToBinCountSampleInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBlankBamToBinCountSample<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr
newCallback_SeqSampleService_GetBlankBamToBinCountSample(T* instance, void (T::*cb)(const ::iBS::BamToBinCountSampleInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBlankBamToBinCountSample<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetBlankBamToBinCountSample : public Callback_SeqSampleService_GetBlankBamToBinCountSample_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iBS::BamToBinCountSampleInfo&, const CT&);

    Callback_SeqSampleService_GetBlankBamToBinCountSample(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BamToBinCountSampleInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankBamToBinCountSample(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr
newCallback_SeqSampleService_GetBlankBamToBinCountSample(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BamToBinCountSampleInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBlankBamToBinCountSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetBlankBamToBinCountSamplePtr
newCallback_SeqSampleService_GetBlankBamToBinCountSample(T* instance, void (T::*cb)(const ::iBS::BamToBinCountSampleInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBlankBamToBinCountSample<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetRefDataFromBamFile : public Callback_SeqSampleService_GetRefDataFromBamFile_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&);

    CallbackNC_SeqSampleService_GetRefDataFromBamFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::StringVec refNames;
        ::iBS::LongVec refLengths;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRefDataFromBamFile(refNames, refLengths, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, refNames, refLengths);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetRefDataFromBamFilePtr
newCallback_SeqSampleService_GetRefDataFromBamFile(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetRefDataFromBamFile<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetRefDataFromBamFilePtr
newCallback_SeqSampleService_GetRefDataFromBamFile(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetRefDataFromBamFile<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetRefDataFromBamFile : public Callback_SeqSampleService_GetRefDataFromBamFile_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&, const CT&);

    Callback_SeqSampleService_GetRefDataFromBamFile(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::StringVec refNames;
        ::iBS::LongVec refLengths;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRefDataFromBamFile(refNames, refLengths, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, refNames, refLengths, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetRefDataFromBamFilePtr
newCallback_SeqSampleService_GetRefDataFromBamFile(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetRefDataFromBamFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetRefDataFromBamFilePtr
newCallback_SeqSampleService_GetRefDataFromBamFile(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetRefDataFromBamFile<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetRefBinRanges : public Callback_SeqSampleService_GetRefBinRanges_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&);

    CallbackNC_SeqSampleService_GetRefBinRanges(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec refBinFroms;
        ::iBS::LongVec refBinTos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRefBinRanges(refBinFroms, refBinTos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, refBinFroms, refBinTos);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetRefBinRangesPtr
newCallback_SeqSampleService_GetRefBinRanges(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetRefBinRanges<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetRefBinRangesPtr
newCallback_SeqSampleService_GetRefBinRanges(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetRefBinRanges<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetRefBinRanges : public Callback_SeqSampleService_GetRefBinRanges_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&);

    Callback_SeqSampleService_GetRefBinRanges(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec refBinFroms;
        ::iBS::LongVec refBinTos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRefBinRanges(refBinFroms, refBinTos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, refBinFroms, refBinTos, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetRefBinRangesPtr
newCallback_SeqSampleService_GetRefBinRanges(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetRefBinRanges<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetRefBinRangesPtr
newCallback_SeqSampleService_GetRefBinRanges(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetRefBinRanges<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetBlankBamToBinCountInfo : public Callback_SeqSampleService_GetBlankBamToBinCountInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iBS::BamToBinCountInfo&);

    CallbackNC_SeqSampleService_GetBlankBamToBinCountInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BamToBinCountInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankBamToBinCountInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr
newCallback_SeqSampleService_GetBlankBamToBinCountInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BamToBinCountInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBlankBamToBinCountInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr
newCallback_SeqSampleService_GetBlankBamToBinCountInfo(T* instance, void (T::*cb)(const ::iBS::BamToBinCountInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBlankBamToBinCountInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetBlankBamToBinCountInfo : public Callback_SeqSampleService_GetBlankBamToBinCountInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iBS::BamToBinCountInfo&, const CT&);

    Callback_SeqSampleService_GetBlankBamToBinCountInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BamToBinCountInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankBamToBinCountInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr
newCallback_SeqSampleService_GetBlankBamToBinCountInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BamToBinCountInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBlankBamToBinCountInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetBlankBamToBinCountInfoPtr
newCallback_SeqSampleService_GetBlankBamToBinCountInfo(T* instance, void (T::*cb)(const ::iBS::BamToBinCountInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBlankBamToBinCountInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetHighCountBins : public Callback_SeqSampleService_GetHighCountBins_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&);

    CallbackNC_SeqSampleService_GetHighCountBins(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec binIdxs;
        ::iBS::LongVec binCounts;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHighCountBins(binIdxs, binCounts, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, binIdxs, binCounts);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetHighCountBinsPtr
newCallback_SeqSampleService_GetHighCountBins(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetHighCountBins<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetHighCountBinsPtr
newCallback_SeqSampleService_GetHighCountBins(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetHighCountBins<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetHighCountBins : public Callback_SeqSampleService_GetHighCountBins_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&);

    Callback_SeqSampleService_GetHighCountBins(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec binIdxs;
        ::iBS::LongVec binCounts;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetHighCountBins(binIdxs, binCounts, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, binIdxs, binCounts, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetHighCountBinsPtr
newCallback_SeqSampleService_GetHighCountBins(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetHighCountBins<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetHighCountBinsPtr
newCallback_SeqSampleService_GetHighCountBins(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetHighCountBins<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SeqSampleService_GetBasePairCountsInBins : public Callback_SeqSampleService_GetBasePairCountsInBins_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVecVec&);

    CallbackNC_SeqSampleService_GetBasePairCountsInBins(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVecVec bpcounts;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBasePairCountsInBins(bpcounts, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, bpcounts);
        }
    }

    Response response;
};

template<class T> Callback_SeqSampleService_GetBasePairCountsInBinsPtr
newCallback_SeqSampleService_GetBasePairCountsInBins(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBasePairCountsInBins<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SeqSampleService_GetBasePairCountsInBinsPtr
newCallback_SeqSampleService_GetBasePairCountsInBins(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SeqSampleService_GetBasePairCountsInBins<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SeqSampleService_GetBasePairCountsInBins : public Callback_SeqSampleService_GetBasePairCountsInBins_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVecVec&, const CT&);

    Callback_SeqSampleService_GetBasePairCountsInBins(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::SeqSampleServicePrx __proxy = ::iBS::SeqSampleServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVecVec bpcounts;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBasePairCountsInBins(bpcounts, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, bpcounts, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_SeqSampleService_GetBasePairCountsInBinsPtr
newCallback_SeqSampleService_GetBasePairCountsInBins(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBasePairCountsInBins<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SeqSampleService_GetBasePairCountsInBinsPtr
newCallback_SeqSampleService_GetBasePairCountsInBins(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SeqSampleService_GetBasePairCountsInBins<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
