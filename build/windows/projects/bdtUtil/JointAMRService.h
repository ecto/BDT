// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `JointAMRService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __JointAMRService_h__
#define __JointAMRService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <BasicSliceDefine.h>
#include <FCDCentralService.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iBS
{

class JointAMRService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::JointAMRService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::JointAMRService*);

}

}

namespace iBS
{

class JointAMRService;
bool operator==(const JointAMRService&, const JointAMRService&);
bool operator<(const JointAMRService&, const JointAMRService&);
::Ice::Object* upCast(::iBS::JointAMRService*);
typedef ::IceInternal::Handle< ::iBS::JointAMRService> JointAMRServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::JointAMRService> JointAMRServicePrx;
void __patch(JointAMRServicePtr&, const ::Ice::ObjectPtr&);

}

namespace iBS
{

enum MethyStateEnum
{
    MethyStateUnknown = 0,
    MethyStateU = 1,
    MethyStateM = 2
};

struct BSEvidence
{
    ::Ice::Int RefIdx;
    ::Ice::Int RefOffset;
    ::iBS::MethyStateEnum MethyState;
    bool IsWatson;
    bool IsForward;
    ::Ice::Byte MateID;
    ::Ice::Byte MapQ;
    ::Ice::Byte Qual;
    ::Ice::Int SeqCycle;
    ::Ice::Int StudyID;
    ::Ice::Long ReadID;

    bool operator==(const BSEvidence& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(RefIdx != __rhs.RefIdx)
        {
            return false;
        }
        if(RefOffset != __rhs.RefOffset)
        {
            return false;
        }
        if(MethyState != __rhs.MethyState)
        {
            return false;
        }
        if(IsWatson != __rhs.IsWatson)
        {
            return false;
        }
        if(IsForward != __rhs.IsForward)
        {
            return false;
        }
        if(MateID != __rhs.MateID)
        {
            return false;
        }
        if(MapQ != __rhs.MapQ)
        {
            return false;
        }
        if(Qual != __rhs.Qual)
        {
            return false;
        }
        if(SeqCycle != __rhs.SeqCycle)
        {
            return false;
        }
        if(StudyID != __rhs.StudyID)
        {
            return false;
        }
        if(ReadID != __rhs.ReadID)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BSEvidence& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(RefIdx < __rhs.RefIdx)
        {
            return true;
        }
        else if(__rhs.RefIdx < RefIdx)
        {
            return false;
        }
        if(RefOffset < __rhs.RefOffset)
        {
            return true;
        }
        else if(__rhs.RefOffset < RefOffset)
        {
            return false;
        }
        if(MethyState < __rhs.MethyState)
        {
            return true;
        }
        else if(__rhs.MethyState < MethyState)
        {
            return false;
        }
        if(IsWatson < __rhs.IsWatson)
        {
            return true;
        }
        else if(__rhs.IsWatson < IsWatson)
        {
            return false;
        }
        if(IsForward < __rhs.IsForward)
        {
            return true;
        }
        else if(__rhs.IsForward < IsForward)
        {
            return false;
        }
        if(MateID < __rhs.MateID)
        {
            return true;
        }
        else if(__rhs.MateID < MateID)
        {
            return false;
        }
        if(MapQ < __rhs.MapQ)
        {
            return true;
        }
        else if(__rhs.MapQ < MapQ)
        {
            return false;
        }
        if(Qual < __rhs.Qual)
        {
            return true;
        }
        else if(__rhs.Qual < Qual)
        {
            return false;
        }
        if(SeqCycle < __rhs.SeqCycle)
        {
            return true;
        }
        else if(__rhs.SeqCycle < SeqCycle)
        {
            return false;
        }
        if(StudyID < __rhs.StudyID)
        {
            return true;
        }
        else if(__rhs.StudyID < StudyID)
        {
            return false;
        }
        if(ReadID < __rhs.ReadID)
        {
            return true;
        }
        else if(__rhs.ReadID < ReadID)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BSEvidence& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const BSEvidence& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const BSEvidence& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const BSEvidence& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::BSEvidence> BSEvidenceVec;

enum AMRSlidingWinEnum
{
    AMRSlidingWinCenterBpCnt = 0,
    AMRSlidingWinCenterCpGCnt = 1
};

struct AMRFinderResult
{
    ::iBS::FcdcAdminServicePrx fcdc;
    ::Ice::Long WinCnt;
    ::Ice::Int OIDH0LogLikelihood;
    ::Ice::Int OIDH1LogLikelihood;
    ::Ice::Int SaveProperty;
    ::Ice::Int GIDProperty;
};

enum AMRFinderRunModeEnum
{
    AMRFinderRunModeRealData,
    AMRFinderRunModeH0SimulatedData
};

struct AMRFinderTask
{
    ::Ice::Long TaskID;
    ::std::string TaskName;
    ::iBS::AMRFinderRunModeEnum RunMode;
    ::iBS::GenomeEnum Genome;
    ::iBS::StringVec Refs;
    ::iBS::StringVec EvTblFiles;
    ::Ice::Int MaxReadLen;
    ::Ice::Int ThreadCnt;
    ::Ice::Long RamMb;
    ::Ice::Long BatchEVCnt;
    ::iBS::AMRSlidingWinEnum SlidingWin;
    ::Ice::Int WinSize;
    ::Ice::Int MinMAPQ;
    ::Ice::Int MinMUCntPerCpGSite;
    ::Ice::Int MinEVCntPerRead;
    ::Ice::Int MinReadsPerWindow;
    ::Ice::Double HighProb;
    ::Ice::Double LowProb;
    ::Ice::Int MaxEMIter;
    ::Ice::Double PseudoCnt;
    ::iBS::AMRFinderResult Result;
};

struct CpGSiteMapInfo
{
    ::iBS::StringVec Refs;
    ::iBS::LongVec RefCpGIdxFroms;
    ::iBS::LongVec RefCpGCnts;
    ::Ice::Long TotalCpGCnt;
    ::Ice::Int OIDForCpGIdx2BpIdx;
    ::iBS::GenomeEnum Genome;
    bool MergeWatsonCrick;
};

struct JFixedPQModel
{
    ::iBS::StringVec SampleNames;
    ::iBS::IntVec SingleH0H1LLOIDs;
    ::iBS::IntVec JointH0H1LLOIDs;
    ::Ice::Long FeatureIdxFrom;
    ::Ice::Long FeatureIdxTo;
    ::Ice::Int MaxEMIter;
    ::Ice::Double EMErrTol;
};

struct JAMRFixedPQModelTask
{
    ::Ice::Long TaskID;
    ::std::string TaskName;
    ::Ice::Int ThreadCnt;
    ::Ice::Long RamMb;
    ::iBS::JFixedPQModel Model;
};

struct JEvalKnownAMRTask
{
    ::iBS::BpRangeVec KnownAMRs;
    ::iBS::StringVec SampleNames;
    ::iBS::IntVec SingleH0H1LLOIDs;
    ::Ice::Long TopCpGCnt;
    ::Ice::Long TopRegionCnt;
    ::Ice::Long MergeDistance;
    ::std::string OutDir;
};

struct JEvalSingleH0H1BiasTask
{
    ::iBS::StringVec SampleNames;
    ::iBS::IntVec SingleH0H1LLOIDs;
    ::Ice::Long SelectCpGCnt;
    ::iBS::IntVec OutIDs;
    ::std::string OutDir;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::iBS::MethyStateEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::BSEvidence>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::BSEvidence, S>
{
    static void write(S* __os, const ::iBS::BSEvidence& v)
    {
        __os->write(v.RefIdx);
        __os->write(v.RefOffset);
        __os->write(v.MethyState);
        __os->write(v.IsWatson);
        __os->write(v.IsForward);
        __os->write(v.MateID);
        __os->write(v.MapQ);
        __os->write(v.Qual);
        __os->write(v.SeqCycle);
        __os->write(v.StudyID);
        __os->write(v.ReadID);
    }
};

template<class S>
struct StreamReader< ::iBS::BSEvidence, S>
{
    static void read(S* __is, ::iBS::BSEvidence& v)
    {
        __is->read(v.RefIdx);
        __is->read(v.RefOffset);
        __is->read(v.MethyState);
        __is->read(v.IsWatson);
        __is->read(v.IsForward);
        __is->read(v.MateID);
        __is->read(v.MapQ);
        __is->read(v.Qual);
        __is->read(v.SeqCycle);
        __is->read(v.StudyID);
        __is->read(v.ReadID);
    }
};

template<>
struct StreamableTraits< ::iBS::AMRSlidingWinEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::AMRFinderResult>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::AMRFinderResult, S>
{
    static void write(S* __os, const ::iBS::AMRFinderResult& v)
    {
        __os->write(v.fcdc);
        __os->write(v.WinCnt);
        __os->write(v.OIDH0LogLikelihood);
        __os->write(v.OIDH1LogLikelihood);
        __os->write(v.SaveProperty);
        __os->write(v.GIDProperty);
    }
};

template<class S>
struct StreamReader< ::iBS::AMRFinderResult, S>
{
    static void read(S* __is, ::iBS::AMRFinderResult& v)
    {
        __is->read(v.fcdc);
        __is->read(v.WinCnt);
        __is->read(v.OIDH0LogLikelihood);
        __is->read(v.OIDH1LogLikelihood);
        __is->read(v.SaveProperty);
        __is->read(v.GIDProperty);
    }
};

template<>
struct StreamableTraits< ::iBS::AMRFinderRunModeEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::AMRFinderTask>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 112;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::AMRFinderTask, S>
{
    static void write(S* __os, const ::iBS::AMRFinderTask& v)
    {
        __os->write(v.TaskID);
        __os->write(v.TaskName);
        __os->write(v.RunMode);
        __os->write(v.Genome);
        __os->write(v.Refs);
        __os->write(v.EvTblFiles);
        __os->write(v.MaxReadLen);
        __os->write(v.ThreadCnt);
        __os->write(v.RamMb);
        __os->write(v.BatchEVCnt);
        __os->write(v.SlidingWin);
        __os->write(v.WinSize);
        __os->write(v.MinMAPQ);
        __os->write(v.MinMUCntPerCpGSite);
        __os->write(v.MinEVCntPerRead);
        __os->write(v.MinReadsPerWindow);
        __os->write(v.HighProb);
        __os->write(v.LowProb);
        __os->write(v.MaxEMIter);
        __os->write(v.PseudoCnt);
        __os->write(v.Result);
    }
};

template<class S>
struct StreamReader< ::iBS::AMRFinderTask, S>
{
    static void read(S* __is, ::iBS::AMRFinderTask& v)
    {
        __is->read(v.TaskID);
        __is->read(v.TaskName);
        __is->read(v.RunMode);
        __is->read(v.Genome);
        __is->read(v.Refs);
        __is->read(v.EvTblFiles);
        __is->read(v.MaxReadLen);
        __is->read(v.ThreadCnt);
        __is->read(v.RamMb);
        __is->read(v.BatchEVCnt);
        __is->read(v.SlidingWin);
        __is->read(v.WinSize);
        __is->read(v.MinMAPQ);
        __is->read(v.MinMUCntPerCpGSite);
        __is->read(v.MinEVCntPerRead);
        __is->read(v.MinReadsPerWindow);
        __is->read(v.HighProb);
        __is->read(v.LowProb);
        __is->read(v.MaxEMIter);
        __is->read(v.PseudoCnt);
        __is->read(v.Result);
    }
};

template<>
struct StreamableTraits< ::iBS::CpGSiteMapInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 17;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::CpGSiteMapInfo, S>
{
    static void write(S* __os, const ::iBS::CpGSiteMapInfo& v)
    {
        __os->write(v.Refs);
        __os->write(v.RefCpGIdxFroms);
        __os->write(v.RefCpGCnts);
        __os->write(v.TotalCpGCnt);
        __os->write(v.OIDForCpGIdx2BpIdx);
        __os->write(v.Genome);
        __os->write(v.MergeWatsonCrick);
    }
};

template<class S>
struct StreamReader< ::iBS::CpGSiteMapInfo, S>
{
    static void read(S* __is, ::iBS::CpGSiteMapInfo& v)
    {
        __is->read(v.Refs);
        __is->read(v.RefCpGIdxFroms);
        __is->read(v.RefCpGCnts);
        __is->read(v.TotalCpGCnt);
        __is->read(v.OIDForCpGIdx2BpIdx);
        __is->read(v.Genome);
        __is->read(v.MergeWatsonCrick);
    }
};

template<>
struct StreamableTraits< ::iBS::JFixedPQModel>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 31;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::JFixedPQModel, S>
{
    static void write(S* __os, const ::iBS::JFixedPQModel& v)
    {
        __os->write(v.SampleNames);
        __os->write(v.SingleH0H1LLOIDs);
        __os->write(v.JointH0H1LLOIDs);
        __os->write(v.FeatureIdxFrom);
        __os->write(v.FeatureIdxTo);
        __os->write(v.MaxEMIter);
        __os->write(v.EMErrTol);
    }
};

template<class S>
struct StreamReader< ::iBS::JFixedPQModel, S>
{
    static void read(S* __is, ::iBS::JFixedPQModel& v)
    {
        __is->read(v.SampleNames);
        __is->read(v.SingleH0H1LLOIDs);
        __is->read(v.JointH0H1LLOIDs);
        __is->read(v.FeatureIdxFrom);
        __is->read(v.FeatureIdxTo);
        __is->read(v.MaxEMIter);
        __is->read(v.EMErrTol);
    }
};

template<>
struct StreamableTraits< ::iBS::JAMRFixedPQModelTask>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 52;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::JAMRFixedPQModelTask, S>
{
    static void write(S* __os, const ::iBS::JAMRFixedPQModelTask& v)
    {
        __os->write(v.TaskID);
        __os->write(v.TaskName);
        __os->write(v.ThreadCnt);
        __os->write(v.RamMb);
        __os->write(v.Model);
    }
};

template<class S>
struct StreamReader< ::iBS::JAMRFixedPQModelTask, S>
{
    static void read(S* __is, ::iBS::JAMRFixedPQModelTask& v)
    {
        __is->read(v.TaskID);
        __is->read(v.TaskName);
        __is->read(v.ThreadCnt);
        __is->read(v.RamMb);
        __is->read(v.Model);
    }
};

template<>
struct StreamableTraits< ::iBS::JEvalKnownAMRTask>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 28;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::JEvalKnownAMRTask, S>
{
    static void write(S* __os, const ::iBS::JEvalKnownAMRTask& v)
    {
        __os->write(v.KnownAMRs);
        __os->write(v.SampleNames);
        __os->write(v.SingleH0H1LLOIDs);
        __os->write(v.TopCpGCnt);
        __os->write(v.TopRegionCnt);
        __os->write(v.MergeDistance);
        __os->write(v.OutDir);
    }
};

template<class S>
struct StreamReader< ::iBS::JEvalKnownAMRTask, S>
{
    static void read(S* __is, ::iBS::JEvalKnownAMRTask& v)
    {
        __is->read(v.KnownAMRs);
        __is->read(v.SampleNames);
        __is->read(v.SingleH0H1LLOIDs);
        __is->read(v.TopCpGCnt);
        __is->read(v.TopRegionCnt);
        __is->read(v.MergeDistance);
        __is->read(v.OutDir);
    }
};

template<>
struct StreamableTraits< ::iBS::JEvalSingleH0H1BiasTask>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::JEvalSingleH0H1BiasTask, S>
{
    static void write(S* __os, const ::iBS::JEvalSingleH0H1BiasTask& v)
    {
        __os->write(v.SampleNames);
        __os->write(v.SingleH0H1LLOIDs);
        __os->write(v.SelectCpGCnt);
        __os->write(v.OutIDs);
        __os->write(v.OutDir);
    }
};

template<class S>
struct StreamReader< ::iBS::JEvalSingleH0H1BiasTask, S>
{
    static void read(S* __is, ::iBS::JEvalSingleH0H1BiasTask& v)
    {
        __is->read(v.SampleNames);
        __is->read(v.SingleH0H1LLOIDs);
        __is->read(v.SelectCpGCnt);
        __is->read(v.OutIDs);
        __is->read(v.OutDir);
    }
};

}

namespace iBS
{

class AMD_JointAMRService_RunAMRFinder : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_JointAMRService_RunAMRFinder> AMD_JointAMRService_RunAMRFinderPtr;

class AMD_JointAMRService_RebuildJAMRFixedPQModel : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel> AMD_JointAMRService_RebuildJAMRFixedPQModelPtr;

class AMD_JointAMRService_RunJEvalKnownAMR : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_JointAMRService_RunJEvalKnownAMR> AMD_JointAMRService_RunJEvalKnownAMRPtr;

class AMD_JointAMRService_RunJEvalH0H1Bias : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_JointAMRService_RunJEvalH0H1Bias> AMD_JointAMRService_RunJEvalH0H1BiasPtr;

}

namespace IceAsync
{

namespace iBS
{

class AMD_JointAMRService_RunAMRFinder : public ::iBS::AMD_JointAMRService_RunAMRFinder, public ::IceInternal::IncomingAsync
{
public:

    AMD_JointAMRService_RunAMRFinder(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JointAMRService_RebuildJAMRFixedPQModel : public ::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModel, public ::IceInternal::IncomingAsync
{
public:

    AMD_JointAMRService_RebuildJAMRFixedPQModel(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JointAMRService_RunJEvalKnownAMR : public ::iBS::AMD_JointAMRService_RunJEvalKnownAMR, public ::IceInternal::IncomingAsync
{
public:

    AMD_JointAMRService_RunJEvalKnownAMR(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_JointAMRService_RunJEvalH0H1Bias : public ::iBS::AMD_JointAMRService_RunJEvalH0H1Bias, public ::IceInternal::IncomingAsync
{
public:

    AMD_JointAMRService_RunJEvalH0H1Bias(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace iBS
{

class Callback_JointAMRService_GetBlankAMRFinderTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetBlankAMRFinderTask_Base> Callback_JointAMRService_GetBlankAMRFinderTaskPtr;

class Callback_JointAMRService_RunAMRFinder_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_RunAMRFinder_Base> Callback_JointAMRService_RunAMRFinderPtr;

class Callback_JointAMRService_SetCpGSiteMap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_SetCpGSiteMap_Base> Callback_JointAMRService_SetCpGSiteMapPtr;

class Callback_JointAMRService_GetBlankCpGSiteMapInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetBlankCpGSiteMapInfo_Base> Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr;

class Callback_JointAMRService_GetCpGSites_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetCpGSites_Base> Callback_JointAMRService_GetCpGSitesPtr;

class Callback_JointAMRService_GetCpGIdxs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetCpGIdxs_Base> Callback_JointAMRService_GetCpGIdxsPtr;

class Callback_JointAMRService_GetBlankJAMRFixedPQModelTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetBlankJAMRFixedPQModelTask_Base> Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr;

class Callback_JointAMRService_RebuildJAMRFixedPQModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_RebuildJAMRFixedPQModel_Base> Callback_JointAMRService_RebuildJAMRFixedPQModelPtr;

class Callback_JointAMRService_GetBlankJEvalKnownAMRTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetBlankJEvalKnownAMRTask_Base> Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr;

class Callback_JointAMRService_RunJEvalKnownAMR_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_RunJEvalKnownAMR_Base> Callback_JointAMRService_RunJEvalKnownAMRPtr;

class Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask_Base> Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr;

class Callback_JointAMRService_RunJEvalH0H1Bias_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_JointAMRService_RunJEvalH0H1Bias_Base> Callback_JointAMRService_RunJEvalH0H1BiasPtr;

}

namespace IceProxy
{

namespace iBS
{

class JointAMRService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int GetBlankAMRFinderTask(bool saveproperty, ::iBS::AMRFinderTask& task)
    {
        return GetBlankAMRFinderTask(saveproperty, task, 0);
    }
    ::Ice::Int GetBlankAMRFinderTask(bool saveproperty, ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx)
    {
        return GetBlankAMRFinderTask(saveproperty, task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankAMRFinderTask(bool saveproperty, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMRFinderTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankAMRFinderTask(saveproperty, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankAMRFinderTask(bool saveproperty, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankAMRFinderTask(saveproperty, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMRFinderTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankAMRFinderTask(saveproperty, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankAMRFinderTask(saveproperty, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMRFinderTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::AMRFinderTask&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::AMRFinderTask task;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBlankAMRFinderTask(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, task);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::AMRFinderTask&)> _response;
        };
        return begin_GetBlankAMRFinderTask(saveproperty, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context& __ctx)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty, const ::iBS::Callback_JointAMRService_GetBlankAMRFinderTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool saveproperty, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetBlankAMRFinderTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankAMRFinderTask(saveproperty, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBlankAMRFinderTask(::iBS::AMRFinderTask& task, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBlankAMRFinderTask(bool, ::iBS::AMRFinderTask&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankAMRFinderTask(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask& task, ::Ice::Long& taskID)
    {
        return RunAMRFinder(task, taskID, 0);
    }
    ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask& task, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RunAMRFinder(task, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunAMRFinder(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunAMRFinder(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunAMRFinder(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunAMRFinder(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RunAMRFinder(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RunAMRFinder(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task)
    {
        return begin_RunAMRFinder(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx)
    {
        return begin_RunAMRFinder(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunAMRFinder(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunAMRFinder(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::iBS::Callback_JointAMRService_RunAMRFinderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunAMRFinder(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask& task, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_RunAMRFinderPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunAMRFinder(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RunAMRFinder(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RunAMRFinder(const ::iBS::AMRFinderTask&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap)
    {
        return SetCpGSiteMap(cpgMap, 0);
    }
    ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx)
    {
        return SetCpGSiteMap(cpgMap, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCpGSiteMap(cpgMap, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCpGSiteMap(cpgMap, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCpGSiteMap(cpgMap, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCpGSiteMap(cpgMap, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetCpGSiteMap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetCpGSiteMap(cpgMap, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap)
    {
        return begin_SetCpGSiteMap(cpgMap, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx)
    {
        return begin_SetCpGSiteMap(cpgMap, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCpGSiteMap(cpgMap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCpGSiteMap(cpgMap, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::iBS::Callback_JointAMRService_SetCpGSiteMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCpGSiteMap(cpgMap, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo& cpgMap, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_SetCpGSiteMapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCpGSiteMap(cpgMap, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetCpGSiteMap(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo()
    {
        return GetBlankCpGSiteMapInfo(0);
    }
    ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx)
    {
        return GetBlankCpGSiteMapInfo(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankCpGSiteMapInfo(const ::IceInternal::Function<void (const ::iBS::CpGSiteMapInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankCpGSiteMapInfo(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankCpGSiteMapInfo(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankCpGSiteMapInfo(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::iBS::CpGSiteMapInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankCpGSiteMapInfo(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankCpGSiteMapInfo(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankCpGSiteMapInfo(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::iBS::CpGSiteMapInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::iBS::CpGSiteMapInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::CpGSiteMapInfo __ret;
                try
                {
                    __ret = __proxy->end_GetBlankCpGSiteMapInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::iBS::CpGSiteMapInfo&)> _response;
        };
        return begin_GetBlankCpGSiteMapInfo(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo()
    {
        return begin_GetBlankCpGSiteMapInfo(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankCpGSiteMapInfo(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankCpGSiteMapInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankCpGSiteMapInfo(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::iBS::Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankCpGSiteMapInfo(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankCpGSiteMapInfo(&__ctx, __del, __cookie);
    }

    ::iBS::CpGSiteMapInfo end_GetBlankCpGSiteMapInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankCpGSiteMapInfo(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, ::iBS::LongVec& cpgBpIdxs)
    {
        return GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, cpgBpIdxs, 0);
    }
    ::Ice::Int GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, ::iBS::LongVec& cpgBpIdxs, const ::Ice::Context& __ctx)
    {
        return GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, cpgBpIdxs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::LongVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::LongVec cpgBpIdxs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetCpGSites(cpgBpIdxs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, cpgBpIdxs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::LongVec&)> _response;
        };
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context& __ctx)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::iBS::Callback_JointAMRService_GetCpGSitesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string& ref, ::Ice::Long bpIdxFrom, ::Ice::Long bpIdxTo, bool watson, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetCpGSitesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGSites(ref, bpIdxFrom, bpIdxTo, watson, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetCpGSites(::iBS::LongVec& cpgBpIdxs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, ::iBS::LongVec& cpgIdxs)
    {
        return GetCpGIdxs(ref, bpIdxs, watson, cpgIdxs, 0);
    }
    ::Ice::Int GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, ::iBS::LongVec& cpgIdxs, const ::Ice::Context& __ctx)
    {
        return GetCpGIdxs(ref, bpIdxs, watson, cpgIdxs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetCpGIdxs(ref, bpIdxs, watson, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetCpGIdxs(ref, bpIdxs, watson, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::LongVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::LongVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::LongVec cpgIdxs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetCpGIdxs(cpgIdxs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, cpgIdxs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::LongVec&)> _response;
        };
        return begin_GetCpGIdxs(ref, bpIdxs, watson, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context& __ctx)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::iBS::Callback_JointAMRService_GetCpGIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string& ref, const ::iBS::LongVec& bpIdxs, bool watson, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetCpGIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCpGIdxs(ref, bpIdxs, watson, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetCpGIdxs(::iBS::LongVec& cpgIdxs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task)
    {
        return GetBlankJAMRFixedPQModelTask(task, 0);
    }
    ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx)
    {
        return GetBlankJAMRFixedPQModelTask(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankJAMRFixedPQModelTask(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JAMRFixedPQModelTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJAMRFixedPQModelTask(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJAMRFixedPQModelTask(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJAMRFixedPQModelTask(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JAMRFixedPQModelTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJAMRFixedPQModelTask(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJAMRFixedPQModelTask(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JAMRFixedPQModelTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::JAMRFixedPQModelTask&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::JAMRFixedPQModelTask task;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBlankJAMRFixedPQModelTask(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, task);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::JAMRFixedPQModelTask&)> _response;
        };
        return begin_GetBlankJAMRFixedPQModelTask(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask()
    {
        return begin_GetBlankJAMRFixedPQModelTask(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankJAMRFixedPQModelTask(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJAMRFixedPQModelTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJAMRFixedPQModelTask(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::iBS::Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJAMRFixedPQModelTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJAMRFixedPQModelTask(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask& task, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankJAMRFixedPQModelTask(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, ::Ice::Long& taskID)
    {
        return RebuildJAMRFixedPQModel(task, taskID, 0);
    }
    ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RebuildJAMRFixedPQModel(task, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RebuildJAMRFixedPQModel(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RebuildJAMRFixedPQModel(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RebuildJAMRFixedPQModel(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RebuildJAMRFixedPQModel(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RebuildJAMRFixedPQModel(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RebuildJAMRFixedPQModel(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task)
    {
        return begin_RebuildJAMRFixedPQModel(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx)
    {
        return begin_RebuildJAMRFixedPQModel(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildJAMRFixedPQModel(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildJAMRFixedPQModel(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::iBS::Callback_JointAMRService_RebuildJAMRFixedPQModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildJAMRFixedPQModel(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask& task, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_RebuildJAMRFixedPQModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildJAMRFixedPQModel(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RebuildJAMRFixedPQModel(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task)
    {
        return GetBlankJEvalKnownAMRTask(task, 0);
    }
    ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx)
    {
        return GetBlankJEvalKnownAMRTask(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalKnownAMRTask(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalKnownAMRTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJEvalKnownAMRTask(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalKnownAMRTask(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJEvalKnownAMRTask(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalKnownAMRTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJEvalKnownAMRTask(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJEvalKnownAMRTask(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalKnownAMRTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::JEvalKnownAMRTask&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::JEvalKnownAMRTask task;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBlankJEvalKnownAMRTask(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, task);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::JEvalKnownAMRTask&)> _response;
        };
        return begin_GetBlankJEvalKnownAMRTask(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask()
    {
        return begin_GetBlankJEvalKnownAMRTask(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankJEvalKnownAMRTask(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalKnownAMRTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalKnownAMRTask(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::iBS::Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalKnownAMRTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalKnownAMRTask(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask& task, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankJEvalKnownAMRTask(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, ::Ice::Long& taskID)
    {
        return RunJEvalKnownAMR(task, taskID, 0);
    }
    ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RunJEvalKnownAMR(task, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunJEvalKnownAMR(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunJEvalKnownAMR(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunJEvalKnownAMR(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunJEvalKnownAMR(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RunJEvalKnownAMR(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RunJEvalKnownAMR(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task)
    {
        return begin_RunJEvalKnownAMR(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx)
    {
        return begin_RunJEvalKnownAMR(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalKnownAMR(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalKnownAMR(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::iBS::Callback_JointAMRService_RunJEvalKnownAMRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalKnownAMR(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask& task, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_RunJEvalKnownAMRPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalKnownAMR(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RunJEvalKnownAMR(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task)
    {
        return GetBlankJEvalSingleH0H1BiasTask(task, 0);
    }
    ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx)
    {
        return GetBlankJEvalSingleH0H1BiasTask(task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalSingleH0H1BiasTask(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJEvalSingleH0H1BiasTask(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalSingleH0H1BiasTask(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBlankJEvalSingleH0H1BiasTask(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::JEvalSingleH0H1BiasTask task;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetBlankJEvalSingleH0H1BiasTask(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, task);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&)> _response;
        };
        return begin_GetBlankJEvalSingleH0H1BiasTask(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask()
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context& __ctx)
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::iBS::Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBlankJEvalSingleH0H1BiasTask(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBlankJEvalSingleH0H1BiasTask(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, ::Ice::Long& taskID)
    {
        return RunJEvalH0H1Bias(task, taskID, 0);
    }
    ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RunJEvalH0H1Bias(task, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunJEvalH0H1Bias(task, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunJEvalH0H1Bias(task, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RunJEvalH0H1Bias(task, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RunJEvalH0H1Bias(task, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RunJEvalH0H1Bias(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RunJEvalH0H1Bias(task, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task)
    {
        return begin_RunJEvalH0H1Bias(task, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx)
    {
        return begin_RunJEvalH0H1Bias(task, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalH0H1Bias(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalH0H1Bias(task, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::iBS::Callback_JointAMRService_RunJEvalH0H1BiasPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalH0H1Bias(task, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask& task, const ::Ice::Context& __ctx, const ::iBS::Callback_JointAMRService_RunJEvalH0H1BiasPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RunJEvalH0H1Bias(task, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RunJEvalH0H1Bias(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_secure(bool __secure) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_twoway() const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_oneway() const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_batchOneway() const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_datagram() const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_batchDatagram() const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_compress(bool __compress) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<JointAMRService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<JointAMRService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iBS
{

class JointAMRService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int GetBlankAMRFinderTask(bool, ::iBS::AMRFinderTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace iBS
{

class JointAMRService : virtual public ::IceDelegate::iBS::JointAMRService,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int GetBlankAMRFinderTask(bool, ::iBS::AMRFinderTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace iBS
{

class JointAMRService : virtual public ::IceDelegate::iBS::JointAMRService,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int GetBlankAMRFinderTask(bool, ::iBS::AMRFinderTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunAMRFinder(const ::iBS::AMRFinderTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RebuildJAMRFixedPQModel(const ::iBS::JAMRFixedPQModelTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunJEvalKnownAMR(const ::iBS::JEvalKnownAMRTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RunJEvalH0H1Bias(const ::iBS::JEvalSingleH0H1BiasTask&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace iBS
{

class JointAMRService : virtual public ::Ice::Object
{
public:

    typedef JointAMRServicePrx ProxyType;
    typedef JointAMRServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int GetBlankAMRFinderTask(bool, ::iBS::AMRFinderTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankAMRFinderTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RunAMRFinder_async(const ::iBS::AMD_JointAMRService_RunAMRFinderPtr&, const ::iBS::AMRFinderTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RunAMRFinder(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetCpGSiteMap(const ::iBS::CpGSiteMapInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetCpGSiteMap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iBS::CpGSiteMapInfo GetBlankCpGSiteMapInfo(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankCpGSiteMapInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetCpGSites(const ::std::string&, ::Ice::Long, ::Ice::Long, bool, ::iBS::LongVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetCpGSites(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetCpGIdxs(const ::std::string&, const ::iBS::LongVec&, bool, ::iBS::LongVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetCpGIdxs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBlankJAMRFixedPQModelTask(::iBS::JAMRFixedPQModelTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankJAMRFixedPQModelTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RebuildJAMRFixedPQModel_async(const ::iBS::AMD_JointAMRService_RebuildJAMRFixedPQModelPtr&, const ::iBS::JAMRFixedPQModelTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RebuildJAMRFixedPQModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBlankJEvalKnownAMRTask(::iBS::JEvalKnownAMRTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankJEvalKnownAMRTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RunJEvalKnownAMR_async(const ::iBS::AMD_JointAMRService_RunJEvalKnownAMRPtr&, const ::iBS::JEvalKnownAMRTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RunJEvalKnownAMR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetBlankJEvalSingleH0H1BiasTask(::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBlankJEvalSingleH0H1BiasTask(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RunJEvalH0H1Bias_async(const ::iBS::AMD_JointAMRService_RunJEvalH0H1BiasPtr&, const ::iBS::JEvalSingleH0H1BiasTask&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RunJEvalH0H1Bias(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const JointAMRService& l, const JointAMRService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const JointAMRService& l, const JointAMRService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iBS
{

template<class T>
class CallbackNC_JointAMRService_GetBlankAMRFinderTask : public Callback_JointAMRService_GetBlankAMRFinderTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::AMRFinderTask&);

    CallbackNC_JointAMRService_GetBlankAMRFinderTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::AMRFinderTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankAMRFinderTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, task);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetBlankAMRFinderTaskPtr
newCallback_JointAMRService_GetBlankAMRFinderTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::AMRFinderTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankAMRFinderTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetBlankAMRFinderTaskPtr
newCallback_JointAMRService_GetBlankAMRFinderTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::AMRFinderTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankAMRFinderTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetBlankAMRFinderTask : public Callback_JointAMRService_GetBlankAMRFinderTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::AMRFinderTask&, const CT&);

    Callback_JointAMRService_GetBlankAMRFinderTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::AMRFinderTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankAMRFinderTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetBlankAMRFinderTaskPtr
newCallback_JointAMRService_GetBlankAMRFinderTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::AMRFinderTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankAMRFinderTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetBlankAMRFinderTaskPtr
newCallback_JointAMRService_GetBlankAMRFinderTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::AMRFinderTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankAMRFinderTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_RunAMRFinder : public Callback_JointAMRService_RunAMRFinder_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_JointAMRService_RunAMRFinder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunAMRFinder(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_RunAMRFinderPtr
newCallback_JointAMRService_RunAMRFinder(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunAMRFinder<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_RunAMRFinderPtr
newCallback_JointAMRService_RunAMRFinder(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunAMRFinder<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_RunAMRFinder : public Callback_JointAMRService_RunAMRFinder_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_JointAMRService_RunAMRFinder(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunAMRFinder(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_RunAMRFinderPtr
newCallback_JointAMRService_RunAMRFinder(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunAMRFinder<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_RunAMRFinderPtr
newCallback_JointAMRService_RunAMRFinder(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunAMRFinder<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_SetCpGSiteMap : public Callback_JointAMRService_SetCpGSiteMap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_JointAMRService_SetCpGSiteMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetCpGSiteMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_SetCpGSiteMapPtr
newCallback_JointAMRService_SetCpGSiteMap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_SetCpGSiteMap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_SetCpGSiteMapPtr
newCallback_JointAMRService_SetCpGSiteMap(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_SetCpGSiteMap<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_SetCpGSiteMap : public Callback_JointAMRService_SetCpGSiteMap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_JointAMRService_SetCpGSiteMap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetCpGSiteMap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_SetCpGSiteMapPtr
newCallback_JointAMRService_SetCpGSiteMap(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_SetCpGSiteMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_SetCpGSiteMapPtr
newCallback_JointAMRService_SetCpGSiteMap(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_SetCpGSiteMap<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetBlankCpGSiteMapInfo : public Callback_JointAMRService_GetBlankCpGSiteMapInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iBS::CpGSiteMapInfo&);

    CallbackNC_JointAMRService_GetBlankCpGSiteMapInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::CpGSiteMapInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankCpGSiteMapInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr
newCallback_JointAMRService_GetBlankCpGSiteMapInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::CpGSiteMapInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankCpGSiteMapInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr
newCallback_JointAMRService_GetBlankCpGSiteMapInfo(T* instance, void (T::*cb)(const ::iBS::CpGSiteMapInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankCpGSiteMapInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetBlankCpGSiteMapInfo : public Callback_JointAMRService_GetBlankCpGSiteMapInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iBS::CpGSiteMapInfo&, const CT&);

    Callback_JointAMRService_GetBlankCpGSiteMapInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::CpGSiteMapInfo __ret;
        try
        {
            __ret = __proxy->end_GetBlankCpGSiteMapInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr
newCallback_JointAMRService_GetBlankCpGSiteMapInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::CpGSiteMapInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankCpGSiteMapInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetBlankCpGSiteMapInfoPtr
newCallback_JointAMRService_GetBlankCpGSiteMapInfo(T* instance, void (T::*cb)(const ::iBS::CpGSiteMapInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankCpGSiteMapInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetCpGSites : public Callback_JointAMRService_GetCpGSites_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&);

    CallbackNC_JointAMRService_GetCpGSites(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec cpgBpIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCpGSites(cpgBpIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, cpgBpIdxs);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetCpGSitesPtr
newCallback_JointAMRService_GetCpGSites(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetCpGSites<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetCpGSitesPtr
newCallback_JointAMRService_GetCpGSites(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetCpGSites<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetCpGSites : public Callback_JointAMRService_GetCpGSites_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const CT&);

    Callback_JointAMRService_GetCpGSites(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec cpgBpIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCpGSites(cpgBpIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, cpgBpIdxs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetCpGSitesPtr
newCallback_JointAMRService_GetCpGSites(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetCpGSites<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetCpGSitesPtr
newCallback_JointAMRService_GetCpGSites(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetCpGSites<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetCpGIdxs : public Callback_JointAMRService_GetCpGIdxs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&);

    CallbackNC_JointAMRService_GetCpGIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec cpgIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCpGIdxs(cpgIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, cpgIdxs);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetCpGIdxsPtr
newCallback_JointAMRService_GetCpGIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetCpGIdxs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetCpGIdxsPtr
newCallback_JointAMRService_GetCpGIdxs(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetCpGIdxs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetCpGIdxs : public Callback_JointAMRService_GetCpGIdxs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::LongVec&, const CT&);

    Callback_JointAMRService_GetCpGIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::LongVec cpgIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCpGIdxs(cpgIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, cpgIdxs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetCpGIdxsPtr
newCallback_JointAMRService_GetCpGIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetCpGIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetCpGIdxsPtr
newCallback_JointAMRService_GetCpGIdxs(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::LongVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetCpGIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetBlankJAMRFixedPQModelTask : public Callback_JointAMRService_GetBlankJAMRFixedPQModelTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&);

    CallbackNC_JointAMRService_GetBlankJAMRFixedPQModelTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JAMRFixedPQModelTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJAMRFixedPQModelTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, task);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr
newCallback_JointAMRService_GetBlankJAMRFixedPQModelTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJAMRFixedPQModelTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr
newCallback_JointAMRService_GetBlankJAMRFixedPQModelTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJAMRFixedPQModelTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetBlankJAMRFixedPQModelTask : public Callback_JointAMRService_GetBlankJAMRFixedPQModelTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&, const CT&);

    Callback_JointAMRService_GetBlankJAMRFixedPQModelTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JAMRFixedPQModelTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJAMRFixedPQModelTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr
newCallback_JointAMRService_GetBlankJAMRFixedPQModelTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJAMRFixedPQModelTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetBlankJAMRFixedPQModelTaskPtr
newCallback_JointAMRService_GetBlankJAMRFixedPQModelTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JAMRFixedPQModelTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJAMRFixedPQModelTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_RebuildJAMRFixedPQModel : public Callback_JointAMRService_RebuildJAMRFixedPQModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_JointAMRService_RebuildJAMRFixedPQModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RebuildJAMRFixedPQModel(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_RebuildJAMRFixedPQModelPtr
newCallback_JointAMRService_RebuildJAMRFixedPQModel(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RebuildJAMRFixedPQModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_RebuildJAMRFixedPQModelPtr
newCallback_JointAMRService_RebuildJAMRFixedPQModel(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RebuildJAMRFixedPQModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_RebuildJAMRFixedPQModel : public Callback_JointAMRService_RebuildJAMRFixedPQModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_JointAMRService_RebuildJAMRFixedPQModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RebuildJAMRFixedPQModel(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_RebuildJAMRFixedPQModelPtr
newCallback_JointAMRService_RebuildJAMRFixedPQModel(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RebuildJAMRFixedPQModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_RebuildJAMRFixedPQModelPtr
newCallback_JointAMRService_RebuildJAMRFixedPQModel(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RebuildJAMRFixedPQModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetBlankJEvalKnownAMRTask : public Callback_JointAMRService_GetBlankJEvalKnownAMRTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&);

    CallbackNC_JointAMRService_GetBlankJEvalKnownAMRTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JEvalKnownAMRTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJEvalKnownAMRTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, task);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr
newCallback_JointAMRService_GetBlankJEvalKnownAMRTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJEvalKnownAMRTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr
newCallback_JointAMRService_GetBlankJEvalKnownAMRTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJEvalKnownAMRTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetBlankJEvalKnownAMRTask : public Callback_JointAMRService_GetBlankJEvalKnownAMRTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&, const CT&);

    Callback_JointAMRService_GetBlankJEvalKnownAMRTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JEvalKnownAMRTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJEvalKnownAMRTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr
newCallback_JointAMRService_GetBlankJEvalKnownAMRTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJEvalKnownAMRTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetBlankJEvalKnownAMRTaskPtr
newCallback_JointAMRService_GetBlankJEvalKnownAMRTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalKnownAMRTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJEvalKnownAMRTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_RunJEvalKnownAMR : public Callback_JointAMRService_RunJEvalKnownAMR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_JointAMRService_RunJEvalKnownAMR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunJEvalKnownAMR(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_RunJEvalKnownAMRPtr
newCallback_JointAMRService_RunJEvalKnownAMR(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunJEvalKnownAMR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_RunJEvalKnownAMRPtr
newCallback_JointAMRService_RunJEvalKnownAMR(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunJEvalKnownAMR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_RunJEvalKnownAMR : public Callback_JointAMRService_RunJEvalKnownAMR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_JointAMRService_RunJEvalKnownAMR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunJEvalKnownAMR(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_RunJEvalKnownAMRPtr
newCallback_JointAMRService_RunJEvalKnownAMR(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunJEvalKnownAMR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_RunJEvalKnownAMRPtr
newCallback_JointAMRService_RunJEvalKnownAMR(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunJEvalKnownAMR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_GetBlankJEvalSingleH0H1BiasTask : public Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&);

    CallbackNC_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JEvalSingleH0H1BiasTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJEvalSingleH0H1BiasTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, task);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr
newCallback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJEvalSingleH0H1BiasTask<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr
newCallback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_GetBlankJEvalSingleH0H1BiasTask<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask : public Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&, const CT&);

    Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::JEvalSingleH0H1BiasTask task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetBlankJEvalSingleH0H1BiasTask(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr
newCallback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTaskPtr
newCallback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::JEvalSingleH0H1BiasTask&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_GetBlankJEvalSingleH0H1BiasTask<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_JointAMRService_RunJEvalH0H1Bias : public Callback_JointAMRService_RunJEvalH0H1Bias_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_JointAMRService_RunJEvalH0H1Bias(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunJEvalH0H1Bias(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_JointAMRService_RunJEvalH0H1BiasPtr
newCallback_JointAMRService_RunJEvalH0H1Bias(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunJEvalH0H1Bias<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_JointAMRService_RunJEvalH0H1BiasPtr
newCallback_JointAMRService_RunJEvalH0H1Bias(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_JointAMRService_RunJEvalH0H1Bias<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_JointAMRService_RunJEvalH0H1Bias : public Callback_JointAMRService_RunJEvalH0H1Bias_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_JointAMRService_RunJEvalH0H1Bias(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::JointAMRServicePrx __proxy = ::iBS::JointAMRServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RunJEvalH0H1Bias(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_JointAMRService_RunJEvalH0H1BiasPtr
newCallback_JointAMRService_RunJEvalH0H1Bias(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunJEvalH0H1Bias<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_JointAMRService_RunJEvalH0H1BiasPtr
newCallback_JointAMRService_RunJEvalH0H1Bias(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_JointAMRService_RunJEvalH0H1Bias<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
