// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SampleService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <SampleService.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __iBS__SeqSampleService__CreateBamToBinCountSamples_name = "CreateBamToBinCountSamples";

const ::std::string __iBS__SeqSampleService__GetBlankBamToBinCountSample_name = "GetBlankBamToBinCountSample";

const ::std::string __iBS__SeqSampleService__GetRefDataFromBamFile_name = "GetRefDataFromBamFile";

const ::std::string __iBS__SeqSampleService__GetRefBinRanges_name = "GetRefBinRanges";

const ::std::string __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name = "GetBlankBamToBinCountInfo";

const ::std::string __iBS__SeqSampleService__GetHighCountBins_name = "GetHighCountBins";

const ::std::string __iBS__SeqSampleService__GetBasePairCountsInBins_name = "GetBasePairCountsInBins";

}

namespace Ice
{
}

IceAsync::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples::AMD_SeqSampleService_CreateBamToBinCountSamples(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples::ice_response(::Ice::Int __ret, const ::iBS::IntVec& sampleIDs, ::Ice::Long taskID)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(sampleIDs);
            __os->write(taskID);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::iBS::AMD_SeqSampleService_GetHighCountBins::AMD_SeqSampleService_GetHighCountBins(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_SeqSampleService_GetHighCountBins::ice_response(::Ice::Int __ret, const ::iBS::LongVec& binIdxs, const ::iBS::LongVec& binCounts)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(binIdxs);
            __os->write(binCounts);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_SeqSampleService_GetHighCountBins::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}

IceAsync::iBS::AMD_SeqSampleService_GetBasePairCountsInBins::AMD_SeqSampleService_GetBasePairCountsInBins(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::iBS::AMD_SeqSampleService_GetBasePairCountsInBins::ice_response(::Ice::Int __ret, const ::iBS::IntVecVec& bpcounts)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(bpcounts);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::iBS::AMD_SeqSampleService_GetBasePairCountsInBins::ice_exception(const ::std::exception& ex)
{
    if(const ::iBS::ArgumentException* __ex = dynamic_cast<const ::iBS::ArgumentException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
::IceProxy::Ice::Object* ::IceProxy::iBS::upCast(::IceProxy::iBS::SeqSampleService* p) { return p; }

void
::IceProxy::iBS::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::iBS::SeqSampleService>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::iBS::SeqSampleService;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::iBS::SeqSampleService::CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, ::iBS::IntVec& sampleIDs, ::Ice::Long& taskID, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__CreateBamToBinCountSamples_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__CreateBamToBinCountSamples_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->CreateBamToBinCountSamples(samples, sampleIDs, taskID, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__CreateBamToBinCountSamples_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__CreateBamToBinCountSamples_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__CreateBamToBinCountSamples_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(samples);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::SeqSampleService::end_CreateBamToBinCountSamples(::iBS::IntVec& sampleIDs, ::Ice::Long& taskID, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__CreateBamToBinCountSamples_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(sampleIDs);
        __is->read(taskID);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::iBS::BamToBinCountSampleInfo
IceProxy::iBS::SeqSampleService::GetBlankBamToBinCountSample(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetBlankBamToBinCountSample_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetBlankBamToBinCountSample_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetBlankBamToBinCountSample(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetBlankBamToBinCountSample(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetBlankBamToBinCountSample_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetBlankBamToBinCountSample_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetBlankBamToBinCountSample_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::iBS::BamToBinCountSampleInfo
IceProxy::iBS::SeqSampleService::end_GetBlankBamToBinCountSample(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetBlankBamToBinCountSample_name);
    ::iBS::BamToBinCountSampleInfo __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::SeqSampleService::GetRefDataFromBamFile(const ::std::string& bamFile, ::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetRefDataFromBamFile_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetRefDataFromBamFile_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetRefDataFromBamFile(bamFile, refNames, refLengths, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetRefDataFromBamFile(const ::std::string& bamFile, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetRefDataFromBamFile_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetRefDataFromBamFile_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetRefDataFromBamFile_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bamFile);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::SeqSampleService::end_GetRefDataFromBamFile(::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetRefDataFromBamFile_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(refNames);
        __is->read(refLengths);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::SeqSampleService::GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, ::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetRefBinRanges_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetRefBinRanges_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetRefBinRanges(bbci, refBinFroms, refBinTos, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetRefBinRanges_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetRefBinRanges_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetRefBinRanges_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::SeqSampleService::end_GetRefBinRanges(::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetRefBinRanges_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(refBinFroms);
        __is->read(refBinTos);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::iBS::BamToBinCountInfo
IceProxy::iBS::SeqSampleService::GetBlankBamToBinCountInfo(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetBlankBamToBinCountInfo_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetBlankBamToBinCountInfo(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetBlankBamToBinCountInfo(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetBlankBamToBinCountInfo_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetBlankBamToBinCountInfo_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::iBS::BamToBinCountInfo
IceProxy::iBS::SeqSampleService::end_GetBlankBamToBinCountInfo(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name);
    ::iBS::BamToBinCountInfo __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::SeqSampleService::GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, ::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetHighCountBins_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetHighCountBins_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetHighCountBins(bbci, cutoff, binIdxs, binCounts, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetHighCountBins_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetHighCountBins_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetHighCountBins_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __os->write(cutoff);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::SeqSampleService::end_GetHighCountBins(::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetHighCountBins_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(binIdxs);
        __is->read(binCounts);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::iBS::SeqSampleService::GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, ::iBS::IntVecVec& bpcounts, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __iBS__SeqSampleService__GetBasePairCountsInBins_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__iBS__SeqSampleService__GetBasePairCountsInBins_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::iBS::SeqSampleService* __del = dynamic_cast< ::IceDelegate::iBS::SeqSampleService*>(__delBase.get());
            return __del->GetBasePairCountsInBins(bbci, binIdxs, bpcounts, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::iBS::SeqSampleService::begin_GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__iBS__SeqSampleService__GetBasePairCountsInBins_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __iBS__SeqSampleService__GetBasePairCountsInBins_name, __del, __cookie);
    try
    {
        __result->__prepare(__iBS__SeqSampleService__GetBasePairCountsInBins_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __os->write(binIdxs);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::iBS::SeqSampleService::end_GetBasePairCountsInBins(::iBS::IntVecVec& bpcounts, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __iBS__SeqSampleService__GetBasePairCountsInBins_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(bpcounts);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::iBS::SeqSampleService::ice_staticId()
{
    return ::iBS::SeqSampleService::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::iBS::SeqSampleService::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::iBS::SeqSampleService);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::iBS::SeqSampleService::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::iBS::SeqSampleService);
}

::IceProxy::Ice::Object*
IceProxy::iBS::SeqSampleService::__newInstance() const
{
    return new SeqSampleService;
}

::Ice::Int
IceDelegateM::iBS::SeqSampleService::CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec& samples, ::iBS::IntVec& sampleIDs, ::Ice::Long& taskID, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__CreateBamToBinCountSamples_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(samples);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(sampleIDs);
        __is->read(taskID);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::iBS::BamToBinCountSampleInfo
IceDelegateM::iBS::SeqSampleService::GetBlankBamToBinCountSample(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetBlankBamToBinCountSample_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::iBS::BamToBinCountSampleInfo __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::SeqSampleService::GetRefDataFromBamFile(const ::std::string& bamFile, ::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetRefDataFromBamFile_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bamFile);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(refNames);
        __is->read(refLengths);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::SeqSampleService::GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, ::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetRefBinRanges_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(refBinFroms);
        __is->read(refBinTos);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::iBS::BamToBinCountInfo
IceDelegateM::iBS::SeqSampleService::GetBlankBamToBinCountInfo(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::iBS::BamToBinCountInfo __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::SeqSampleService::GetHighCountBins(const ::iBS::BamToBinCountInfo& bbci, ::Ice::Int cutoff, ::iBS::LongVec& binIdxs, ::iBS::LongVec& binCounts, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetHighCountBins_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __os->write(cutoff);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(binIdxs);
        __is->read(binCounts);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::iBS::SeqSampleService::GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo& bbci, const ::iBS::LongVec& binIdxs, ::iBS::IntVecVec& bpcounts, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __iBS__SeqSampleService__GetBasePairCountsInBins_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(bbci);
        __os->write(binIdxs);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::iBS::ArgumentException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(bpcounts);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::iBS::SeqSampleService::CreateBamToBinCountSamples(const ::iBS::BamToBinCountSampleInfoVec&, ::iBS::IntVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::iBS::BamToBinCountSampleInfo
IceDelegateD::iBS::SeqSampleService::GetBlankBamToBinCountSample(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::iBS::BamToBinCountSampleInfo& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::SeqSampleService* servant = dynamic_cast< ::iBS::SeqSampleService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankBamToBinCountSample(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::iBS::BamToBinCountSampleInfo& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__SeqSampleService__GetBlankBamToBinCountSample_name, ::Ice::Normal, __context);
    ::iBS::BamToBinCountSampleInfo __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::SeqSampleService::GetRefDataFromBamFile(const ::std::string& bamFile, ::iBS::StringVec& refNames, ::iBS::LongVec& refLengths, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_bamFile, ::iBS::StringVec& __p_refNames, ::iBS::LongVec& __p_refLengths, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_bamFile(__p_bamFile),
            _m_refNames(__p_refNames),
            _m_refLengths(__p_refLengths)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::SeqSampleService* servant = dynamic_cast< ::iBS::SeqSampleService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetRefDataFromBamFile(_m_bamFile, _m_refNames, _m_refLengths, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_bamFile;
        ::iBS::StringVec& _m_refNames;
        ::iBS::LongVec& _m_refLengths;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__SeqSampleService__GetRefDataFromBamFile_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, bamFile, refNames, refLengths, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::SeqSampleService::GetRefBinRanges(const ::iBS::BamToBinCountInfo& bbci, ::iBS::LongVec& refBinFroms, ::iBS::LongVec& refBinTos, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::iBS::BamToBinCountInfo& __p_bbci, ::iBS::LongVec& __p_refBinFroms, ::iBS::LongVec& __p_refBinTos, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_bbci(__p_bbci),
            _m_refBinFroms(__p_refBinFroms),
            _m_refBinTos(__p_refBinTos)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::SeqSampleService* servant = dynamic_cast< ::iBS::SeqSampleService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetRefBinRanges(_m_bbci, _m_refBinFroms, _m_refBinTos, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::iBS::BamToBinCountInfo& _m_bbci;
        ::iBS::LongVec& _m_refBinFroms;
        ::iBS::LongVec& _m_refBinTos;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__SeqSampleService__GetRefBinRanges_name, ::Ice::Normal, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, bbci, refBinFroms, refBinTos, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::iBS::BamToBinCountInfo
IceDelegateD::iBS::SeqSampleService::GetBlankBamToBinCountInfo(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::iBS::BamToBinCountInfo& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::iBS::SeqSampleService* servant = dynamic_cast< ::iBS::SeqSampleService*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->GetBlankBamToBinCountInfo(_current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::iBS::BamToBinCountInfo& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __iBS__SeqSampleService__GetBlankBamToBinCountInfo_name, ::Ice::Normal, __context);
    ::iBS::BamToBinCountInfo __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::iBS::ArgumentException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::iBS::SeqSampleService::GetHighCountBins(const ::iBS::BamToBinCountInfo&, ::Ice::Int, ::iBS::LongVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Int
IceDelegateD::iBS::SeqSampleService::GetBasePairCountsInBins(const ::iBS::BamToBinCountInfo&, const ::iBS::LongVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::Int(); // to avoid a warning with some compilers;
}

::Ice::Object* iBS::upCast(::iBS::SeqSampleService* p) { return p; }

namespace
{
const ::std::string __iBS__SeqSampleService_ids[2] =
{
    "::Ice::Object",
    "::iBS::SeqSampleService"
};

}

bool
iBS::SeqSampleService::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__iBS__SeqSampleService_ids, __iBS__SeqSampleService_ids + 2, _s);
}

::std::vector< ::std::string>
iBS::SeqSampleService::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__iBS__SeqSampleService_ids[0], &__iBS__SeqSampleService_ids[2]);
}

const ::std::string&
iBS::SeqSampleService::ice_id(const ::Ice::Current&) const
{
    return __iBS__SeqSampleService_ids[1];
}

const ::std::string&
iBS::SeqSampleService::ice_staticId()
{
    return __iBS__SeqSampleService_ids[1];
}

::Ice::DispatchStatus
iBS::SeqSampleService::___CreateBamToBinCountSamples(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::BamToBinCountSampleInfoVec samples;
    __is->read(samples);
    __inS.endReadParams();
    ::iBS::AMD_SeqSampleService_CreateBamToBinCountSamplesPtr __cb = new IceAsync::iBS::AMD_SeqSampleService_CreateBamToBinCountSamples(__inS);
    try
    {
        CreateBamToBinCountSamples_async(__cb, samples, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetBlankBamToBinCountSample(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::iBS::BamToBinCountSampleInfo __ret = GetBlankBamToBinCountSample(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetRefDataFromBamFile(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string bamFile;
    __is->read(bamFile);
    __inS.endReadParams();
    ::iBS::StringVec refNames;
    ::iBS::LongVec refLengths;
    try
    {
        ::Ice::Int __ret = GetRefDataFromBamFile(bamFile, refNames, refLengths, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(refNames);
        __os->write(refLengths);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetRefBinRanges(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::BamToBinCountInfo bbci;
    __is->read(bbci);
    __inS.endReadParams();
    ::iBS::LongVec refBinFroms;
    ::iBS::LongVec refBinTos;
    try
    {
        ::Ice::Int __ret = GetRefBinRanges(bbci, refBinFroms, refBinTos, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(refBinFroms);
        __os->write(refBinTos);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetBlankBamToBinCountInfo(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    try
    {
        ::iBS::BamToBinCountInfo __ret = GetBlankBamToBinCountInfo(__current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::iBS::ArgumentException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetHighCountBins(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::BamToBinCountInfo bbci;
    ::Ice::Int cutoff;
    __is->read(bbci);
    __is->read(cutoff);
    __inS.endReadParams();
    ::iBS::AMD_SeqSampleService_GetHighCountBinsPtr __cb = new IceAsync::iBS::AMD_SeqSampleService_GetHighCountBins(__inS);
    try
    {
        GetHighCountBins_async(__cb, bbci, cutoff, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
iBS::SeqSampleService::___GetBasePairCountsInBins(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::iBS::BamToBinCountInfo bbci;
    ::iBS::LongVec binIdxs;
    __is->read(bbci);
    __is->read(binIdxs);
    __inS.endReadParams();
    ::iBS::AMD_SeqSampleService_GetBasePairCountsInBinsPtr __cb = new IceAsync::iBS::AMD_SeqSampleService_GetBasePairCountsInBins(__inS);
    try
    {
        GetBasePairCountsInBins_async(__cb, bbci, binIdxs, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __iBS__SeqSampleService_all[] =
{
    "CreateBamToBinCountSamples",
    "GetBasePairCountsInBins",
    "GetBlankBamToBinCountInfo",
    "GetBlankBamToBinCountSample",
    "GetHighCountBins",
    "GetRefBinRanges",
    "GetRefDataFromBamFile",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
iBS::SeqSampleService::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__iBS__SeqSampleService_all, __iBS__SeqSampleService_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __iBS__SeqSampleService_all)
    {
        case 0:
        {
            return ___CreateBamToBinCountSamples(in, current);
        }
        case 1:
        {
            return ___GetBasePairCountsInBins(in, current);
        }
        case 2:
        {
            return ___GetBlankBamToBinCountInfo(in, current);
        }
        case 3:
        {
            return ___GetBlankBamToBinCountSample(in, current);
        }
        case 4:
        {
            return ___GetHighCountBins(in, current);
        }
        case 5:
        {
            return ___GetRefBinRanges(in, current);
        }
        case 6:
        {
            return ___GetRefDataFromBamFile(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
iBS::SeqSampleService::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
iBS::SeqSampleService::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
iBS::__patch(SeqSampleServicePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::iBS::SeqSampleServicePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::iBS::SeqSampleService::ice_staticId(), v);
    }
}
