// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `BasicSliceDefine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __BasicSliceDefine_h__
#define __BasicSliceDefine_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace iBS
{

typedef ::std::vector< ::Ice::Float> FloatVec;

typedef ::std::vector< ::Ice::Int> IntVec;

typedef ::std::vector< ::std::string> StringVec;

typedef ::std::vector< ::Ice::Double> DoubleVec;

typedef ::std::vector< ::Ice::Byte> ByteVec;

typedef ::std::vector<bool> BoolVec;

typedef ::std::vector< ::Ice::Long> LongVec;

typedef ::std::vector< ::iBS::IntVec> IntVecVec;

typedef ::std::vector< ::iBS::StringVec> StringVecVec;

typedef ::std::vector< ::iBS::FloatVec> FloatVecVec;

typedef ::std::vector< ::iBS::DoubleVec> DoubleVecVec;

typedef ::std::vector< ::iBS::ByteVec> ByteVecVec;

typedef ::std::vector< ::iBS::LongVec> LongVecVec;

typedef ::std::vector< ::iBS::IntVecVec> IntVecVecVec;

typedef ::std::vector< ::iBS::FloatVecVec> FloatVecVecVec;

typedef ::std::vector< ::iBS::DoubleVecVec> DoubleVecVecVec;

typedef ::std::vector< ::iBS::ByteVecVec> ByteVecVecVec;

typedef ::std::vector< ::iBS::StringVecVec> StringVecVecVec;

enum AMDTaskStatusEnum
{
    AMDTaskStatusNormal = 0,
    AMDTaskStatusFinished = 1,
    AMDTaskStatusFailure = 2,
    AMDTaskStatusNotExist = 3
};

struct AMDTaskInfo
{
    ::Ice::Long TaskID;
    ::std::string TaskName;
    ::Ice::Long TotalCnt;
    ::Ice::Long FinishedCnt;
    ::iBS::AMDTaskStatusEnum Status;

    bool operator==(const AMDTaskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(TaskID != __rhs.TaskID)
        {
            return false;
        }
        if(TaskName != __rhs.TaskName)
        {
            return false;
        }
        if(TotalCnt != __rhs.TotalCnt)
        {
            return false;
        }
        if(FinishedCnt != __rhs.FinishedCnt)
        {
            return false;
        }
        if(Status != __rhs.Status)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AMDTaskInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(TaskID < __rhs.TaskID)
        {
            return true;
        }
        else if(__rhs.TaskID < TaskID)
        {
            return false;
        }
        if(TaskName < __rhs.TaskName)
        {
            return true;
        }
        else if(__rhs.TaskName < TaskName)
        {
            return false;
        }
        if(TotalCnt < __rhs.TotalCnt)
        {
            return true;
        }
        else if(__rhs.TotalCnt < TotalCnt)
        {
            return false;
        }
        if(FinishedCnt < __rhs.FinishedCnt)
        {
            return true;
        }
        else if(__rhs.FinishedCnt < FinishedCnt)
        {
            return false;
        }
        if(Status < __rhs.Status)
        {
            return true;
        }
        else if(__rhs.Status < Status)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AMDTaskInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AMDTaskInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AMDTaskInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AMDTaskInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

enum KNIMEDataType
{
    DataTypeInt,
    DataTypeDouble,
    DataTypeString,
    DataTypeByteVec,
    DataTypeIntList,
    DataTypeDoubleList,
    DataTypeStringList
};

struct KNIMEDataColumnInfo
{
    ::iBS::KNIMEDataType DataType;
    ::std::string ColumnName;
    ::Ice::Int IdxInAllColumn;
    ::Ice::Int IdxInSameTypeColumn;
    bool IsDateTime;

    bool operator==(const KNIMEDataColumnInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(DataType != __rhs.DataType)
        {
            return false;
        }
        if(ColumnName != __rhs.ColumnName)
        {
            return false;
        }
        if(IdxInAllColumn != __rhs.IdxInAllColumn)
        {
            return false;
        }
        if(IdxInSameTypeColumn != __rhs.IdxInSameTypeColumn)
        {
            return false;
        }
        if(IsDateTime != __rhs.IsDateTime)
        {
            return false;
        }
        return true;
    }

    bool operator<(const KNIMEDataColumnInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(DataType < __rhs.DataType)
        {
            return true;
        }
        else if(__rhs.DataType < DataType)
        {
            return false;
        }
        if(ColumnName < __rhs.ColumnName)
        {
            return true;
        }
        else if(__rhs.ColumnName < ColumnName)
        {
            return false;
        }
        if(IdxInAllColumn < __rhs.IdxInAllColumn)
        {
            return true;
        }
        else if(__rhs.IdxInAllColumn < IdxInAllColumn)
        {
            return false;
        }
        if(IdxInSameTypeColumn < __rhs.IdxInSameTypeColumn)
        {
            return true;
        }
        else if(__rhs.IdxInSameTypeColumn < IdxInSameTypeColumn)
        {
            return false;
        }
        if(IsDateTime < __rhs.IsDateTime)
        {
            return true;
        }
        else if(__rhs.IsDateTime < IsDateTime)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const KNIMEDataColumnInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const KNIMEDataColumnInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const KNIMEDataColumnInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const KNIMEDataColumnInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::KNIMEDataColumnInfo> KNIMEDataColumnInfoVec;

struct KNIMEDataTable
{
    ::Ice::Int tableID;
    ::std::string tableName;
    ::iBS::KNIMEDataColumnInfoVec columns;
    ::iBS::IntVecVec intColumnData;
    ::iBS::DoubleVecVec doubleColumnData;
    ::iBS::StringVecVec strColumnData;
    ::iBS::ByteVecVecVec bytesColumnData;
    ::iBS::IntVecVecVec intListColumnData;
    ::iBS::StringVecVecVec strListColumnData;
    ::iBS::DoubleVecVecVec doubleListColumnData;
};

typedef ::std::vector< ::iBS::KNIMEDataTable> KNIMEDataTableVec;

typedef ::std::map< ::std::string, ::std::string> Str2StrMap;

struct IntPair
{
    ::Ice::Int int1;
    ::Ice::Int int2;

    bool operator==(const IntPair& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(int1 != __rhs.int1)
        {
            return false;
        }
        if(int2 != __rhs.int2)
        {
            return false;
        }
        return true;
    }

    bool operator<(const IntPair& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(int1 < __rhs.int1)
        {
            return true;
        }
        else if(__rhs.int1 < int1)
        {
            return false;
        }
        if(int2 < __rhs.int2)
        {
            return true;
        }
        else if(__rhs.int2 < int2)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const IntPair& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const IntPair& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const IntPair& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const IntPair& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::IntPair> IntPairVec;

enum RecordUpdateAction
{
    RecordActionUnkown,
    RecordActionDelete,
    RecordActionInsert,
    RecordActionUpdate
};

struct IntFloat
{
    ::Ice::Int ival;
    ::Ice::Float fval;
};

typedef ::std::vector< ::iBS::IntFloat> IntFloatVec;

typedef ::std::vector< ::iBS::IntFloatVec> IntFloatVecVec;

class ArgumentException : public ::Ice::UserException
{
public:

    ArgumentException() {}
    explicit ArgumentException(const ::std::string&);
    virtual ~ArgumentException() throw();

    virtual ::std::string ice_name() const;
    virtual ArgumentException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string reason;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static ArgumentException __ArgumentException_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::iBS::AMDTaskStatusEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::AMDTaskInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 26;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::AMDTaskInfo, S>
{
    static void write(S* __os, const ::iBS::AMDTaskInfo& v)
    {
        __os->write(v.TaskID);
        __os->write(v.TaskName);
        __os->write(v.TotalCnt);
        __os->write(v.FinishedCnt);
        __os->write(v.Status);
    }
};

template<class S>
struct StreamReader< ::iBS::AMDTaskInfo, S>
{
    static void read(S* __is, ::iBS::AMDTaskInfo& v)
    {
        __is->read(v.TaskID);
        __is->read(v.TaskName);
        __is->read(v.TotalCnt);
        __is->read(v.FinishedCnt);
        __is->read(v.Status);
    }
};

template<>
struct StreamableTraits< ::iBS::KNIMEDataType>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 6;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::KNIMEDataColumnInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::KNIMEDataColumnInfo, S>
{
    static void write(S* __os, const ::iBS::KNIMEDataColumnInfo& v)
    {
        __os->write(v.DataType);
        __os->write(v.ColumnName);
        __os->write(v.IdxInAllColumn);
        __os->write(v.IdxInSameTypeColumn);
        __os->write(v.IsDateTime);
    }
};

template<class S>
struct StreamReader< ::iBS::KNIMEDataColumnInfo, S>
{
    static void read(S* __is, ::iBS::KNIMEDataColumnInfo& v)
    {
        __is->read(v.DataType);
        __is->read(v.ColumnName);
        __is->read(v.IdxInAllColumn);
        __is->read(v.IdxInSameTypeColumn);
        __is->read(v.IsDateTime);
    }
};

template<>
struct StreamableTraits< ::iBS::KNIMEDataTable>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::KNIMEDataTable, S>
{
    static void write(S* __os, const ::iBS::KNIMEDataTable& v)
    {
        __os->write(v.tableID);
        __os->write(v.tableName);
        __os->write(v.columns);
        __os->write(v.intColumnData);
        __os->write(v.doubleColumnData);
        __os->write(v.strColumnData);
        __os->write(v.bytesColumnData);
        __os->write(v.intListColumnData);
        __os->write(v.strListColumnData);
        __os->write(v.doubleListColumnData);
    }
};

template<class S>
struct StreamReader< ::iBS::KNIMEDataTable, S>
{
    static void read(S* __is, ::iBS::KNIMEDataTable& v)
    {
        __is->read(v.tableID);
        __is->read(v.tableName);
        __is->read(v.columns);
        __is->read(v.intColumnData);
        __is->read(v.doubleColumnData);
        __is->read(v.strColumnData);
        __is->read(v.bytesColumnData);
        __is->read(v.intListColumnData);
        __is->read(v.strListColumnData);
        __is->read(v.doubleListColumnData);
    }
};

template<>
struct StreamableTraits< ::iBS::IntPair>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::iBS::IntPair, S>
{
    static void write(S* __os, const ::iBS::IntPair& v)
    {
        __os->write(v.int1);
        __os->write(v.int2);
    }
};

template<class S>
struct StreamReader< ::iBS::IntPair, S>
{
    static void read(S* __is, ::iBS::IntPair& v)
    {
        __is->read(v.int1);
        __is->read(v.int2);
    }
};

template<>
struct StreamableTraits< ::iBS::RecordUpdateAction>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::IntFloat>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 8;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::iBS::IntFloat, S>
{
    static void write(S* __os, const ::iBS::IntFloat& v)
    {
        __os->write(v.ival);
        __os->write(v.fval);
    }
};

template<class S>
struct StreamReader< ::iBS::IntFloat, S>
{
    static void read(S* __is, ::iBS::IntFloat& v)
    {
        __is->read(v.ival);
        __is->read(v.fval);
    }
};

template<>
struct StreamableTraits< ::iBS::ArgumentException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

#endif
