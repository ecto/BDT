// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `BasicSliceDefine.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <BasicSliceDefine.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/LocalException.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const char* __iBS__ArgumentException_name = "iBS::ArgumentException";

struct __F__iBS__ArgumentException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::iBS::ArgumentException();
    }
};

class __F__iBS__ArgumentException__Init
{
public:

    __F__iBS__ArgumentException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::iBS::ArgumentException", new __F__iBS__ArgumentException);
    }

    ~__F__iBS__ArgumentException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::iBS::ArgumentException");
    }
};

const __F__iBS__ArgumentException__Init __F__iBS__ArgumentException__i;

}

iBS::ArgumentException::ArgumentException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

iBS::ArgumentException::~ArgumentException() throw()
{
}

::std::string
iBS::ArgumentException::ice_name() const
{
    return __iBS__ArgumentException_name;
}

iBS::ArgumentException*
iBS::ArgumentException::ice_clone() const
{
    return new ArgumentException(*this);
}

void
iBS::ArgumentException::ice_throw() const
{
    throw *this;
}

void
iBS::ArgumentException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::iBS::ArgumentException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
iBS::ArgumentException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
