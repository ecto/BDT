// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FCDCentralService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __FCDCentralService_h__
#define __FCDCentralService_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <BasicSliceDefine.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace iBS
{

class ProxyCentralService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::ProxyCentralService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::ProxyCentralService*);

class FcdcReadService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcReadService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::FcdcReadService*);

class FcdcReadWriteService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcReadWriteService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::FcdcReadWriteService*);

class FcdcAdminService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcAdminService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::FcdcAdminService*);

class FcdcRUVService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcRUVService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::FcdcRUVService*);

class BigMatrixService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::BigMatrixService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::BigMatrixService*);

class FcdcFacetAdminService;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcFacetAdminService>&);
::IceProxy::Ice::Object* upCast(::IceProxy::iBS::FcdcFacetAdminService*);

}

}

namespace iBS
{

class ProxyCentralService;
bool operator==(const ProxyCentralService&, const ProxyCentralService&);
bool operator<(const ProxyCentralService&, const ProxyCentralService&);
::Ice::Object* upCast(::iBS::ProxyCentralService*);
typedef ::IceInternal::Handle< ::iBS::ProxyCentralService> ProxyCentralServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::ProxyCentralService> ProxyCentralServicePrx;
void __patch(ProxyCentralServicePtr&, const ::Ice::ObjectPtr&);

class FcdcReadService;
bool operator==(const FcdcReadService&, const FcdcReadService&);
bool operator<(const FcdcReadService&, const FcdcReadService&);
::Ice::Object* upCast(::iBS::FcdcReadService*);
typedef ::IceInternal::Handle< ::iBS::FcdcReadService> FcdcReadServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcReadService> FcdcReadServicePrx;
void __patch(FcdcReadServicePtr&, const ::Ice::ObjectPtr&);

class FcdcReadWriteService;
bool operator==(const FcdcReadWriteService&, const FcdcReadWriteService&);
bool operator<(const FcdcReadWriteService&, const FcdcReadWriteService&);
::Ice::Object* upCast(::iBS::FcdcReadWriteService*);
typedef ::IceInternal::Handle< ::iBS::FcdcReadWriteService> FcdcReadWriteServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcReadWriteService> FcdcReadWriteServicePrx;
void __patch(FcdcReadWriteServicePtr&, const ::Ice::ObjectPtr&);

class FcdcAdminService;
bool operator==(const FcdcAdminService&, const FcdcAdminService&);
bool operator<(const FcdcAdminService&, const FcdcAdminService&);
::Ice::Object* upCast(::iBS::FcdcAdminService*);
typedef ::IceInternal::Handle< ::iBS::FcdcAdminService> FcdcAdminServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcAdminService> FcdcAdminServicePrx;
void __patch(FcdcAdminServicePtr&, const ::Ice::ObjectPtr&);

class FcdcRUVService;
bool operator==(const FcdcRUVService&, const FcdcRUVService&);
bool operator<(const FcdcRUVService&, const FcdcRUVService&);
::Ice::Object* upCast(::iBS::FcdcRUVService*);
typedef ::IceInternal::Handle< ::iBS::FcdcRUVService> FcdcRUVServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcRUVService> FcdcRUVServicePrx;
void __patch(FcdcRUVServicePtr&, const ::Ice::ObjectPtr&);

class BigMatrixService;
bool operator==(const BigMatrixService&, const BigMatrixService&);
bool operator<(const BigMatrixService&, const BigMatrixService&);
::Ice::Object* upCast(::iBS::BigMatrixService*);
typedef ::IceInternal::Handle< ::iBS::BigMatrixService> BigMatrixServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::BigMatrixService> BigMatrixServicePrx;
void __patch(BigMatrixServicePtr&, const ::Ice::ObjectPtr&);

class FcdcFacetAdminService;
bool operator==(const FcdcFacetAdminService&, const FcdcFacetAdminService&);
bool operator<(const FcdcFacetAdminService&, const FcdcFacetAdminService&);
::Ice::Object* upCast(::iBS::FcdcFacetAdminService*);
typedef ::IceInternal::Handle< ::iBS::FcdcFacetAdminService> FcdcFacetAdminServicePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::iBS::FcdcFacetAdminService> FcdcFacetAdminServicePrx;
void __patch(FcdcFacetAdminServicePtr&, const ::Ice::ObjectPtr&);

}

namespace iBS
{

enum GenomeEnum
{
    GenomeOthers = 0,
    GenomeHG19 = 1,
    GenomeHG18 = 2,
    GenomeMM10 = 3,
    GenomeMM9 = 4
};

enum NodeStatusEnum
{
    NodeStatusUnknown = 0,
    NodeStatusIDOnly = 1,
    NodeStatusUploaded = 2,
    NodeStatusUpdating = 3
};

enum FeatureDomainEnum
{
    FeatureDomainUnknown,
    FeatureDomainIntRange,
    FeatureDomainStringList,
    FeatureDomainIntList
};

struct BpRange
{
    ::std::string Ref;
    ::std::string Name;
    ::Ice::Long BpIdxFrom;
    ::Ice::Long BpIdxTo;

    bool operator==(const BpRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(Ref != __rhs.Ref)
        {
            return false;
        }
        if(Name != __rhs.Name)
        {
            return false;
        }
        if(BpIdxFrom != __rhs.BpIdxFrom)
        {
            return false;
        }
        if(BpIdxTo != __rhs.BpIdxTo)
        {
            return false;
        }
        return true;
    }

    bool operator<(const BpRange& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(Ref < __rhs.Ref)
        {
            return true;
        }
        else if(__rhs.Ref < Ref)
        {
            return false;
        }
        if(Name < __rhs.Name)
        {
            return true;
        }
        else if(__rhs.Name < Name)
        {
            return false;
        }
        if(BpIdxFrom < __rhs.BpIdxFrom)
        {
            return true;
        }
        else if(__rhs.BpIdxFrom < BpIdxFrom)
        {
            return false;
        }
        if(BpIdxTo < __rhs.BpIdxTo)
        {
            return true;
        }
        else if(__rhs.BpIdxTo < BpIdxTo)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const BpRange& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const BpRange& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const BpRange& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const BpRange& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::BpRange> BpRangeVec;

struct FeatureDomainInfo
{
    ::Ice::Int DomainID;
    ::std::string DomainName;
    ::Ice::Long DomainSize;
    ::iBS::FeatureDomainEnum DomainType;
    ::iBS::NodeStatusEnum Status;
    ::Ice::Long CreateDT;
    ::Ice::Long UpdateDT;
    ::std::string Description;

    bool operator==(const FeatureDomainInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(DomainID != __rhs.DomainID)
        {
            return false;
        }
        if(DomainName != __rhs.DomainName)
        {
            return false;
        }
        if(DomainSize != __rhs.DomainSize)
        {
            return false;
        }
        if(DomainType != __rhs.DomainType)
        {
            return false;
        }
        if(Status != __rhs.Status)
        {
            return false;
        }
        if(CreateDT != __rhs.CreateDT)
        {
            return false;
        }
        if(UpdateDT != __rhs.UpdateDT)
        {
            return false;
        }
        if(Description != __rhs.Description)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FeatureDomainInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(DomainID < __rhs.DomainID)
        {
            return true;
        }
        else if(__rhs.DomainID < DomainID)
        {
            return false;
        }
        if(DomainName < __rhs.DomainName)
        {
            return true;
        }
        else if(__rhs.DomainName < DomainName)
        {
            return false;
        }
        if(DomainSize < __rhs.DomainSize)
        {
            return true;
        }
        else if(__rhs.DomainSize < DomainSize)
        {
            return false;
        }
        if(DomainType < __rhs.DomainType)
        {
            return true;
        }
        else if(__rhs.DomainType < DomainType)
        {
            return false;
        }
        if(Status < __rhs.Status)
        {
            return true;
        }
        else if(__rhs.Status < Status)
        {
            return false;
        }
        if(CreateDT < __rhs.CreateDT)
        {
            return true;
        }
        else if(__rhs.CreateDT < CreateDT)
        {
            return false;
        }
        if(UpdateDT < __rhs.UpdateDT)
        {
            return true;
        }
        else if(__rhs.UpdateDT < UpdateDT)
        {
            return false;
        }
        if(Description < __rhs.Description)
        {
            return true;
        }
        else if(__rhs.Description < Description)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FeatureDomainInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FeatureDomainInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FeatureDomainInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FeatureDomainInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::FeatureDomainInfo> FeatureDomainInfoVec;

enum FeatureValueStorePolicyEnum
{
    FeatureValueStorePolicyUnkown = 0,
    FeatureValueStorePolicyInRAMNoSave = 1,
    FeatureValueStorePolicyBinaryFilesSingleObserver = 2,
    FeatureValueStorePolicyBinaryFilesObserverGroup = 3
};

enum FeatureValueSetPolicyEnum
{
    FeatureValueSetPolicyDoNothing = 0,
    FeatureValueSetPolicyInRAMNoSave = 1,
    FeatureValueSetPolicyInRAMAndSaveToStore = 2,
    FeatureValueSetPolicyNoRAMImmediatelyToStore = 3
};

enum FeatureValueGetPolicyEnum
{
    FeatureValueGetPolicyDoNothing = 0,
    FeatureValueGetPolicyAuto = 1,
    FeatureValueGetPolicyGetFromRAM = 2,
    FeatureValueGetPolicyGetForOneTimeRead = 3
};

enum FeatureValueEnum
{
    FeatureValueUnknown = 0,
    FeatureValueDouble = 1,
    FeatureValueFloat = 2,
    FeatureValueInt32 = 3,
    FeatureValueInt64 = 4,
    FeatureValueBit = 6,
    FeatureValueByte = 7,
    FeatureValueInt16 = 8
};

enum ByteArrayContentEnum
{
    ByteArrayContentUnknown = 0,
    ByteArrayContentByte = 1,
    ByteArrayContentUINT16 = 2,
    ByteArrayContentINT16 = 3
};

enum ByteArrayEndianEnum
{
    ByteArrayEndianUnknown = 0,
    ByteArrayBigEndian = 1,
    ByteArrayLittleEndian = 2
};

enum FeatureValueStoreLocationEnum
{
    FeatureValueStoreLocationDefault = 0,
    FeatureValueStoreLocationSpecified = 1
};

struct FeatureObserverInfo
{
    ::Ice::Int ObserverID;
    ::std::string ObserverName;
    ::std::string ContextName;
    ::Ice::Int DomainID;
    ::Ice::Long DomainSize;
    ::iBS::FeatureValueEnum ValueType;
    ::iBS::FeatureValueStorePolicyEnum StorePolicy;
    ::iBS::FeatureValueGetPolicyEnum GetPolicy;
    ::iBS::FeatureValueSetPolicyEnum SetPolicy;
    ::iBS::NodeStatusEnum Status;
    ::Ice::Int ThreadRandomIdx;
    ::Ice::Int ObserverGroupID;
    ::Ice::Int ObserverGroupSize;
    ::Ice::Int IdxInObserverGroup;
    ::Ice::Long CreateDT;
    ::Ice::Long UpdateDT;
    ::Ice::Int Version;
    ::Ice::Int ParentObserverID;
    ::Ice::Int MapbackObserverID;
    ::std::string Description;
    ::iBS::FeatureValueStoreLocationEnum StoreLocation;
    ::std::string SpecifiedPathPrefix;

    bool operator==(const FeatureObserverInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ObserverID != __rhs.ObserverID)
        {
            return false;
        }
        if(ObserverName != __rhs.ObserverName)
        {
            return false;
        }
        if(ContextName != __rhs.ContextName)
        {
            return false;
        }
        if(DomainID != __rhs.DomainID)
        {
            return false;
        }
        if(DomainSize != __rhs.DomainSize)
        {
            return false;
        }
        if(ValueType != __rhs.ValueType)
        {
            return false;
        }
        if(StorePolicy != __rhs.StorePolicy)
        {
            return false;
        }
        if(GetPolicy != __rhs.GetPolicy)
        {
            return false;
        }
        if(SetPolicy != __rhs.SetPolicy)
        {
            return false;
        }
        if(Status != __rhs.Status)
        {
            return false;
        }
        if(ThreadRandomIdx != __rhs.ThreadRandomIdx)
        {
            return false;
        }
        if(ObserverGroupID != __rhs.ObserverGroupID)
        {
            return false;
        }
        if(ObserverGroupSize != __rhs.ObserverGroupSize)
        {
            return false;
        }
        if(IdxInObserverGroup != __rhs.IdxInObserverGroup)
        {
            return false;
        }
        if(CreateDT != __rhs.CreateDT)
        {
            return false;
        }
        if(UpdateDT != __rhs.UpdateDT)
        {
            return false;
        }
        if(Version != __rhs.Version)
        {
            return false;
        }
        if(ParentObserverID != __rhs.ParentObserverID)
        {
            return false;
        }
        if(MapbackObserverID != __rhs.MapbackObserverID)
        {
            return false;
        }
        if(Description != __rhs.Description)
        {
            return false;
        }
        if(StoreLocation != __rhs.StoreLocation)
        {
            return false;
        }
        if(SpecifiedPathPrefix != __rhs.SpecifiedPathPrefix)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FeatureObserverInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ObserverID < __rhs.ObserverID)
        {
            return true;
        }
        else if(__rhs.ObserverID < ObserverID)
        {
            return false;
        }
        if(ObserverName < __rhs.ObserverName)
        {
            return true;
        }
        else if(__rhs.ObserverName < ObserverName)
        {
            return false;
        }
        if(ContextName < __rhs.ContextName)
        {
            return true;
        }
        else if(__rhs.ContextName < ContextName)
        {
            return false;
        }
        if(DomainID < __rhs.DomainID)
        {
            return true;
        }
        else if(__rhs.DomainID < DomainID)
        {
            return false;
        }
        if(DomainSize < __rhs.DomainSize)
        {
            return true;
        }
        else if(__rhs.DomainSize < DomainSize)
        {
            return false;
        }
        if(ValueType < __rhs.ValueType)
        {
            return true;
        }
        else if(__rhs.ValueType < ValueType)
        {
            return false;
        }
        if(StorePolicy < __rhs.StorePolicy)
        {
            return true;
        }
        else if(__rhs.StorePolicy < StorePolicy)
        {
            return false;
        }
        if(GetPolicy < __rhs.GetPolicy)
        {
            return true;
        }
        else if(__rhs.GetPolicy < GetPolicy)
        {
            return false;
        }
        if(SetPolicy < __rhs.SetPolicy)
        {
            return true;
        }
        else if(__rhs.SetPolicy < SetPolicy)
        {
            return false;
        }
        if(Status < __rhs.Status)
        {
            return true;
        }
        else if(__rhs.Status < Status)
        {
            return false;
        }
        if(ThreadRandomIdx < __rhs.ThreadRandomIdx)
        {
            return true;
        }
        else if(__rhs.ThreadRandomIdx < ThreadRandomIdx)
        {
            return false;
        }
        if(ObserverGroupID < __rhs.ObserverGroupID)
        {
            return true;
        }
        else if(__rhs.ObserverGroupID < ObserverGroupID)
        {
            return false;
        }
        if(ObserverGroupSize < __rhs.ObserverGroupSize)
        {
            return true;
        }
        else if(__rhs.ObserverGroupSize < ObserverGroupSize)
        {
            return false;
        }
        if(IdxInObserverGroup < __rhs.IdxInObserverGroup)
        {
            return true;
        }
        else if(__rhs.IdxInObserverGroup < IdxInObserverGroup)
        {
            return false;
        }
        if(CreateDT < __rhs.CreateDT)
        {
            return true;
        }
        else if(__rhs.CreateDT < CreateDT)
        {
            return false;
        }
        if(UpdateDT < __rhs.UpdateDT)
        {
            return true;
        }
        else if(__rhs.UpdateDT < UpdateDT)
        {
            return false;
        }
        if(Version < __rhs.Version)
        {
            return true;
        }
        else if(__rhs.Version < Version)
        {
            return false;
        }
        if(ParentObserverID < __rhs.ParentObserverID)
        {
            return true;
        }
        else if(__rhs.ParentObserverID < ParentObserverID)
        {
            return false;
        }
        if(MapbackObserverID < __rhs.MapbackObserverID)
        {
            return true;
        }
        else if(__rhs.MapbackObserverID < MapbackObserverID)
        {
            return false;
        }
        if(Description < __rhs.Description)
        {
            return true;
        }
        else if(__rhs.Description < Description)
        {
            return false;
        }
        if(StoreLocation < __rhs.StoreLocation)
        {
            return true;
        }
        else if(__rhs.StoreLocation < StoreLocation)
        {
            return false;
        }
        if(SpecifiedPathPrefix < __rhs.SpecifiedPathPrefix)
        {
            return true;
        }
        else if(__rhs.SpecifiedPathPrefix < SpecifiedPathPrefix)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FeatureObserverInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FeatureObserverInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FeatureObserverInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FeatureObserverInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::FeatureObserverInfo> FeatureObserverInfoVec;

class FeatureObserverSimpleInfo : public IceUtil::Shared
{
public:
    
    FeatureObserverSimpleInfo() {}
    FeatureObserverSimpleInfo(::Ice::Int __ice_ObserverID, ::Ice::Int __ice_DomainID, ::Ice::Long __ice_DomainSize, ::iBS::FeatureValueEnum __ice_ValueType, ::iBS::FeatureValueStorePolicyEnum __ice_StorePolicy, ::iBS::FeatureValueGetPolicyEnum __ice_GetPolicy, ::iBS::FeatureValueSetPolicyEnum __ice_SetPolicy, ::iBS::NodeStatusEnum __ice_Status, ::Ice::Int __ice_ThreadRandomIdx, ::Ice::Int __ice_ObserverGroupID, ::Ice::Int __ice_ObserverGroupSize, ::Ice::Int __ice_IdxInObserverGroup, ::iBS::FeatureValueStoreLocationEnum __ice_StoreLocation, const ::std::string& __ice_SpecifiedPathPrefix) :
        ObserverID(__ice_ObserverID),
        DomainID(__ice_DomainID),
        DomainSize(__ice_DomainSize),
        ValueType(__ice_ValueType),
        StorePolicy(__ice_StorePolicy),
        GetPolicy(__ice_GetPolicy),
        SetPolicy(__ice_SetPolicy),
        Status(__ice_Status),
        ThreadRandomIdx(__ice_ThreadRandomIdx),
        ObserverGroupID(__ice_ObserverGroupID),
        ObserverGroupSize(__ice_ObserverGroupSize),
        IdxInObserverGroup(__ice_IdxInObserverGroup),
        StoreLocation(__ice_StoreLocation),
        SpecifiedPathPrefix(__ice_SpecifiedPathPrefix)
    {
    }
    

    ::Ice::Int ObserverID;
    ::Ice::Int DomainID;
    ::Ice::Long DomainSize;
    ::iBS::FeatureValueEnum ValueType;
    ::iBS::FeatureValueStorePolicyEnum StorePolicy;
    ::iBS::FeatureValueGetPolicyEnum GetPolicy;
    ::iBS::FeatureValueSetPolicyEnum SetPolicy;
    ::iBS::NodeStatusEnum Status;
    ::Ice::Int ThreadRandomIdx;
    ::Ice::Int ObserverGroupID;
    ::Ice::Int ObserverGroupSize;
    ::Ice::Int IdxInObserverGroup;
    ::iBS::FeatureValueStoreLocationEnum StoreLocation;
    ::std::string SpecifiedPathPrefix;

    bool operator==(const FeatureObserverSimpleInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ObserverID != __rhs.ObserverID)
        {
            return false;
        }
        if(DomainID != __rhs.DomainID)
        {
            return false;
        }
        if(DomainSize != __rhs.DomainSize)
        {
            return false;
        }
        if(ValueType != __rhs.ValueType)
        {
            return false;
        }
        if(StorePolicy != __rhs.StorePolicy)
        {
            return false;
        }
        if(GetPolicy != __rhs.GetPolicy)
        {
            return false;
        }
        if(SetPolicy != __rhs.SetPolicy)
        {
            return false;
        }
        if(Status != __rhs.Status)
        {
            return false;
        }
        if(ThreadRandomIdx != __rhs.ThreadRandomIdx)
        {
            return false;
        }
        if(ObserverGroupID != __rhs.ObserverGroupID)
        {
            return false;
        }
        if(ObserverGroupSize != __rhs.ObserverGroupSize)
        {
            return false;
        }
        if(IdxInObserverGroup != __rhs.IdxInObserverGroup)
        {
            return false;
        }
        if(StoreLocation != __rhs.StoreLocation)
        {
            return false;
        }
        if(SpecifiedPathPrefix != __rhs.SpecifiedPathPrefix)
        {
            return false;
        }
        return true;
    }

    bool operator<(const FeatureObserverSimpleInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ObserverID < __rhs.ObserverID)
        {
            return true;
        }
        else if(__rhs.ObserverID < ObserverID)
        {
            return false;
        }
        if(DomainID < __rhs.DomainID)
        {
            return true;
        }
        else if(__rhs.DomainID < DomainID)
        {
            return false;
        }
        if(DomainSize < __rhs.DomainSize)
        {
            return true;
        }
        else if(__rhs.DomainSize < DomainSize)
        {
            return false;
        }
        if(ValueType < __rhs.ValueType)
        {
            return true;
        }
        else if(__rhs.ValueType < ValueType)
        {
            return false;
        }
        if(StorePolicy < __rhs.StorePolicy)
        {
            return true;
        }
        else if(__rhs.StorePolicy < StorePolicy)
        {
            return false;
        }
        if(GetPolicy < __rhs.GetPolicy)
        {
            return true;
        }
        else if(__rhs.GetPolicy < GetPolicy)
        {
            return false;
        }
        if(SetPolicy < __rhs.SetPolicy)
        {
            return true;
        }
        else if(__rhs.SetPolicy < SetPolicy)
        {
            return false;
        }
        if(Status < __rhs.Status)
        {
            return true;
        }
        else if(__rhs.Status < Status)
        {
            return false;
        }
        if(ThreadRandomIdx < __rhs.ThreadRandomIdx)
        {
            return true;
        }
        else if(__rhs.ThreadRandomIdx < ThreadRandomIdx)
        {
            return false;
        }
        if(ObserverGroupID < __rhs.ObserverGroupID)
        {
            return true;
        }
        else if(__rhs.ObserverGroupID < ObserverGroupID)
        {
            return false;
        }
        if(ObserverGroupSize < __rhs.ObserverGroupSize)
        {
            return true;
        }
        else if(__rhs.ObserverGroupSize < ObserverGroupSize)
        {
            return false;
        }
        if(IdxInObserverGroup < __rhs.IdxInObserverGroup)
        {
            return true;
        }
        else if(__rhs.IdxInObserverGroup < IdxInObserverGroup)
        {
            return false;
        }
        if(StoreLocation < __rhs.StoreLocation)
        {
            return true;
        }
        else if(__rhs.StoreLocation < StoreLocation)
        {
            return false;
        }
        if(SpecifiedPathPrefix < __rhs.SpecifiedPathPrefix)
        {
            return true;
        }
        else if(__rhs.SpecifiedPathPrefix < SpecifiedPathPrefix)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const FeatureObserverSimpleInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const FeatureObserverSimpleInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const FeatureObserverSimpleInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const FeatureObserverSimpleInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::IceUtil::Handle< ::iBS::FeatureObserverSimpleInfo> FeatureObserverSimpleInfoPtr;

typedef ::std::vector< ::iBS::FeatureObserverSimpleInfoPtr> FeatureObserverSimpleInfoVec;

enum SpecialFeatureObserverEnum
{
    SpecialFeatureObserverUnknown = 0,
    SpecialFeatureObserverTestDoubles = 1,
    SpecialFeatureObserverTestFloats = 2,
    SpecialFeatureObserverTestInt32 = 3,
    SpecialFeatureObserverTestInt64 = 4,
    SpecialFeatureObserverTestMaxID = 999,
    SpecialFeatureObserverRAMOnlyMinID = 1000,
    SpecialFeatureObserverRAMOnlyMaxID = 100000,
    SpecialFeatureObserverMaxID = 200000
};

struct ObserverStatsInfo
{
    ::Ice::Int ObserverID;
    ::Ice::Int Version;
    ::Ice::Long UpdateDT;
    ::Ice::Double Cnt;
    ::Ice::Double Max;
    ::Ice::Double Min;
    ::Ice::Double Sum;
    ::iBS::StringVec StatsNames;
    ::iBS::DoubleVec StatsValues;
};

typedef ::std::vector< ::iBS::ObserverStatsInfo> ObserverStatsInfoVec;

enum InvertIndexEnum
{
    InvertIndexUnknown = 0,
    InvertIndexIntValueIntKey = 1,
    InvertIndexDoubleValueDoubleRangeKey = 2
};

struct ObserverIndexInfo
{
    ::Ice::Int IndexID;
    ::Ice::Int ObserverID;
    ::Ice::Int Version;
    ::Ice::Long UpdateDT;
    ::iBS::InvertIndexEnum IndexType;
    ::Ice::Long KeyCnt;
    ::iBS::StringVec KeyNames;
    ::iBS::LongVec KeyIdx2RowIdxListStartIdx;
    ::iBS::LongVec KeyIdx2RowCnt;
    ::Ice::Long TotalRowCnt;
    ::iBS::IntVec IntKeys;
    ::iBS::DoubleVec DoubleRangeFromKeys;
    ::iBS::DoubleVec DoubleRangeToKeys;
    bool MakeIndexFile;
    ::Ice::Int IndexObserverID;
};

typedef ::std::vector< ::iBS::ObserverIndexInfo> ObserverIndexInfoVec;

enum RowSelectorEnum
{
    RowSelectorNone = 0,
    RowSelectorLowerThanThreshold = 1,
    RowSelectorHigherThanThreshold = 2,
    RowSelectorWithinMinMax = 3
};

enum RowStatisticEnum
{
    RowStatisticNone = 0,
    RowStatisticMax = 1,
    RowStatisticMin = 2,
    RowStatisticSum = 3
};

struct RowSelection
{
    bool Enable;
    ::iBS::RowSelectorEnum Selector;
    ::iBS::RowStatisticEnum Statistic;
    ::Ice::Double Threshold;
    ::Ice::Double Min;
    ::Ice::Double Max;
    ::Ice::Long SelectedCnt;
    ::Ice::Long UnselectedCnt;
};

enum RowAdjustEnum
{
    RowAdjustNone = 0,
    RowAdjustZeroMean = 1,
    RowAdjustZeroMeanUnitSD = 2,
    RowAdjustZeroMeanUnitLength = 3,
    RowAdjustZeroMeanUnitLengthConst0 = 4
};

enum ValueAdjustEnum
{
    ValueAdjustNone = 0,
    ValueAdjustLogToLinear = 1,
    ValueAdjustLogToLog2 = 2
};

const ::std::string FcdcFacetNameDefault = "";

const ::std::string FcdcFacetNameDivideByColumnSum = "FcdcFacetDivideByColumnSum";

enum FcdcFacetEnum
{
    FcdcFacetDefault = 0,
    FcdcFacetDivideByColumnSum = 1,
    FcdcFacetLogCount = 2,
    FcdcFacetRUVs = 3
};

enum RUVFeatureFilterPolicyEnum
{
    RUVFeatureFilterPolicyNone = 0,
    RUVFeatureFilterPolicyMaxCntLowPysicalCopy = 1
};

enum RUVControlFeaturePolicyEnum
{
    RUVControlFeaturePolicyNone = 0,
    RUVControlFeaturePolicyANOVA = 1,
    RUVControlFeaturePolicyMaxCntLow = 2,
    RUVControlFeaturePolicyFeatureIdxList = 3,
    RUVControlFeaturePolicyAllInUpperQuantile = 4,
    RUVControlFeaturePolicyAllInLowerQuantile = 5
};

enum RUVFacetStatusEnum
{
    RUVFacetStatusNone = 0,
    RUVFacetStatusFilteredOIDsReady = 1,
    RUVFacetStatusFeatureFiltered = 2,
    RUVFacetStatusReady = 3
};

enum RUVOutputScaleEnum
{
    RUVOutputScaleLog = 0,
    RUVOutputScaleRaw = 1
};

enum RUVInputAdjustEnum
{
    RUVInputDoLogE = 0,
    RUVInputDoLog2 = 1,
    RUVInputDoNothing = 2
};

enum RUVModeEnum
{
    RUVModeRUVs = 0,
    RUVModeRUVg = 1,
    RUVModeRUVsForVariation = 2,
    RUVModeRUVgForVariation = 3
};

enum RUVOutputModeEnum
{
    RUVOutputModeGroupMean = 0,
    RUVOutputModeYminusWa = 1,
    RUVOutputModeXb = 2,
    RUVOutputModeWa = 3,
    RUVOutputModeYminusZY = 4,
    RUVOutputModeZY = 5,
    RUVOutputModeZYthenXb = 6,
    RUVOutputModeZYthenGroupMean = 7,
    RUVOutputModeYminusTYcs = 8,
    RUVOutputModeZYGetE = 9,
    RUVOutputModeYminusWaXb = 10
};

struct RUVFacetInfo
{
    ::Ice::Int FacetID;
    bool FacetReady;
    ::iBS::RUVFacetStatusEnum FacetStatus;
    ::iBS::RUVModeEnum RUVMode;
    ::std::string FacetName;
    ::std::string Description;
    ::iBS::IntVec SampleIDs;
    ::iBS::IntVecVec ReplicateSampleIDs;
    ::iBS::RUVFeatureFilterPolicyEnum FeatureFilterPolicy;
    ::Ice::Double FeatureFilterMaxCntLowThreshold;
    ::iBS::RUVControlFeaturePolicyEnum ControlFeaturePolicy;
    ::Ice::Double ControlFeatureMaxCntLowBound;
    ::Ice::Double ControlFeatureMaxCntUpBound;
    ::Ice::Double CommonLibrarySize;
    ::iBS::DoubleVec NormalizeFactors;
    ::Ice::Int ObserverIDforControlFeatureIdxs;
    ::iBS::DoubleVecVec KnownFactors;
    ::Ice::Double Tol;
    ::Ice::Long MaxK;
    ::Ice::Int ThreadRandomIdx;
    ::Ice::Long FeatureIdxFrom;
    ::Ice::Long FeatureIdxTo;
    bool SubRangeLibrarySizeAdjust;
    ::iBS::RUVInputAdjustEnum InputAdjust;
    ::iBS::IntVec RawCountObserverIDs;
    ::Ice::Int MapbackObserverID;
    ::iBS::IntVecVec ConditionObserverIDs;
    ::Ice::Long n;
    ::Ice::Long L;
    ::Ice::Long J;
    ::Ice::Long P;
    ::Ice::Int K;
    ::Ice::Int CtrlSampleCnt;
    ::Ice::Int ObserverIDforWts;
    ::Ice::Int ObserverIDforTs;
    ::Ice::Int ObserverIDforZs;
    ::Ice::Int ObserverIDforGs;
    ::Ice::Double grandMeanY;
    ::Ice::Long ControlFeatureCnt;
    ::Ice::Int OIDforEigenValue;
    ::Ice::Int OIDforEigenVectors;
};

struct ConditionInfo
{
    ::std::string Name;
    ::Ice::Int ConditionIdx;
    ::Ice::Int ObserverCnt;

    bool operator==(const ConditionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(Name != __rhs.Name)
        {
            return false;
        }
        if(ConditionIdx != __rhs.ConditionIdx)
        {
            return false;
        }
        if(ObserverCnt != __rhs.ObserverCnt)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ConditionInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(Name < __rhs.Name)
        {
            return true;
        }
        else if(__rhs.Name < Name)
        {
            return false;
        }
        if(ConditionIdx < __rhs.ConditionIdx)
        {
            return true;
        }
        else if(__rhs.ConditionIdx < ConditionIdx)
        {
            return false;
        }
        if(ObserverCnt < __rhs.ObserverCnt)
        {
            return true;
        }
        else if(__rhs.ObserverCnt < ObserverCnt)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ConditionInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ConditionInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ConditionInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ConditionInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::iBS::ConditionInfo> ConditionInfoVec;

struct RUVVarDecomposeInfo
{
    ::Ice::Int k;
    ::Ice::Int extW;
    ::Ice::Double grandMean;
    ::Ice::Double totalVar;
    ::Ice::Double Xb;
    ::Ice::Double Wa;
    ::Ice::Double XbWa;
    ::Ice::Double e;
    ::Ice::Long featureIdxFrom;
    ::Ice::Long featureIdxTo;
    ::iBS::IntVec wtVecIdxs;
    ::Ice::Double xbGrandMean;
    ::Ice::Double xbTotalVar;
    ::Ice::Double xbLocusBgVar;
    ::Ice::Double xbLocusWgVar;
};

typedef ::std::vector< ::iBS::RUVVarDecomposeInfo> RUVVarDecomposeInfoVec;

}

namespace Ice
{
template<>
struct StreamableTraits< ::iBS::GenomeEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::NodeStatusEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureDomainEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::BpRange>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 18;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::BpRange, S>
{
    static void write(S* __os, const ::iBS::BpRange& v)
    {
        __os->write(v.Ref);
        __os->write(v.Name);
        __os->write(v.BpIdxFrom);
        __os->write(v.BpIdxTo);
    }
};

template<class S>
struct StreamReader< ::iBS::BpRange, S>
{
    static void read(S* __is, ::iBS::BpRange& v)
    {
        __is->read(v.Ref);
        __is->read(v.Name);
        __is->read(v.BpIdxFrom);
        __is->read(v.BpIdxTo);
    }
};

template<>
struct StreamableTraits< ::iBS::FeatureDomainInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 32;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::FeatureDomainInfo, S>
{
    static void write(S* __os, const ::iBS::FeatureDomainInfo& v)
    {
        __os->write(v.DomainID);
        __os->write(v.DomainName);
        __os->write(v.DomainSize);
        __os->write(v.DomainType);
        __os->write(v.Status);
        __os->write(v.CreateDT);
        __os->write(v.UpdateDT);
        __os->write(v.Description);
    }
};

template<class S>
struct StreamReader< ::iBS::FeatureDomainInfo, S>
{
    static void read(S* __is, ::iBS::FeatureDomainInfo& v)
    {
        __is->read(v.DomainID);
        __is->read(v.DomainName);
        __is->read(v.DomainSize);
        __is->read(v.DomainType);
        __is->read(v.Status);
        __is->read(v.CreateDT);
        __is->read(v.UpdateDT);
        __is->read(v.Description);
    }
};

template<>
struct StreamableTraits< ::iBS::FeatureValueStorePolicyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureValueSetPolicyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureValueGetPolicyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureValueEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 8;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::ByteArrayContentEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::ByteArrayEndianEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureValueStoreLocationEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FeatureObserverInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 70;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::FeatureObserverInfo, S>
{
    static void write(S* __os, const ::iBS::FeatureObserverInfo& v)
    {
        __os->write(v.ObserverID);
        __os->write(v.ObserverName);
        __os->write(v.ContextName);
        __os->write(v.DomainID);
        __os->write(v.DomainSize);
        __os->write(v.ValueType);
        __os->write(v.StorePolicy);
        __os->write(v.GetPolicy);
        __os->write(v.SetPolicy);
        __os->write(v.Status);
        __os->write(v.ThreadRandomIdx);
        __os->write(v.ObserverGroupID);
        __os->write(v.ObserverGroupSize);
        __os->write(v.IdxInObserverGroup);
        __os->write(v.CreateDT);
        __os->write(v.UpdateDT);
        __os->write(v.Version);
        __os->write(v.ParentObserverID);
        __os->write(v.MapbackObserverID);
        __os->write(v.Description);
        __os->write(v.StoreLocation);
        __os->write(v.SpecifiedPathPrefix);
    }
};

template<class S>
struct StreamReader< ::iBS::FeatureObserverInfo, S>
{
    static void read(S* __is, ::iBS::FeatureObserverInfo& v)
    {
        __is->read(v.ObserverID);
        __is->read(v.ObserverName);
        __is->read(v.ContextName);
        __is->read(v.DomainID);
        __is->read(v.DomainSize);
        __is->read(v.ValueType);
        __is->read(v.StorePolicy);
        __is->read(v.GetPolicy);
        __is->read(v.SetPolicy);
        __is->read(v.Status);
        __is->read(v.ThreadRandomIdx);
        __is->read(v.ObserverGroupID);
        __is->read(v.ObserverGroupSize);
        __is->read(v.IdxInObserverGroup);
        __is->read(v.CreateDT);
        __is->read(v.UpdateDT);
        __is->read(v.Version);
        __is->read(v.ParentObserverID);
        __is->read(v.MapbackObserverID);
        __is->read(v.Description);
        __is->read(v.StoreLocation);
        __is->read(v.SpecifiedPathPrefix);
    }
};

template<>
struct StreamableTraits< ::iBS::FeatureObserverSimpleInfoPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 39;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::FeatureObserverSimpleInfoPtr, S>
{
    static void write(S* __os, const ::iBS::FeatureObserverSimpleInfoPtr& v)
    {
        __os->write(v->ObserverID);
        __os->write(v->DomainID);
        __os->write(v->DomainSize);
        __os->write(v->ValueType);
        __os->write(v->StorePolicy);
        __os->write(v->GetPolicy);
        __os->write(v->SetPolicy);
        __os->write(v->Status);
        __os->write(v->ThreadRandomIdx);
        __os->write(v->ObserverGroupID);
        __os->write(v->ObserverGroupSize);
        __os->write(v->IdxInObserverGroup);
        __os->write(v->StoreLocation);
        __os->write(v->SpecifiedPathPrefix);
    }
};

template<class S>
struct StreamReader< ::iBS::FeatureObserverSimpleInfoPtr, S>
{
    static void read(S* __is, ::iBS::FeatureObserverSimpleInfoPtr& v)
    {
        __is->read(v->ObserverID);
        __is->read(v->DomainID);
        __is->read(v->DomainSize);
        __is->read(v->ValueType);
        __is->read(v->StorePolicy);
        __is->read(v->GetPolicy);
        __is->read(v->SetPolicy);
        __is->read(v->Status);
        __is->read(v->ThreadRandomIdx);
        __is->read(v->ObserverGroupID);
        __is->read(v->ObserverGroupSize);
        __is->read(v->IdxInObserverGroup);
        __is->read(v->StoreLocation);
        __is->read(v->SpecifiedPathPrefix);
    }
};

template<>
struct StreamableTraits< ::iBS::SpecialFeatureObserverEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 200000;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::ObserverStatsInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 50;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::ObserverStatsInfo, S>
{
    static void write(S* __os, const ::iBS::ObserverStatsInfo& v)
    {
        __os->write(v.ObserverID);
        __os->write(v.Version);
        __os->write(v.UpdateDT);
        __os->write(v.Cnt);
        __os->write(v.Max);
        __os->write(v.Min);
        __os->write(v.Sum);
        __os->write(v.StatsNames);
        __os->write(v.StatsValues);
    }
};

template<class S>
struct StreamReader< ::iBS::ObserverStatsInfo, S>
{
    static void read(S* __is, ::iBS::ObserverStatsInfo& v)
    {
        __is->read(v.ObserverID);
        __is->read(v.Version);
        __is->read(v.UpdateDT);
        __is->read(v.Cnt);
        __is->read(v.Max);
        __is->read(v.Min);
        __is->read(v.Sum);
        __is->read(v.StatsNames);
        __is->read(v.StatsValues);
    }
};

template<>
struct StreamableTraits< ::iBS::InvertIndexEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::ObserverIndexInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 48;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::ObserverIndexInfo, S>
{
    static void write(S* __os, const ::iBS::ObserverIndexInfo& v)
    {
        __os->write(v.IndexID);
        __os->write(v.ObserverID);
        __os->write(v.Version);
        __os->write(v.UpdateDT);
        __os->write(v.IndexType);
        __os->write(v.KeyCnt);
        __os->write(v.KeyNames);
        __os->write(v.KeyIdx2RowIdxListStartIdx);
        __os->write(v.KeyIdx2RowCnt);
        __os->write(v.TotalRowCnt);
        __os->write(v.IntKeys);
        __os->write(v.DoubleRangeFromKeys);
        __os->write(v.DoubleRangeToKeys);
        __os->write(v.MakeIndexFile);
        __os->write(v.IndexObserverID);
    }
};

template<class S>
struct StreamReader< ::iBS::ObserverIndexInfo, S>
{
    static void read(S* __is, ::iBS::ObserverIndexInfo& v)
    {
        __is->read(v.IndexID);
        __is->read(v.ObserverID);
        __is->read(v.Version);
        __is->read(v.UpdateDT);
        __is->read(v.IndexType);
        __is->read(v.KeyCnt);
        __is->read(v.KeyNames);
        __is->read(v.KeyIdx2RowIdxListStartIdx);
        __is->read(v.KeyIdx2RowCnt);
        __is->read(v.TotalRowCnt);
        __is->read(v.IntKeys);
        __is->read(v.DoubleRangeFromKeys);
        __is->read(v.DoubleRangeToKeys);
        __is->read(v.MakeIndexFile);
        __is->read(v.IndexObserverID);
    }
};

template<>
struct StreamableTraits< ::iBS::RowSelectorEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RowStatisticEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RowSelection>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 43;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::RowSelection, S>
{
    static void write(S* __os, const ::iBS::RowSelection& v)
    {
        __os->write(v.Enable);
        __os->write(v.Selector);
        __os->write(v.Statistic);
        __os->write(v.Threshold);
        __os->write(v.Min);
        __os->write(v.Max);
        __os->write(v.SelectedCnt);
        __os->write(v.UnselectedCnt);
    }
};

template<class S>
struct StreamReader< ::iBS::RowSelection, S>
{
    static void read(S* __is, ::iBS::RowSelection& v)
    {
        __is->read(v.Enable);
        __is->read(v.Selector);
        __is->read(v.Statistic);
        __is->read(v.Threshold);
        __is->read(v.Min);
        __is->read(v.Max);
        __is->read(v.SelectedCnt);
        __is->read(v.UnselectedCnt);
    }
};

template<>
struct StreamableTraits< ::iBS::RowAdjustEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::ValueAdjustEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::FcdcFacetEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVFeatureFilterPolicyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVControlFeaturePolicyEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 5;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVFacetStatusEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVOutputScaleEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVInputAdjustEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVModeEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 3;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVOutputModeEnum>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 10;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::iBS::RUVFacetInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 175;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::RUVFacetInfo, S>
{
    static void write(S* __os, const ::iBS::RUVFacetInfo& v)
    {
        __os->write(v.FacetID);
        __os->write(v.FacetReady);
        __os->write(v.FacetStatus);
        __os->write(v.RUVMode);
        __os->write(v.FacetName);
        __os->write(v.Description);
        __os->write(v.SampleIDs);
        __os->write(v.ReplicateSampleIDs);
        __os->write(v.FeatureFilterPolicy);
        __os->write(v.FeatureFilterMaxCntLowThreshold);
        __os->write(v.ControlFeaturePolicy);
        __os->write(v.ControlFeatureMaxCntLowBound);
        __os->write(v.ControlFeatureMaxCntUpBound);
        __os->write(v.CommonLibrarySize);
        __os->write(v.NormalizeFactors);
        __os->write(v.ObserverIDforControlFeatureIdxs);
        __os->write(v.KnownFactors);
        __os->write(v.Tol);
        __os->write(v.MaxK);
        __os->write(v.ThreadRandomIdx);
        __os->write(v.FeatureIdxFrom);
        __os->write(v.FeatureIdxTo);
        __os->write(v.SubRangeLibrarySizeAdjust);
        __os->write(v.InputAdjust);
        __os->write(v.RawCountObserverIDs);
        __os->write(v.MapbackObserverID);
        __os->write(v.ConditionObserverIDs);
        __os->write(v.n);
        __os->write(v.L);
        __os->write(v.J);
        __os->write(v.P);
        __os->write(v.K);
        __os->write(v.CtrlSampleCnt);
        __os->write(v.ObserverIDforWts);
        __os->write(v.ObserverIDforTs);
        __os->write(v.ObserverIDforZs);
        __os->write(v.ObserverIDforGs);
        __os->write(v.grandMeanY);
        __os->write(v.ControlFeatureCnt);
        __os->write(v.OIDforEigenValue);
        __os->write(v.OIDforEigenVectors);
    }
};

template<class S>
struct StreamReader< ::iBS::RUVFacetInfo, S>
{
    static void read(S* __is, ::iBS::RUVFacetInfo& v)
    {
        __is->read(v.FacetID);
        __is->read(v.FacetReady);
        __is->read(v.FacetStatus);
        __is->read(v.RUVMode);
        __is->read(v.FacetName);
        __is->read(v.Description);
        __is->read(v.SampleIDs);
        __is->read(v.ReplicateSampleIDs);
        __is->read(v.FeatureFilterPolicy);
        __is->read(v.FeatureFilterMaxCntLowThreshold);
        __is->read(v.ControlFeaturePolicy);
        __is->read(v.ControlFeatureMaxCntLowBound);
        __is->read(v.ControlFeatureMaxCntUpBound);
        __is->read(v.CommonLibrarySize);
        __is->read(v.NormalizeFactors);
        __is->read(v.ObserverIDforControlFeatureIdxs);
        __is->read(v.KnownFactors);
        __is->read(v.Tol);
        __is->read(v.MaxK);
        __is->read(v.ThreadRandomIdx);
        __is->read(v.FeatureIdxFrom);
        __is->read(v.FeatureIdxTo);
        __is->read(v.SubRangeLibrarySizeAdjust);
        __is->read(v.InputAdjust);
        __is->read(v.RawCountObserverIDs);
        __is->read(v.MapbackObserverID);
        __is->read(v.ConditionObserverIDs);
        __is->read(v.n);
        __is->read(v.L);
        __is->read(v.J);
        __is->read(v.P);
        __is->read(v.K);
        __is->read(v.CtrlSampleCnt);
        __is->read(v.ObserverIDforWts);
        __is->read(v.ObserverIDforTs);
        __is->read(v.ObserverIDforZs);
        __is->read(v.ObserverIDforGs);
        __is->read(v.grandMeanY);
        __is->read(v.ControlFeatureCnt);
        __is->read(v.OIDforEigenValue);
        __is->read(v.OIDforEigenVectors);
    }
};

template<>
struct StreamableTraits< ::iBS::ConditionInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 9;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::ConditionInfo, S>
{
    static void write(S* __os, const ::iBS::ConditionInfo& v)
    {
        __os->write(v.Name);
        __os->write(v.ConditionIdx);
        __os->write(v.ObserverCnt);
    }
};

template<class S>
struct StreamReader< ::iBS::ConditionInfo, S>
{
    static void read(S* __is, ::iBS::ConditionInfo& v)
    {
        __is->read(v.Name);
        __is->read(v.ConditionIdx);
        __is->read(v.ObserverCnt);
    }
};

template<>
struct StreamableTraits< ::iBS::RUVVarDecomposeInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 105;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::iBS::RUVVarDecomposeInfo, S>
{
    static void write(S* __os, const ::iBS::RUVVarDecomposeInfo& v)
    {
        __os->write(v.k);
        __os->write(v.extW);
        __os->write(v.grandMean);
        __os->write(v.totalVar);
        __os->write(v.Xb);
        __os->write(v.Wa);
        __os->write(v.XbWa);
        __os->write(v.e);
        __os->write(v.featureIdxFrom);
        __os->write(v.featureIdxTo);
        __os->write(v.wtVecIdxs);
        __os->write(v.xbGrandMean);
        __os->write(v.xbTotalVar);
        __os->write(v.xbLocusBgVar);
        __os->write(v.xbLocusWgVar);
    }
};

template<class S>
struct StreamReader< ::iBS::RUVVarDecomposeInfo, S>
{
    static void read(S* __is, ::iBS::RUVVarDecomposeInfo& v)
    {
        __is->read(v.k);
        __is->read(v.extW);
        __is->read(v.grandMean);
        __is->read(v.totalVar);
        __is->read(v.Xb);
        __is->read(v.Wa);
        __is->read(v.XbWa);
        __is->read(v.e);
        __is->read(v.featureIdxFrom);
        __is->read(v.featureIdxTo);
        __is->read(v.wtVecIdxs);
        __is->read(v.xbGrandMean);
        __is->read(v.xbTotalVar);
        __is->read(v.xbLocusBgVar);
        __is->read(v.xbLocusWgVar);
    }
};

}

namespace iBS
{

class AMD_FcdcReadService_GetDoublesColumnVector : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetDoublesColumnVector> AMD_FcdcReadService_GetDoublesColumnVectorPtr;

class AMD_FcdcReadService_GetIntsColumnVector : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetIntsColumnVector> AMD_FcdcReadService_GetIntsColumnVectorPtr;

class AMD_FcdcReadService_GetDoublesRowMatrix : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetDoublesRowMatrix> AMD_FcdcReadService_GetDoublesRowMatrixPtr;

class AMD_FcdcReadService_GetRowMatrix : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetRowMatrix> AMD_FcdcReadService_GetRowMatrixPtr;

class AMD_FcdcReadService_SampleRowMatrix : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_SampleRowMatrix> AMD_FcdcReadService_SampleRowMatrixPtr;

class AMD_FcdcReadService_GetFeatureIdxsByIntKeys : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetFeatureIdxsByIntKeys> AMD_FcdcReadService_GetFeatureIdxsByIntKeysPtr;

class AMD_FcdcReadService_GetFeatureCntsByIntKeys : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadService_GetFeatureCntsByIntKeys> AMD_FcdcReadService_GetFeatureCntsByIntKeysPtr;

class AMD_FcdcReadWriteService_SetDoublesColumnVector : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadWriteService_SetDoublesColumnVector> AMD_FcdcReadWriteService_SetDoublesColumnVectorPtr;

class AMD_FcdcReadWriteService_SetBytesColumnVector : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadWriteService_SetBytesColumnVector> AMD_FcdcReadWriteService_SetBytesColumnVectorPtr;

class AMD_FcdcReadWriteService_SetIntsColumnVector : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadWriteService_SetIntsColumnVector> AMD_FcdcReadWriteService_SetIntsColumnVectorPtr;

class AMD_FcdcReadWriteService_SetDoublesRowMatrix : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcReadWriteService_SetDoublesRowMatrix> AMD_FcdcReadWriteService_SetDoublesRowMatrixPtr;

class AMD_FcdcAdminService_ForceLoadInRAM : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcAdminService_ForceLoadInRAM> AMD_FcdcAdminService_ForceLoadInRAMPtr;

class AMD_FcdcAdminService_ForceLeaveRAM : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcAdminService_ForceLeaveRAM> AMD_FcdcAdminService_ForceLeaveRAMPtr;

class AMD_FcdcAdminService_RecalculateObserverStats : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcAdminService_RecalculateObserverStats> AMD_FcdcAdminService_RecalculateObserverStatsPtr;

class AMD_FcdcAdminService_RecalculateObserverIndex : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcAdminService_RecalculateObserverIndex> AMD_FcdcAdminService_RecalculateObserverIndexPtr;

class AMD_FcdcAdminService_RemoveFeatureObservers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcAdminService_RemoveFeatureObservers> AMD_FcdcAdminService_RemoveFeatureObserversPtr;

class AMD_FcdcRUVService_SetActiveK : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcRUVService_SetActiveK> AMD_FcdcRUVService_SetActiveKPtr;

class AMD_FcdcRUVService_RebuildRUVModel : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcRUVService_RebuildRUVModel> AMD_FcdcRUVService_RebuildRUVModelPtr;

class AMD_FcdcRUVService_DecomposeVariance : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_FcdcRUVService_DecomposeVariance> AMD_FcdcRUVService_DecomposeVariancePtr;

class AMD_BigMatrixService_RecalculateObserverStats : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int, ::Ice::Long) = 0;
};

typedef ::IceUtil::Handle< ::iBS::AMD_BigMatrixService_RecalculateObserverStats> AMD_BigMatrixService_RecalculateObserverStatsPtr;

}

namespace IceAsync
{

namespace iBS
{

class AMD_FcdcReadService_GetDoublesColumnVector : public ::iBS::AMD_FcdcReadService_GetDoublesColumnVector, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetDoublesColumnVector(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_GetIntsColumnVector : public ::iBS::AMD_FcdcReadService_GetIntsColumnVector, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetIntsColumnVector(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_GetDoublesRowMatrix : public ::iBS::AMD_FcdcReadService_GetDoublesRowMatrix, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetDoublesRowMatrix(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_GetRowMatrix : public ::iBS::AMD_FcdcReadService_GetRowMatrix, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetRowMatrix(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_SampleRowMatrix : public ::iBS::AMD_FcdcReadService_SampleRowMatrix, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_SampleRowMatrix(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_GetFeatureIdxsByIntKeys : public ::iBS::AMD_FcdcReadService_GetFeatureIdxsByIntKeys, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetFeatureIdxsByIntKeys(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadService_GetFeatureCntsByIntKeys : public ::iBS::AMD_FcdcReadService_GetFeatureCntsByIntKeys, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadService_GetFeatureCntsByIntKeys(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadWriteService_SetDoublesColumnVector : public ::iBS::AMD_FcdcReadWriteService_SetDoublesColumnVector, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadWriteService_SetDoublesColumnVector(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadWriteService_SetBytesColumnVector : public ::iBS::AMD_FcdcReadWriteService_SetBytesColumnVector, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadWriteService_SetBytesColumnVector(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadWriteService_SetIntsColumnVector : public ::iBS::AMD_FcdcReadWriteService_SetIntsColumnVector, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadWriteService_SetIntsColumnVector(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcReadWriteService_SetDoublesRowMatrix : public ::iBS::AMD_FcdcReadWriteService_SetDoublesRowMatrix, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcReadWriteService_SetDoublesRowMatrix(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcAdminService_ForceLoadInRAM : public ::iBS::AMD_FcdcAdminService_ForceLoadInRAM, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcAdminService_ForceLoadInRAM(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcAdminService_ForceLeaveRAM : public ::iBS::AMD_FcdcAdminService_ForceLeaveRAM, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcAdminService_ForceLeaveRAM(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcAdminService_RecalculateObserverStats : public ::iBS::AMD_FcdcAdminService_RecalculateObserverStats, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcAdminService_RecalculateObserverStats(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcAdminService_RecalculateObserverIndex : public ::iBS::AMD_FcdcAdminService_RecalculateObserverIndex, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcAdminService_RecalculateObserverIndex(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcAdminService_RemoveFeatureObservers : public ::iBS::AMD_FcdcAdminService_RemoveFeatureObservers, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcAdminService_RemoveFeatureObservers(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcRUVService_SetActiveK : public ::iBS::AMD_FcdcRUVService_SetActiveK, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcRUVService_SetActiveK(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcRUVService_RebuildRUVModel : public ::iBS::AMD_FcdcRUVService_RebuildRUVModel, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcRUVService_RebuildRUVModel(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_FcdcRUVService_DecomposeVariance : public ::iBS::AMD_FcdcRUVService_DecomposeVariance, public ::IceInternal::IncomingAsync
{
public:

    AMD_FcdcRUVService_DecomposeVariance(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_BigMatrixService_RecalculateObserverStats : public ::iBS::AMD_BigMatrixService_RecalculateObserverStats, public ::IceInternal::IncomingAsync
{
public:

    AMD_BigMatrixService_RecalculateObserverStats(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int, ::Ice::Long);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

namespace iBS
{

class Callback_ProxyCentralService_RegisterByCallerAdress_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProxyCentralService_RegisterByCallerAdress_Base> Callback_ProxyCentralService_RegisterByCallerAdressPtr;

class Callback_ProxyCentralService_RegisterByProxyStr_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProxyCentralService_RegisterByProxyStr_Base> Callback_ProxyCentralService_RegisterByProxyStrPtr;

class Callback_ProxyCentralService_UnRegister_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProxyCentralService_UnRegister_Base> Callback_ProxyCentralService_UnRegisterPtr;

class Callback_ProxyCentralService_UnRegisterAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProxyCentralService_UnRegisterAll_Base> Callback_ProxyCentralService_UnRegisterAllPtr;

class Callback_ProxyCentralService_ListAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ProxyCentralService_ListAll_Base> Callback_ProxyCentralService_ListAllPtr;

class Callback_FcdcReadService_GetFeatureDomains_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureDomains_Base> Callback_FcdcReadService_GetFeatureDomainsPtr;

class Callback_FcdcReadService_GetFeatureObservers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureObservers_Base> Callback_FcdcReadService_GetFeatureObserversPtr;

class Callback_FcdcReadService_GetDoublesColumnVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetDoublesColumnVector_Base> Callback_FcdcReadService_GetDoublesColumnVectorPtr;

class Callback_FcdcReadService_GetIntsColumnVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetIntsColumnVector_Base> Callback_FcdcReadService_GetIntsColumnVectorPtr;

class Callback_FcdcReadService_GetDoublesRowMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetDoublesRowMatrix_Base> Callback_FcdcReadService_GetDoublesRowMatrixPtr;

class Callback_FcdcReadService_GetObserverStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetObserverStats_Base> Callback_FcdcReadService_GetObserverStatsPtr;

class Callback_FcdcReadService_GetObserversStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetObserversStats_Base> Callback_FcdcReadService_GetObserversStatsPtr;

class Callback_FcdcReadService_GetRowMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetRowMatrix_Base> Callback_FcdcReadService_GetRowMatrixPtr;

class Callback_FcdcReadService_SampleRowMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_SampleRowMatrix_Base> Callback_FcdcReadService_SampleRowMatrixPtr;

class Callback_FcdcReadService_GetObserverIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetObserverIndex_Base> Callback_FcdcReadService_GetObserverIndexPtr;

class Callback_FcdcReadService_GetFeatureIdxsByIntKeys_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureIdxsByIntKeys_Base> Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr;

class Callback_FcdcReadService_GetFeatureCntsByIntKeys_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureCntsByIntKeys_Base> Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr;

class Callback_FcdcReadService_GetAMDTaskInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetAMDTaskInfo_Base> Callback_FcdcReadService_GetAMDTaskInfoPtr;

class Callback_FcdcReadService_GetFeatureValueStoreDir_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureValueStoreDir_Base> Callback_FcdcReadService_GetFeatureValueStoreDirPtr;

class Callback_FcdcReadService_GetFeatureValuePathPrefix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadService_GetFeatureValuePathPrefix_Base> Callback_FcdcReadService_GetFeatureValuePathPrefixPtr;

class Callback_FcdcReadWriteService_SetFeatureDomains_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetFeatureDomains_Base> Callback_FcdcReadWriteService_SetFeatureDomainsPtr;

class Callback_FcdcReadWriteService_SetFeatureObservers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetFeatureObservers_Base> Callback_FcdcReadWriteService_SetFeatureObserversPtr;

class Callback_FcdcReadWriteService_SetDoublesColumnVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetDoublesColumnVector_Base> Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr;

class Callback_FcdcReadWriteService_SetBytesColumnVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetBytesColumnVector_Base> Callback_FcdcReadWriteService_SetBytesColumnVectorPtr;

class Callback_FcdcReadWriteService_SetIntsColumnVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetIntsColumnVector_Base> Callback_FcdcReadWriteService_SetIntsColumnVectorPtr;

class Callback_FcdcReadWriteService_SetDoublesRowMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcReadWriteService_SetDoublesRowMatrix_Base> Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr;

class Callback_FcdcAdminService_Shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_Shutdown_Base> Callback_FcdcAdminService_ShutdownPtr;

class Callback_FcdcAdminService_RqstNewFeatureDomainID_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RqstNewFeatureDomainID_Base> Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr;

class Callback_FcdcAdminService_RqstNewFeatureObserverID_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RqstNewFeatureObserverID_Base> Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr;

class Callback_FcdcAdminService_RqstNewFeatureObserversInGroup_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RqstNewFeatureObserversInGroup_Base> Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr;

class Callback_FcdcAdminService_AttachBigMatrix_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_AttachBigMatrix_Base> Callback_FcdcAdminService_AttachBigMatrixPtr;

class Callback_FcdcAdminService_AttachBigVector_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_AttachBigVector_Base> Callback_FcdcAdminService_AttachBigVectorPtr;

class Callback_FcdcAdminService_ForceLoadInRAM_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_ForceLoadInRAM_Base> Callback_FcdcAdminService_ForceLoadInRAMPtr;

class Callback_FcdcAdminService_ForceLeaveRAM_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_ForceLeaveRAM_Base> Callback_FcdcAdminService_ForceLeaveRAMPtr;

class Callback_FcdcAdminService_RecalculateObserverStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RecalculateObserverStats_Base> Callback_FcdcAdminService_RecalculateObserverStatsPtr;

class Callback_FcdcAdminService_RecalculateObserverIndex_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RecalculateObserverIndex_Base> Callback_FcdcAdminService_RecalculateObserverIndexPtr;

class Callback_FcdcAdminService_RemoveFeatureObservers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_RemoveFeatureObservers_Base> Callback_FcdcAdminService_RemoveFeatureObserversPtr;

class Callback_FcdcAdminService_SetObserverStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcAdminService_SetObserverStats_Base> Callback_FcdcAdminService_SetObserverStatsPtr;

class Callback_FcdcRUVService_SetActiveK_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetActiveK_Base> Callback_FcdcRUVService_SetActiveKPtr;

class Callback_FcdcRUVService_SetOutputMode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetOutputMode_Base> Callback_FcdcRUVService_SetOutputModePtr;

class Callback_FcdcRUVService_SetOutputSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetOutputSamples_Base> Callback_FcdcRUVService_SetOutputSamplesPtr;

class Callback_FcdcRUVService_ExcludeSamplesForGroupMean_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_ExcludeSamplesForGroupMean_Base> Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr;

class Callback_FcdcRUVService_SetOutputScale_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetOutputScale_Base> Callback_FcdcRUVService_SetOutputScalePtr;

class Callback_FcdcRUVService_SetOutputWorkerNum_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetOutputWorkerNum_Base> Callback_FcdcRUVService_SetOutputWorkerNumPtr;

class Callback_FcdcRUVService_SetCtrlQuantileValues_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetCtrlQuantileValues_Base> Callback_FcdcRUVService_SetCtrlQuantileValuesPtr;

class Callback_FcdcRUVService_RebuildRUVModel_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_RebuildRUVModel_Base> Callback_FcdcRUVService_RebuildRUVModelPtr;

class Callback_FcdcRUVService_GetConditionIdxs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetConditionIdxs_Base> Callback_FcdcRUVService_GetConditionIdxsPtr;

class Callback_FcdcRUVService_GetConditionInfos_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetConditionInfos_Base> Callback_FcdcRUVService_GetConditionInfosPtr;

class Callback_FcdcRUVService_GetSamplesInGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetSamplesInGroups_Base> Callback_FcdcRUVService_GetSamplesInGroupsPtr;

class Callback_FcdcRUVService_GetG_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetG_Base> Callback_FcdcRUVService_GetGPtr;

class Callback_FcdcRUVService_GetWt_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetWt_Base> Callback_FcdcRUVService_GetWtPtr;

class Callback_FcdcRUVService_GetEigenVals_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_GetEigenVals_Base> Callback_FcdcRUVService_GetEigenValsPtr;

class Callback_FcdcRUVService_SelectKByEigenVals_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SelectKByEigenVals_Base> Callback_FcdcRUVService_SelectKByEigenValsPtr;

class Callback_FcdcRUVService_DecomposeVariance_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_DecomposeVariance_Base> Callback_FcdcRUVService_DecomposeVariancePtr;

class Callback_FcdcRUVService_SetWtVectorIdxs_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcRUVService_SetWtVectorIdxs_Base> Callback_FcdcRUVService_SetWtVectorIdxsPtr;

class Callback_BigMatrixService_SetOutputSamples_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BigMatrixService_SetOutputSamples_Base> Callback_BigMatrixService_SetOutputSamplesPtr;

class Callback_BigMatrixService_SetRowAdjust_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BigMatrixService_SetRowAdjust_Base> Callback_BigMatrixService_SetRowAdjustPtr;

class Callback_BigMatrixService_RecalculateObserverStats_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BigMatrixService_RecalculateObserverStats_Base> Callback_BigMatrixService_RecalculateObserverStatsPtr;

class Callback_FcdcFacetAdminService_RqstNewRUVFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_RqstNewRUVFacet_Base> Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr;

class Callback_FcdcFacetAdminService_RemoveRUVFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_RemoveRUVFacet_Base> Callback_FcdcFacetAdminService_RemoveRUVFacetPtr;

class Callback_FcdcFacetAdminService_SetRUVFacetInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_SetRUVFacetInfo_Base> Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr;

class Callback_FcdcFacetAdminService_GetRUVFacetInfo_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_GetRUVFacetInfo_Base> Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr;

class Callback_FcdcFacetAdminService_GetRUVFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_GetRUVFacet_Base> Callback_FcdcFacetAdminService_GetRUVFacetPtr;

class Callback_FcdcFacetAdminService_GetBigMatrixFacet_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FcdcFacetAdminService_GetBigMatrixFacet_Base> Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr;

}

namespace IceProxy
{

namespace iBS
{

class ProxyCentralService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost)
    {
        return RegisterByCallerAdress(servantName, proxyStrNoHost, 0);
    }
    ::Ice::Int RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx)
    {
        return RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RegisterByCallerAdress(servantName, proxyStrNoHost, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RegisterByCallerAdress(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::iBS::Callback_ProxyCentralService_RegisterByCallerAdressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string& servantName, const ::std::string& proxyStrNoHost, const ::Ice::Context& __ctx, const ::iBS::Callback_ProxyCentralService_RegisterByCallerAdressPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByCallerAdress(servantName, proxyStrNoHost, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RegisterByCallerAdress(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr)
    {
        return RegisterByProxyStr(servantName, proxyStr, 0);
    }
    ::Ice::Int RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx)
    {
        return RegisterByProxyStr(servantName, proxyStr, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RegisterByProxyStr(servantName, proxyStr, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RegisterByProxyStr(servantName, proxyStr, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RegisterByProxyStr(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RegisterByProxyStr(servantName, proxyStr, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::iBS::Callback_ProxyCentralService_RegisterByProxyStrPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string& servantName, const ::std::string& proxyStr, const ::Ice::Context& __ctx, const ::iBS::Callback_ProxyCentralService_RegisterByProxyStrPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterByProxyStr(servantName, proxyStr, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RegisterByProxyStr(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int UnRegister(const ::std::string& servantName)
    {
        return UnRegister(servantName, 0);
    }
    ::Ice::Int UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx)
    {
        return UnRegister(servantName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UnRegister(const ::std::string& servantName, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UnRegister(servantName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegister(const ::std::string& servantName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnRegister(servantName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UnRegister(servantName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnRegister(servantName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_UnRegister(const ::std::string& servantName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_UnRegister(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_UnRegister(servantName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName)
    {
        return begin_UnRegister(servantName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx)
    {
        return begin_UnRegister(servantName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegister(servantName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegister(servantName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName, const ::iBS::Callback_ProxyCentralService_UnRegisterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegister(servantName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string& servantName, const ::Ice::Context& __ctx, const ::iBS::Callback_ProxyCentralService_UnRegisterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegister(servantName, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_UnRegister(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int UnRegister(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UnRegister(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int UnRegisterAll()
    {
        return UnRegisterAll(0);
    }
    ::Ice::Int UnRegisterAll(const ::Ice::Context& __ctx)
    {
        return UnRegisterAll(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UnRegisterAll(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UnRegisterAll(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegisterAll(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnRegisterAll(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegisterAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_UnRegisterAll(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_UnRegisterAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnRegisterAll(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_UnRegisterAll(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_UnRegisterAll(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_UnRegisterAll(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_UnRegisterAll()
    {
        return begin_UnRegisterAll(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::Ice::Context& __ctx)
    {
        return begin_UnRegisterAll(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegisterAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegisterAll(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::iBS::Callback_ProxyCentralService_UnRegisterAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegisterAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::Ice::Context& __ctx, const ::iBS::Callback_ProxyCentralService_UnRegisterAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnRegisterAll(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_UnRegisterAll(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int UnRegisterAll(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UnRegisterAll(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ListAll(::iBS::StringVec& proxyStrs)
    {
        return ListAll(proxyStrs, 0);
    }
    ::Ice::Int ListAll(::iBS::StringVec& proxyStrs, const ::Ice::Context& __ctx)
    {
        return ListAll(proxyStrs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ListAll(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ListAll(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ListAll(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ListAll(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ListAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ListAll(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ListAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ListAll(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ListAll(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::StringVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::StringVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::StringVec proxyStrs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ListAll(proxyStrs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, proxyStrs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::StringVec&)> _response;
        };
        return begin_ListAll(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ListAll()
    {
        return begin_ListAll(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ListAll(const ::Ice::Context& __ctx)
    {
        return begin_ListAll(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ListAll(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ListAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ListAll(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ListAll(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ListAll(const ::iBS::Callback_ProxyCentralService_ListAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ListAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ListAll(const ::Ice::Context& __ctx, const ::iBS::Callback_ProxyCentralService_ListAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ListAll(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_ListAll(::iBS::StringVec& proxyStrs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ListAll(::iBS::StringVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ListAll(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_secure(bool __secure) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_twoway() const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_oneway() const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_batchOneway() const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_datagram() const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_batchDatagram() const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_compress(bool __compress) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ProxyCentralService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ProxyCentralService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FcdcReadService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int GetFeatureDomains(const ::iBS::IntVec& domainIDs, ::iBS::FeatureDomainInfoVec& domainInfos)
    {
        return GetFeatureDomains(domainIDs, domainInfos, 0);
    }
    ::Ice::Int GetFeatureDomains(const ::iBS::IntVec& domainIDs, ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx)
    {
        return GetFeatureDomains(domainIDs, domainInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureDomainInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureDomains(domainIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureDomains(domainIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureDomainInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureDomains(domainIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureDomains(domainIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureDomainInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::FeatureDomainInfoVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::FeatureDomainInfoVec domainInfos;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetFeatureDomains(domainInfos, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, domainInfos);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::FeatureDomainInfoVec&)> _response;
        };
        return begin_GetFeatureDomains(domainIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs)
    {
        return begin_GetFeatureDomains(domainIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureDomains(domainIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureDomains(domainIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureDomains(domainIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::iBS::Callback_FcdcReadService_GetFeatureDomainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureDomains(domainIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec& domainIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureDomainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureDomains(domainIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureDomains(::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureDomains(const ::iBS::IntVec&, ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureDomains(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetFeatureObservers(const ::iBS::IntVec& observerIDs, ::iBS::FeatureObserverInfoVec& observerInfos)
    {
        return GetFeatureObservers(observerIDs, observerInfos, 0);
    }
    ::Ice::Int GetFeatureObservers(const ::iBS::IntVec& observerIDs, ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx)
    {
        return GetFeatureObservers(observerIDs, observerInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureObserverInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureObservers(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureObservers(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureObserverInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureObservers(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureObservers(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::FeatureObserverInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::FeatureObserverInfoVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::FeatureObserverInfoVec observerInfos;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetFeatureObservers(observerInfos, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, observerInfos);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::FeatureObserverInfoVec&)> _response;
        };
        return begin_GetFeatureObservers(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs)
    {
        return begin_GetFeatureObservers(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureObservers(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureObservers(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureObservers(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcReadService_GetFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureObservers(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureObservers(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureObservers(::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureObservers(const ::iBS::IntVec&, ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureObservers(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::DoubleVec& values)
    {
        return GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetDoublesColumnVector(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::iBS::Callback_FcdcReadService_GetDoublesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetDoublesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetDoublesColumnVector(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetDoublesColumnVector(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::IntVec& values)
    {
        return GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::IntVec& values, const ::Ice::Context& __ctx)
    {
        return GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Int*, const ::Ice::Int*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetIntsColumnVector(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&)> _response;
        };
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::iBS::Callback_FcdcReadService_GetIntsColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetIntsColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetIntsColumnVector(::iBS::IntVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetIntsColumnVector(::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::DoubleVec& values)
    {
        return GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetDoublesRowMatrix(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::iBS::Callback_FcdcReadService_GetDoublesRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetDoublesRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetDoublesRowMatrix(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetDoublesRowMatrix(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetObserverStats(::Ice::Int observerID, ::iBS::ObserverStatsInfo& stats)
    {
        return GetObserverStats(observerID, stats, 0);
    }
    ::Ice::Int GetObserverStats(::Ice::Int observerID, ::iBS::ObserverStatsInfo& stats, const ::Ice::Context& __ctx)
    {
        return GetObserverStats(observerID, stats, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetObserverStats(::Ice::Int observerID, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserverStats(observerID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverStats(::Ice::Int observerID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserverStats(observerID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserverStats(observerID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserverStats(observerID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::ObserverStatsInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::ObserverStatsInfo stats;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetObserverStats(stats, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, stats);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::ObserverStatsInfo&)> _response;
        };
        return begin_GetObserverStats(observerID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID)
    {
        return begin_GetObserverStats(observerID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context& __ctx)
    {
        return begin_GetObserverStats(observerID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverStats(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverStats(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID, const ::iBS::Callback_FcdcReadService_GetObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverStats(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverStats(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetObserverStats(::iBS::ObserverStatsInfo& stats, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetObserverStats(::Ice::Int, ::iBS::ObserverStatsInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetObserverStats(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetObserversStats(const ::iBS::IntVec& observerIDs, ::iBS::ObserverStatsInfoVec& observerStats)
    {
        return GetObserversStats(observerIDs, observerStats, 0);
    }
    ::Ice::Int GetObserversStats(const ::iBS::IntVec& observerIDs, ::iBS::ObserverStatsInfoVec& observerStats, const ::Ice::Context& __ctx)
    {
        return GetObserversStats(observerIDs, observerStats, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserversStats(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserversStats(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserversStats(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserversStats(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverStatsInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::ObserverStatsInfoVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::ObserverStatsInfoVec observerStats;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetObserversStats(observerStats, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, observerStats);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::ObserverStatsInfoVec&)> _response;
        };
        return begin_GetObserversStats(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs)
    {
        return begin_GetObserversStats(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_GetObserversStats(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserversStats(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserversStats(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcReadService_GetObserversStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserversStats(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetObserversStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserversStats(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetObserversStats(::iBS::ObserverStatsInfoVec& observerStats, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetObserversStats(const ::iBS::IntVec&, ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetObserversStats(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, ::iBS::DoubleVec& values)
    {
        return GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, values, 0);
    }
    ::Ice::Int GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, ::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetRowMatrix(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::iBS::Callback_FcdcReadService_GetRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec& observerIDs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRowMatrix(observerIDs, featureIdxFrom, featureIdxTo, rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetRowMatrix(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetRowMatrix(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetRowMatrix(const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetRowMatrix(const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, ::iBS::DoubleVec& values)
    {
        return SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, values, 0);
    }
    ::Ice::Int SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, ::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_SampleRowMatrix(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::iBS::Callback_FcdcReadService_SampleRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec& observerIDs, const ::iBS::LongVec& featureIdxs, const IceUtil::Optional< ::iBS::RowAdjustEnum>& rowAdjust, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_SampleRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SampleRowMatrix(observerIDs, featureIdxs, rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SampleRowMatrix(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_SampleRowMatrix(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SampleRowMatrix(const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SampleRowMatrix(const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetObserverIndex(::Ice::Int observerID, ::iBS::ObserverIndexInfo& oii)
    {
        return GetObserverIndex(observerID, oii, 0);
    }
    ::Ice::Int GetObserverIndex(::Ice::Int observerID, ::iBS::ObserverIndexInfo& oii, const ::Ice::Context& __ctx)
    {
        return GetObserverIndex(observerID, oii, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetObserverIndex(::Ice::Int observerID, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverIndexInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserverIndex(observerID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverIndex(::Ice::Int observerID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserverIndex(observerID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverIndexInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetObserverIndex(observerID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetObserverIndex(observerID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ObserverIndexInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::ObserverIndexInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::ObserverIndexInfo oii;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetObserverIndex(oii, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, oii);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::ObserverIndexInfo&)> _response;
        };
        return begin_GetObserverIndex(observerID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID)
    {
        return begin_GetObserverIndex(observerID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context& __ctx)
    {
        return begin_GetObserverIndex(observerID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverIndex(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverIndex(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID, const ::iBS::Callback_FcdcReadService_GetObserverIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverIndex(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetObserverIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetObserverIndex(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetObserverIndex(::iBS::ObserverIndexInfo& oii, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetObserverIndex(::Ice::Int, ::iBS::ObserverIndexInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetObserverIndex(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, ::iBS::LongVec& featureIdxs)
    {
        return GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, featureIdxs, 0);
    }
    ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, ::iBS::LongVec& featureIdxs, const ::Ice::Context& __ctx)
    {
        return GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, featureIdxs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureIdxs;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureIdxs;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetFeatureIdxsByIntKeys(___featureIdxs, __ret, __result);
                    featureIdxs = ___featureIdxs.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, featureIdxs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)> _response;
        };
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::iBS::Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::Ice::Long maxFeatureCnt, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureIdxsByIntKeys(observerID, keys, maxFeatureCnt, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureIdxsByIntKeys(::iBS::LongVec& featureIdxs, const ::Ice::AsyncResultPtr&);

     void ___end_GetFeatureIdxsByIntKeys(::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> >& featureIdxs, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureIdxsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::iBS::LongVec& featureCnts)
    {
        return GetFeatureCntsByIntKeys(observerID, keys, featureCnts, 0);
    }
    ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, ::iBS::LongVec& featureCnts, const ::Ice::Context& __ctx)
    {
        return GetFeatureCntsByIntKeys(observerID, keys, featureCnts, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureCntsByIntKeys(observerID, keys, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureCntsByIntKeys(observerID, keys, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureCnts;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureCnts;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetFeatureCntsByIntKeys(___featureCnts, __ret, __result);
                    featureCnts = ___featureCnts.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, featureCnts);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&)> _response;
        };
        return begin_GetFeatureCntsByIntKeys(observerID, keys, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::iBS::Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int observerID, const ::iBS::IntVec& keys, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureCntsByIntKeys(observerID, keys, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureCntsByIntKeys(::iBS::LongVec& featureCnts, const ::Ice::AsyncResultPtr&);

     void ___end_GetFeatureCntsByIntKeys(::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> >& featureCnts, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::iBS::LongVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureCntsByIntKeys(::Ice::Int, const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetAMDTaskInfo(::Ice::Long taskID, ::iBS::AMDTaskInfo& task)
    {
        return GetAMDTaskInfo(taskID, task, 0);
    }
    ::Ice::Int GetAMDTaskInfo(::Ice::Long taskID, ::iBS::AMDTaskInfo& task, const ::Ice::Context& __ctx)
    {
        return GetAMDTaskInfo(taskID, task, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetAMDTaskInfo(::Ice::Long taskID, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMDTaskInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAMDTaskInfo(taskID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAMDTaskInfo(::Ice::Long taskID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAMDTaskInfo(taskID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMDTaskInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetAMDTaskInfo(taskID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetAMDTaskInfo(taskID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::AMDTaskInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::AMDTaskInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::AMDTaskInfo task;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetAMDTaskInfo(task, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, task);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::AMDTaskInfo&)> _response;
        };
        return begin_GetAMDTaskInfo(taskID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID)
    {
        return begin_GetAMDTaskInfo(taskID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context& __ctx)
    {
        return begin_GetAMDTaskInfo(taskID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAMDTaskInfo(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAMDTaskInfo(taskID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID, const ::iBS::Callback_FcdcReadService_GetAMDTaskInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAMDTaskInfo(taskID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long taskID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetAMDTaskInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAMDTaskInfo(taskID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetAMDTaskInfo(::iBS::AMDTaskInfo& task, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetAMDTaskInfo(::Ice::Long, ::iBS::AMDTaskInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAMDTaskInfo(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetFeatureValueStoreDir(::std::string& rootDir)
    {
        return GetFeatureValueStoreDir(rootDir, 0);
    }
    ::Ice::Int GetFeatureValueStoreDir(::std::string& rootDir, const ::Ice::Context& __ctx)
    {
        return GetFeatureValueStoreDir(rootDir, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureValueStoreDir(const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureValueStoreDir(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValueStoreDir(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureValueStoreDir(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValueStoreDir(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureValueStoreDir(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValueStoreDir(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureValueStoreDir(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureValueStoreDir(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::string rootDir;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetFeatureValueStoreDir(rootDir, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, rootDir);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::string&)> _response;
        };
        return begin_GetFeatureValueStoreDir(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir()
    {
        return begin_GetFeatureValueStoreDir(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureValueStoreDir(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValueStoreDir(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValueStoreDir(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::iBS::Callback_FcdcReadService_GetFeatureValueStoreDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValueStoreDir(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureValueStoreDirPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValueStoreDir(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureValueStoreDir(::std::string& rootDir, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureValueStoreDir(::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureValueStoreDir(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int observerID, ::std::string& pathPrefix)
    {
        return GetFeatureValuePathPrefix(observerID, pathPrefix, 0);
    }
    ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int observerID, ::std::string& pathPrefix, const ::Ice::Context& __ctx)
    {
        return GetFeatureValuePathPrefix(observerID, pathPrefix, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureValuePathPrefix(observerID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureValuePathPrefix(observerID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetFeatureValuePathPrefix(observerID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetFeatureValuePathPrefix(observerID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
                ::std::string pathPrefix;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetFeatureValuePathPrefix(pathPrefix, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, pathPrefix);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::string&)> _response;
        };
        return begin_GetFeatureValuePathPrefix(observerID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID)
    {
        return begin_GetFeatureValuePathPrefix(observerID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context& __ctx)
    {
        return begin_GetFeatureValuePathPrefix(observerID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValuePathPrefix(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValuePathPrefix(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::iBS::Callback_FcdcReadService_GetFeatureValuePathPrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValuePathPrefix(observerID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int observerID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadService_GetFeatureValuePathPrefixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetFeatureValuePathPrefix(observerID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetFeatureValuePathPrefix(::std::string& pathPrefix, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int, ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetFeatureValuePathPrefix(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_secure(bool __secure) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_twoway() const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_oneway() const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_batchOneway() const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_datagram() const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_batchDatagram() const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_compress(bool __compress) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FcdcReadService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FcdcReadWriteService : virtual public ::IceProxy::iBS::FcdcReadService
{
public:

    ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos)
    {
        return SetFeatureDomains(domainInfos, 0);
    }
    ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx)
    {
        return SetFeatureDomains(domainInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetFeatureDomains(domainInfos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetFeatureDomains(domainInfos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetFeatureDomains(domainInfos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetFeatureDomains(domainInfos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetFeatureDomains(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetFeatureDomains(domainInfos, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos)
    {
        return begin_SetFeatureDomains(domainInfos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx)
    {
        return begin_SetFeatureDomains(domainInfos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureDomains(domainInfos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureDomains(domainInfos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::iBS::Callback_FcdcReadWriteService_SetFeatureDomainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureDomains(domainInfos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec& domainInfos, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetFeatureDomainsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureDomains(domainInfos, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetFeatureDomains(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos)
    {
        return SetFeatureObservers(observerInfos, 0);
    }
    ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx)
    {
        return SetFeatureObservers(observerInfos, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetFeatureObservers(observerInfos, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetFeatureObservers(observerInfos, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetFeatureObservers(observerInfos, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetFeatureObservers(observerInfos, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetFeatureObservers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetFeatureObservers(observerInfos, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos)
    {
        return begin_SetFeatureObservers(observerInfos, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx)
    {
        return begin_SetFeatureObservers(observerInfos, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureObservers(observerInfos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureObservers(observerInfos, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::iBS::Callback_FcdcReadWriteService_SetFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureObservers(observerInfos, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec& observerInfos, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetFeatureObservers(observerInfos, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetFeatureObservers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values)
    {
        return SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx)
    {
        return SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetDoublesColumnVector(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::iBS::Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetDoublesColumnVector(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian)
    {
        return SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0);
    }
    ::Ice::Int SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx)
    {
        return SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetBytesColumnVector(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::iBS::Callback_FcdcReadWriteService_SetBytesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& bytes, ::iBS::ByteArrayContentEnum content, ::iBS::ByteArrayEndianEnum endian, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetBytesColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetBytesColumnVector(observerID, featureIdxFrom, featureIdxTo, bytes, content, endian, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetBytesColumnVector(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetBytesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetBytesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values)
    {
        return SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx)
    {
        return SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetIntsColumnVector(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::iBS::Callback_FcdcReadWriteService_SetIntsColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int observerID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>& values, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetIntsColumnVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetIntsColumnVector(observerID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetIntsColumnVector(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values)
    {
        return SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0);
    }
    ::Ice::Int SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx)
    {
        return SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetDoublesRowMatrix(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::iBS::Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int observerGroupID, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>& values, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDoublesRowMatrix(observerGroupID, featureIdxFrom, featureIdxTo, values, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetDoublesRowMatrix(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_secure(bool __secure) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_twoway() const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_oneway() const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_batchOneway() const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_datagram() const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_batchDatagram() const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_compress(bool __compress) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcReadWriteService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FcdcReadWriteService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FcdcAdminService : virtual public ::IceProxy::iBS::FcdcReadWriteService
{
public:

    void Shutdown()
    {
        Shutdown(0);
    }
    void Shutdown(const ::Ice::Context& __ctx)
    {
        Shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_Shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_Shutdown()
    {
        return begin_Shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Shutdown(const ::Ice::Context& __ctx)
    {
        return begin_Shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Shutdown(const ::iBS::Callback_FcdcAdminService_ShutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Shutdown(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_ShutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Shutdown(&__ctx, __del, __cookie);
    }

    void end_Shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void Shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RqstNewFeatureDomainID(::Ice::Int& domainID)
    {
        return RqstNewFeatureDomainID(domainID, 0);
    }
    ::Ice::Int RqstNewFeatureDomainID(::Ice::Int& domainID, const ::Ice::Context& __ctx)
    {
        return RqstNewFeatureDomainID(domainID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureDomainID(const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureDomainID(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureDomainID(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureDomainID(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureDomainID(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureDomainID(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureDomainID(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureDomainID(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RqstNewFeatureDomainID(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int domainID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RqstNewFeatureDomainID(domainID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, domainID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_RqstNewFeatureDomainID(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID()
    {
        return begin_RqstNewFeatureDomainID(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::Ice::Context& __ctx)
    {
        return begin_RqstNewFeatureDomainID(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureDomainID(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureDomainID(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::iBS::Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureDomainID(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureDomainID(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_RqstNewFeatureDomainID(::Ice::Int& domainID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RqstNewFeatureDomainID(::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RqstNewFeatureDomainID(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RqstNewFeatureObserverID(bool inRAMNoSave, ::Ice::Int& observerID)
    {
        return RqstNewFeatureObserverID(inRAMNoSave, observerID, 0);
    }
    ::Ice::Int RqstNewFeatureObserverID(bool inRAMNoSave, ::Ice::Int& observerID, const ::Ice::Context& __ctx)
    {
        return RqstNewFeatureObserverID(inRAMNoSave, observerID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureObserverID(inRAMNoSave, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureObserverID(inRAMNoSave, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int observerID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RqstNewFeatureObserverID(observerID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, observerID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_RqstNewFeatureObserverID(inRAMNoSave, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context& __ctx)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::iBS::Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool inRAMNoSave, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserverID(inRAMNoSave, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RqstNewFeatureObserverID(::Ice::Int& observerID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RqstNewFeatureObserverID(bool, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserverID(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, ::iBS::IntVec& observerIDs)
    {
        return RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, observerIDs, 0);
    }
    ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, observerIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVec observerIDs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RqstNewFeatureObserversInGroup(observerIDs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, observerIDs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVec&)> _response;
        };
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context& __ctx)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::iBS::Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int groupSize, bool inRAMNoSave, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewFeatureObserversInGroup(groupSize, inRAMNoSave, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RqstNewFeatureObserversInGroup(::iBS::IntVec& observerIDs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int, bool, ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RqstNewFeatureObserversInGroup(::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, ::iBS::IntVec& OIDs)
    {
        return AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, OIDs, 0);
    }
    ::Ice::Int AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, ::iBS::IntVec& OIDs, const ::Ice::Context& __ctx)
    {
        return AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, OIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVec OIDs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_AttachBigMatrix(OIDs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, OIDs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVec&)> _response;
        };
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::iBS::Callback_FcdcAdminService_AttachBigMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int colCnt, ::Ice::Long rowCnt, const ::iBS::StringVec& colNames, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_AttachBigMatrixPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigMatrix(colCnt, rowCnt, colNames, storePathPrefix, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AttachBigMatrix(::iBS::IntVec& OIDs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, ::Ice::Int& OID)
    {
        return AttachBigVector(rowCnt, colName, storePathPrefix, OID, 0);
    }
    ::Ice::Int AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, ::Ice::Int& OID, const ::Ice::Context& __ctx)
    {
        return AttachBigVector(rowCnt, colName, storePathPrefix, OID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AttachBigVector(rowCnt, colName, storePathPrefix, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AttachBigVector(rowCnt, colName, storePathPrefix, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int OID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_AttachBigVector(OID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, OID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::iBS::Callback_FcdcAdminService_AttachBigVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long rowCnt, const ::std::string& colName, const ::std::string& storePathPrefix, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_AttachBigVectorPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AttachBigVector(rowCnt, colName, storePathPrefix, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_AttachBigVector(::Ice::Int& OID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec& observerIDs)
    {
        return ForceLoadInRAM(observerIDs, 0);
    }
    ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return ForceLoadInRAM(observerIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ForceLoadInRAM(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ForceLoadInRAM(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ForceLoadInRAM(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ForceLoadInRAM(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ForceLoadInRAM(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_ForceLoadInRAM(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs)
    {
        return begin_ForceLoadInRAM(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_ForceLoadInRAM(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLoadInRAM(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLoadInRAM(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcAdminService_ForceLoadInRAMPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLoadInRAM(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_ForceLoadInRAMPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLoadInRAM(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ForceLoadInRAM(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ForceLoadInRAM(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec& observerIDs)
    {
        return ForceLeaveRAM(observerIDs, 0);
    }
    ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return ForceLeaveRAM(observerIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ForceLeaveRAM(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ForceLeaveRAM(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ForceLeaveRAM(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ForceLeaveRAM(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ForceLeaveRAM(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_ForceLeaveRAM(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs)
    {
        return begin_ForceLeaveRAM(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_ForceLeaveRAM(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLeaveRAM(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLeaveRAM(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcAdminService_ForceLeaveRAMPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLeaveRAM(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_ForceLeaveRAMPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ForceLeaveRAM(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ForceLeaveRAM(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ForceLeaveRAM(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec& observerIDs)
    {
        return RecalculateObserverStats(observerIDs, 0);
    }
    ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return RecalculateObserverStats(observerIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverStats(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverStats(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverStats(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverStats(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RecalculateObserverStats(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RecalculateObserverStats(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs)
    {
        return begin_RecalculateObserverStats(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_RecalculateObserverStats(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcAdminService_RecalculateObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RecalculateObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RecalculateObserverStats(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile)
    {
        return RecalculateObserverIndex(observerID, saveIndexFile, 0);
    }
    ::Ice::Int RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx)
    {
        return RecalculateObserverIndex(observerID, saveIndexFile, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverIndex(observerID, saveIndexFile, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverIndex(observerID, saveIndexFile, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RecalculateObserverIndex(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::iBS::Callback_FcdcAdminService_RecalculateObserverIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int observerID, bool saveIndexFile, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RecalculateObserverIndexPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverIndex(observerID, saveIndexFile, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RecalculateObserverIndex(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RecalculateObserverIndex(::Ice::Int, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RecalculateObserverIndex(::Ice::Int, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile)
    {
        return RemoveFeatureObservers(observerIDs, removeDataFile, 0);
    }
    ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx)
    {
        return RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RemoveFeatureObservers(observerIDs, removeDataFile, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RemoveFeatureObservers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::iBS::Callback_FcdcAdminService_RemoveFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec& observerIDs, bool removeDataFile, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_RemoveFeatureObserversPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveFeatureObservers(observerIDs, removeDataFile, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RemoveFeatureObservers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RemoveFeatureObservers(const ::iBS::IntVec&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis)
    {
        return SetObserverStats(osis, 0);
    }
    ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx)
    {
        return SetObserverStats(osis, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetObserverStats(osis, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetObserverStats(osis, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetObserverStats(osis, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetObserverStats(osis, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetObserverStats(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetObserverStats(osis, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis)
    {
        return begin_SetObserverStats(osis, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx)
    {
        return begin_SetObserverStats(osis, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetObserverStats(osis, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetObserverStats(osis, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::iBS::Callback_FcdcAdminService_SetObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetObserverStats(osis, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec& osis, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcAdminService_SetObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetObserverStats(osis, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetObserverStats(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_secure(bool __secure) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_twoway() const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_oneway() const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_batchOneway() const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_datagram() const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_batchDatagram() const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_compress(bool __compress) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcAdminService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FcdcAdminService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FcdcRUVService : virtual public ::IceProxy::iBS::FcdcReadService
{
public:

    ::Ice::Int SetActiveK(::Ice::Int k, ::Ice::Int extW)
    {
        return SetActiveK(k, extW, 0);
    }
    ::Ice::Int SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx)
    {
        return SetActiveK(k, extW, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetActiveK(k, extW, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetActiveK(k, extW, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetActiveK(k, extW, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetActiveK(k, extW, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetActiveK(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetActiveK(k, extW, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW)
    {
        return begin_SetActiveK(k, extW, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx)
    {
        return begin_SetActiveK(k, extW, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetActiveK(k, extW, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetActiveK(k, extW, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::iBS::Callback_FcdcRUVService_SetActiveKPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetActiveK(k, extW, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int k, ::Ice::Int extW, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetActiveKPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetActiveK(k, extW, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetActiveK(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetActiveK(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetActiveK(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum mode)
    {
        return SetOutputMode(mode, 0);
    }
    ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx)
    {
        return SetOutputMode(mode, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputMode(mode, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputMode(mode, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputMode(mode, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputMode(mode, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetOutputMode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetOutputMode(mode, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode)
    {
        return begin_SetOutputMode(mode, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx)
    {
        return begin_SetOutputMode(mode, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputMode(mode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputMode(mode, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::iBS::Callback_FcdcRUVService_SetOutputModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputMode(mode, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum mode, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetOutputModePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputMode(mode, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetOutputMode(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetOutputSamples(const ::iBS::IntVec& sampleIDs)
    {
        return SetOutputSamples(sampleIDs, 0);
    }
    ::Ice::Int SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx)
    {
        return SetOutputSamples(sampleIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputSamples(sampleIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputSamples(sampleIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputSamples(sampleIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetOutputSamples(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetOutputSamples(sampleIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs)
    {
        return begin_SetOutputSamples(sampleIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::iBS::Callback_FcdcRUVService_SetOutputSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetOutputSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetOutputSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs)
    {
        return ExcludeSamplesForGroupMean(excludeSampleIDs, 0);
    }
    ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx)
    {
        return ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ExcludeSamplesForGroupMean(excludeSampleIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_ExcludeSamplesForGroupMean(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::iBS::Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec& excludeSampleIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ExcludeSamplesForGroupMean(excludeSampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_ExcludeSamplesForGroupMean(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum scale)
    {
        return SetOutputScale(scale, 0);
    }
    ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx)
    {
        return SetOutputScale(scale, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputScale(scale, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputScale(scale, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputScale(scale, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputScale(scale, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetOutputScale(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetOutputScale(scale, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale)
    {
        return begin_SetOutputScale(scale, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx)
    {
        return begin_SetOutputScale(scale, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputScale(scale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputScale(scale, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::iBS::Callback_FcdcRUVService_SetOutputScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputScale(scale, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum scale, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetOutputScalePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputScale(scale, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetOutputScale(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetOutputWorkerNum(::Ice::Int workerNum)
    {
        return SetOutputWorkerNum(workerNum, 0);
    }
    ::Ice::Int SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx)
    {
        return SetOutputWorkerNum(workerNum, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputWorkerNum(workerNum, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputWorkerNum(workerNum, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputWorkerNum(workerNum, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputWorkerNum(workerNum, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetOutputWorkerNum(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetOutputWorkerNum(workerNum, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum)
    {
        return begin_SetOutputWorkerNum(workerNum, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx)
    {
        return begin_SetOutputWorkerNum(workerNum, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputWorkerNum(workerNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputWorkerNum(workerNum, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::iBS::Callback_FcdcRUVService_SetOutputWorkerNumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputWorkerNum(workerNum, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int workerNum, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetOutputWorkerNumPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputWorkerNum(workerNum, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetOutputWorkerNum(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetOutputWorkerNum(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetOutputWorkerNum(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration)
    {
        return SetCtrlQuantileValues(quantile, qvalues, fration, 0);
    }
    ::Ice::Int SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx)
    {
        return SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCtrlQuantileValues(quantile, qvalues, fration, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetCtrlQuantileValues(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::iBS::Callback_FcdcRUVService_SetCtrlQuantileValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double quantile, const ::iBS::DoubleVec& qvalues, ::Ice::Double fration, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetCtrlQuantileValuesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetCtrlQuantileValues(quantile, qvalues, fration, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetCtrlQuantileValues(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, ::Ice::Long& taskID)
    {
        return RebuildRUVModel(threadCnt, ramMb, taskID, 0);
    }
    ::Ice::Int RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RebuildRUVModel(threadCnt, ramMb, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RebuildRUVModel(threadCnt, ramMb, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RebuildRUVModel(threadCnt, ramMb, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RebuildRUVModel(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RebuildRUVModel(threadCnt, ramMb, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context& __ctx)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::iBS::Callback_FcdcRUVService_RebuildRUVModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int threadCnt, ::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_RebuildRUVModelPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RebuildRUVModel(threadCnt, ramMb, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RebuildRUVModel(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RebuildRUVModel(::Ice::Int, ::Ice::Long, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RebuildRUVModel(::Ice::Int, ::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetConditionIdxs(const ::iBS::IntVec& observerIDs, ::iBS::IntVec& conditionIdxs)
    {
        return GetConditionIdxs(observerIDs, conditionIdxs, 0);
    }
    ::Ice::Int GetConditionIdxs(const ::iBS::IntVec& observerIDs, ::iBS::IntVec& conditionIdxs, const ::Ice::Context& __ctx)
    {
        return GetConditionIdxs(observerIDs, conditionIdxs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetConditionIdxs(observerIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetConditionIdxs(observerIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetConditionIdxs(observerIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetConditionIdxs(observerIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVec conditionIdxs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetConditionIdxs(conditionIdxs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, conditionIdxs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVec&)> _response;
        };
        return begin_GetConditionIdxs(observerIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs)
    {
        return begin_GetConditionIdxs(observerIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx)
    {
        return begin_GetConditionIdxs(observerIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionIdxs(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionIdxs(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::iBS::Callback_FcdcRUVService_GetConditionIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionIdxs(observerIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec& observerIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetConditionIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionIdxs(observerIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetConditionIdxs(::iBS::IntVec& conditionIdxs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetConditionIdxs(const ::iBS::IntVec&, ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetConditionIdxs(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec& conditions)
    {
        return GetConditionInfos(conditions, 0);
    }
    ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec& conditions, const ::Ice::Context& __ctx)
    {
        return GetConditionInfos(conditions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetConditionInfos(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ConditionInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetConditionInfos(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionInfos(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetConditionInfos(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionInfos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ConditionInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetConditionInfos(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetConditionInfos(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetConditionInfos(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetConditionInfos(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::ConditionInfoVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::ConditionInfoVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::ConditionInfoVec conditions;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetConditionInfos(conditions, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, conditions);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::ConditionInfoVec&)> _response;
        };
        return begin_GetConditionInfos(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetConditionInfos()
    {
        return begin_GetConditionInfos(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::Ice::Context& __ctx)
    {
        return begin_GetConditionInfos(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionInfos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionInfos(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::iBS::Callback_FcdcRUVService_GetConditionInfosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionInfos(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetConditionInfosPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetConditionInfos(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetConditionInfos(::iBS::ConditionInfoVec& conditions, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetConditionInfos(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, ::iBS::IntVecVec& groupSampleIDs)
    {
        return GetSamplesInGroups(sampleIDs, groupSampleIDs, 0);
    }
    ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, ::iBS::IntVecVec& groupSampleIDs, const ::Ice::Context& __ctx)
    {
        return GetSamplesInGroups(sampleIDs, groupSampleIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSamplesInGroups(sampleIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSamplesInGroups(sampleIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetSamplesInGroups(sampleIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetSamplesInGroups(sampleIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::IntVecVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::IntVecVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::IntVecVec groupSampleIDs;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetSamplesInGroups(groupSampleIDs, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, groupSampleIDs);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::IntVecVec&)> _response;
        };
        return begin_GetSamplesInGroups(sampleIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs)
    {
        return begin_GetSamplesInGroups(sampleIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx)
    {
        return begin_GetSamplesInGroups(sampleIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSamplesInGroups(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSamplesInGroups(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::iBS::Callback_FcdcRUVService_GetSamplesInGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSamplesInGroups(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetSamplesInGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetSamplesInGroups(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetSamplesInGroups(::iBS::IntVecVec& groupSampleIDs, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec&, ::iBS::IntVecVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetSamplesInGroups(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetG(::iBS::DoubleVec& values)
    {
        return GetG(values, 0);
    }
    ::Ice::Int GetG(::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetG(values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetG(const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetG(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetG(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetG(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetG(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetG(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetG(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetG(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetG(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetG(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_GetG(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetG()
    {
        return begin_GetG(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetG(const ::Ice::Context& __ctx)
    {
        return begin_GetG(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetG(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetG(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetG(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetG(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetG(const ::iBS::Callback_FcdcRUVService_GetGPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetG(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetG(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetGPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetG(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetG(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetG(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetG(::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetG(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetWt(::iBS::DoubleVec& values)
    {
        return GetWt(values, 0);
    }
    ::Ice::Int GetWt(::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetWt(values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetWt(const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetWt(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetWt(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetWt(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetWt(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetWt(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetWt(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetWt(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetWt(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
                ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
                ::Ice::Int __ret;
                try
                {
                    __proxy->___end_GetWt(___values, __ret, __result);
                    values = ___values.second;
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&)> _response;
        };
        return begin_GetWt(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetWt()
    {
        return begin_GetWt(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetWt(const ::Ice::Context& __ctx)
    {
        return begin_GetWt(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetWt(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetWt(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetWt(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetWt(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetWt(const ::iBS::Callback_FcdcRUVService_GetWtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetWt(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetWt(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetWtPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetWt(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetWt(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);

     void ___end_GetWt(::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> >& values, ::Ice::Int& __ret, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetWt(::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetWt(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetEigenVals(::iBS::DoubleVec& values)
    {
        return GetEigenVals(values, 0);
    }
    ::Ice::Int GetEigenVals(::iBS::DoubleVec& values, const ::Ice::Context& __ctx)
    {
        return GetEigenVals(values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetEigenVals(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEigenVals(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEigenVals(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEigenVals(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetEigenVals(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetEigenVals(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetEigenVals(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetEigenVals(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetEigenVals(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::DoubleVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::DoubleVec values;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetEigenVals(values, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, values);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::DoubleVec&)> _response;
        };
        return begin_GetEigenVals(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetEigenVals()
    {
        return begin_GetEigenVals(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::Ice::Context& __ctx)
    {
        return begin_GetEigenVals(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEigenVals(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEigenVals(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::iBS::Callback_FcdcRUVService_GetEigenValsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEigenVals(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_GetEigenValsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetEigenVals(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetEigenVals(::iBS::DoubleVec& values, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetEigenVals(::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetEigenVals(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SelectKByEigenVals(::Ice::Double minFraction, ::Ice::Int& k, ::iBS::DoubleVec& fractions)
    {
        return SelectKByEigenVals(minFraction, k, fractions, 0);
    }
    ::Ice::Int SelectKByEigenVals(::Ice::Double minFraction, ::Ice::Int& k, ::iBS::DoubleVec& fractions, const ::Ice::Context& __ctx)
    {
        return SelectKByEigenVals(minFraction, k, fractions, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SelectKByEigenVals(::Ice::Double minFraction, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectKByEigenVals(minFraction, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectKByEigenVals(::Ice::Double minFraction, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectKByEigenVals(minFraction, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SelectKByEigenVals(minFraction, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SelectKByEigenVals(minFraction, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int k;
                ::iBS::DoubleVec fractions;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SelectKByEigenVals(k, fractions, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, k, fractions);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&)> _response;
        };
        return begin_SelectKByEigenVals(minFraction, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction)
    {
        return begin_SelectKByEigenVals(minFraction, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context& __ctx)
    {
        return begin_SelectKByEigenVals(minFraction, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectKByEigenVals(minFraction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectKByEigenVals(minFraction, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction, const ::iBS::Callback_FcdcRUVService_SelectKByEigenValsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectKByEigenVals(minFraction, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double minFraction, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SelectKByEigenValsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SelectKByEigenVals(minFraction, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SelectKByEigenVals(::Ice::Int& k, ::iBS::DoubleVec& fractions, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SelectKByEigenVals(::Ice::Double, ::Ice::Int&, ::iBS::DoubleVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SelectKByEigenVals(::Ice::Double, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, ::iBS::RUVVarDecomposeInfoVec& vds, ::Ice::Long& taskID)
    {
        return DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, vds, taskID, 0);
    }
    ::Ice::Int DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, ::iBS::RUVVarDecomposeInfoVec& vds, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, vds, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::RUVVarDecomposeInfoVec vds;
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_DecomposeVariance(vds, taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, vds, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long)> _response;
        };
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context& __ctx)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::iBS::Callback_FcdcRUVService_DecomposeVariancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec& ks, const ::iBS::IntVec& extWs, const ::iBS::IntVecVec& wtVecIdxs, ::Ice::Long featureIdxFrom, ::Ice::Long featureIdxTo, ::Ice::Int threadCnt, ::Ice::Long ramMb, const ::std::string& outfile, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_DecomposeVariancePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DecomposeVariance(ks, extWs, wtVecIdxs, featureIdxFrom, featureIdxTo, threadCnt, ramMb, outfile, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_DecomposeVariance(::iBS::RUVVarDecomposeInfoVec& vds, ::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int DecomposeVariance(const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DecomposeVariance(const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs)
    {
        return SetWtVectorIdxs(vecIdxs, 0);
    }
    ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx)
    {
        return SetWtVectorIdxs(vecIdxs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetWtVectorIdxs(vecIdxs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetWtVectorIdxs(vecIdxs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetWtVectorIdxs(vecIdxs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetWtVectorIdxs(vecIdxs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetWtVectorIdxs(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetWtVectorIdxs(vecIdxs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs)
    {
        return begin_SetWtVectorIdxs(vecIdxs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx)
    {
        return begin_SetWtVectorIdxs(vecIdxs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetWtVectorIdxs(vecIdxs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetWtVectorIdxs(vecIdxs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::iBS::Callback_FcdcRUVService_SetWtVectorIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetWtVectorIdxs(vecIdxs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec& vecIdxs, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcRUVService_SetWtVectorIdxsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetWtVectorIdxs(vecIdxs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetWtVectorIdxs(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_secure(bool __secure) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_twoway() const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_oneway() const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_batchOneway() const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_datagram() const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_batchDatagram() const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_compress(bool __compress) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcRUVService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FcdcRUVService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class BigMatrixService : virtual public ::IceProxy::iBS::FcdcReadService
{
public:

    ::Ice::Int SetOutputSamples(const ::iBS::IntVec& sampleIDs)
    {
        return SetOutputSamples(sampleIDs, 0);
    }
    ::Ice::Int SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx)
    {
        return SetOutputSamples(sampleIDs, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputSamples(sampleIDs, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputSamples(sampleIDs, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetOutputSamples(sampleIDs, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetOutputSamples(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetOutputSamples(sampleIDs, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs)
    {
        return begin_SetOutputSamples(sampleIDs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::iBS::Callback_BigMatrixService_SetOutputSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec& sampleIDs, const ::Ice::Context& __ctx, const ::iBS::Callback_BigMatrixService_SetOutputSamplesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetOutputSamples(sampleIDs, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetOutputSamples(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum rowAdjust)
    {
        return SetRowAdjust(rowAdjust, 0);
    }
    ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx)
    {
        return SetRowAdjust(rowAdjust, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRowAdjust(rowAdjust, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRowAdjust(rowAdjust, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRowAdjust(rowAdjust, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRowAdjust(rowAdjust, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetRowAdjust(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetRowAdjust(rowAdjust, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust)
    {
        return begin_SetRowAdjust(rowAdjust, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx)
    {
        return begin_SetRowAdjust(rowAdjust, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRowAdjust(rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRowAdjust(rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::iBS::Callback_BigMatrixService_SetRowAdjustPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRowAdjust(rowAdjust, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum rowAdjust, const ::Ice::Context& __ctx, const ::iBS::Callback_BigMatrixService_SetRowAdjustPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRowAdjust(rowAdjust, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetRowAdjust(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RecalculateObserverStats(::Ice::Long ramMb, ::Ice::Long& taskID)
    {
        return RecalculateObserverStats(ramMb, taskID, 0);
    }
    ::Ice::Int RecalculateObserverStats(::Ice::Long ramMb, ::Ice::Long& taskID, const ::Ice::Context& __ctx)
    {
        return RecalculateObserverStats(ramMb, taskID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(::Ice::Long ramMb, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverStats(ramMb, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(::Ice::Long ramMb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverStats(ramMb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RecalculateObserverStats(ramMb, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RecalculateObserverStats(ramMb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Long taskID;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RecalculateObserverStats(taskID, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, taskID);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, ::Ice::Long)> _response;
        };
        return begin_RecalculateObserverStats(ramMb, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb)
    {
        return begin_RecalculateObserverStats(ramMb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context& __ctx)
    {
        return begin_RecalculateObserverStats(ramMb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(ramMb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(ramMb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb, const ::iBS::Callback_BigMatrixService_RecalculateObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(ramMb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long ramMb, const ::Ice::Context& __ctx, const ::iBS::Callback_BigMatrixService_RecalculateObserverStatsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RecalculateObserverStats(ramMb, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RecalculateObserverStats(::Ice::Long& taskID, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RecalculateObserverStats(::Ice::Long, ::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RecalculateObserverStats(::Ice::Long, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_secure(bool __secure) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_twoway() const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_oneway() const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_batchOneway() const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_datagram() const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_batchDatagram() const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_compress(bool __compress) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<BigMatrixService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<BigMatrixService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FcdcFacetAdminService : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo& rfi)
    {
        return RqstNewRUVFacet(rfi, 0);
    }
    ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx)
    {
        return RqstNewRUVFacet(rfi, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RqstNewRUVFacet(const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewRUVFacet(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewRUVFacet(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewRUVFacet(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewRUVFacet(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RqstNewRUVFacet(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RqstNewRUVFacet(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RqstNewRUVFacet(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RqstNewRUVFacet(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::RUVFacetInfo rfi;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RqstNewRUVFacet(rfi, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, rfi);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)> _response;
        };
        return begin_RqstNewRUVFacet(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet()
    {
        return begin_RqstNewRUVFacet(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::Ice::Context& __ctx)
    {
        return begin_RqstNewRUVFacet(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewRUVFacet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewRUVFacet(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::iBS::Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewRUVFacet(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RqstNewRUVFacet(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_RqstNewRUVFacet(::iBS::RUVFacetInfo& rfi, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RqstNewRUVFacet(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int RemoveRUVFacet(::Ice::Int facetID)
    {
        return RemoveRUVFacet(facetID, 0);
    }
    ::Ice::Int RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx)
    {
        return RemoveRUVFacet(facetID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RemoveRUVFacet(::Ice::Int facetID, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RemoveRUVFacet(facetID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveRUVFacet(::Ice::Int facetID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RemoveRUVFacet(facetID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_RemoveRUVFacet(facetID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RemoveRUVFacet(facetID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_RemoveRUVFacet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_RemoveRUVFacet(facetID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID)
    {
        return begin_RemoveRUVFacet(facetID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx)
    {
        return begin_RemoveRUVFacet(facetID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveRUVFacet(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveRUVFacet(facetID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID, const ::iBS::Callback_FcdcFacetAdminService_RemoveRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveRUVFacet(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_RemoveRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RemoveRUVFacet(facetID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_RemoveRUVFacet(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int RemoveRUVFacet(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RemoveRUVFacet(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi)
    {
        return SetRUVFacetInfo(rfi, 0);
    }
    ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx)
    {
        return SetRUVFacetInfo(rfi, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRUVFacetInfo(rfi, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRUVFacetInfo(rfi, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_SetRUVFacetInfo(rfi, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SetRUVFacetInfo(rfi, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_SetRUVFacetInfo(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_SetRUVFacetInfo(rfi, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi)
    {
        return begin_SetRUVFacetInfo(rfi, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx)
    {
        return begin_SetRUVFacetInfo(rfi, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRUVFacetInfo(rfi, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRUVFacetInfo(rfi, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::iBS::Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRUVFacetInfo(rfi, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetRUVFacetInfo(rfi, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetRUVFacetInfo(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetRUVFacetInfo(::Ice::Int facetID, ::iBS::RUVFacetInfo& rfi)
    {
        return GetRUVFacetInfo(facetID, rfi, 0);
    }
    ::Ice::Int GetRUVFacetInfo(::Ice::Int facetID, ::iBS::RUVFacetInfo& rfi, const ::Ice::Context& __ctx)
    {
        return GetRUVFacetInfo(facetID, rfi, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetRUVFacetInfo(::Ice::Int facetID, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRUVFacetInfo(facetID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacetInfo(::Ice::Int facetID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRUVFacetInfo(facetID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRUVFacetInfo(facetID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRUVFacetInfo(facetID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::RUVFacetInfo rfi;
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_GetRUVFacetInfo(rfi, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, rfi);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int, const ::iBS::RUVFacetInfo&)> _response;
        };
        return begin_GetRUVFacetInfo(facetID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID)
    {
        return begin_GetRUVFacetInfo(facetID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context& __ctx)
    {
        return begin_GetRUVFacetInfo(facetID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacetInfo(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacetInfo(facetID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID, const ::iBS::Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacetInfo(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacetInfo(facetID, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetRUVFacetInfo(::iBS::RUVFacetInfo& rfi, const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetRUVFacetInfo(::Ice::Int, ::iBS::RUVFacetInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetRUVFacetInfo(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int facetID)
    {
        return GetRUVFacet(facetID, 0);
    }
    ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx)
    {
        return GetRUVFacet(facetID, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetRUVFacet(::Ice::Int facetID, const ::IceInternal::Function<void (const ::iBS::FcdcRUVServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRUVFacet(facetID, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacet(::Ice::Int facetID, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRUVFacet(facetID, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::iBS::FcdcRUVServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetRUVFacet(facetID, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetRUVFacet(facetID, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::iBS::FcdcRUVServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::iBS::FcdcRUVServicePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::FcdcRUVServicePrx __ret;
                try
                {
                    __ret = __proxy->end_GetRUVFacet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::iBS::FcdcRUVServicePrx&)> _response;
        };
        return begin_GetRUVFacet(facetID, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID)
    {
        return begin_GetRUVFacet(facetID, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx)
    {
        return begin_GetRUVFacet(facetID, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacet(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacet(facetID, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID, const ::iBS::Callback_FcdcFacetAdminService_GetRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacet(facetID, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int facetID, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_GetRUVFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetRUVFacet(facetID, &__ctx, __del, __cookie);
    }

    ::iBS::FcdcRUVServicePrx end_GetRUVFacet(const ::Ice::AsyncResultPtr&);
    
private:

    ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetRUVFacet(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int gid)
    {
        return GetBigMatrixFacet(gid, 0);
    }
    ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx)
    {
        return GetBigMatrixFacet(gid, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_GetBigMatrixFacet(::Ice::Int gid, const ::IceInternal::Function<void (const ::iBS::BigMatrixServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBigMatrixFacet(gid, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBigMatrixFacet(::Ice::Int gid, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBigMatrixFacet(gid, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::iBS::BigMatrixServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_GetBigMatrixFacet(gid, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_GetBigMatrixFacet(gid, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::iBS::BigMatrixServicePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::iBS::BigMatrixServicePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
                ::iBS::BigMatrixServicePrx __ret;
                try
                {
                    __ret = __proxy->end_GetBigMatrixFacet(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::iBS::BigMatrixServicePrx&)> _response;
        };
        return begin_GetBigMatrixFacet(gid, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid)
    {
        return begin_GetBigMatrixFacet(gid, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx)
    {
        return begin_GetBigMatrixFacet(gid, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBigMatrixFacet(gid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBigMatrixFacet(gid, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid, const ::iBS::Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBigMatrixFacet(gid, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int gid, const ::Ice::Context& __ctx, const ::iBS::Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetBigMatrixFacet(gid, &__ctx, __del, __cookie);
    }

    ::iBS::BigMatrixServicePrx end_GetBigMatrixFacet(const ::Ice::AsyncResultPtr&);
    
private:

    ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetBigMatrixFacet(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_secure(bool __secure) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_twoway() const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_oneway() const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_batchOneway() const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_datagram() const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_batchDatagram() const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_compress(bool __compress) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FcdcFacetAdminService> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FcdcFacetAdminService*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace iBS
{

class ProxyCentralService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int UnRegister(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int UnRegisterAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ListAll(::iBS::StringVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FcdcReadService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int GetFeatureDomains(const ::iBS::IntVec&, ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetFeatureObservers(const ::iBS::IntVec&, ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetObserverStats(::Ice::Int, ::iBS::ObserverStatsInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetObserversStats(const ::iBS::IntVec&, ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetRowMatrix(const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SampleRowMatrix(const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetObserverIndex(::Ice::Int, ::iBS::ObserverIndexInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetAMDTaskInfo(::Ice::Long, ::iBS::AMDTaskInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetFeatureValueStoreDir(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FcdcReadWriteService : virtual public ::IceDelegate::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetBytesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FcdcAdminService : virtual public ::IceDelegate::iBS::FcdcReadWriteService
{
public:

    virtual void Shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RqstNewFeatureDomainID(::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RqstNewFeatureObserverID(bool, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int, bool, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RecalculateObserverIndex(::Ice::Int, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FcdcRUVService : virtual public ::IceDelegate::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetActiveK(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetOutputWorkerNum(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RebuildRUVModel(::Ice::Int, ::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetConditionIdxs(const ::iBS::IntVec&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetG(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetWt(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetEigenVals(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SelectKByEigenVals(::Ice::Double, ::Ice::Int&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int DecomposeVariance(const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class BigMatrixService : virtual public ::IceDelegate::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RecalculateObserverStats(::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FcdcFacetAdminService : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int RemoveRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int GetRUVFacetInfo(::Ice::Int, ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace iBS
{

class ProxyCentralService : virtual public ::IceDelegate::iBS::ProxyCentralService,
                            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int UnRegister(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int UnRegisterAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ListAll(::iBS::StringVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcReadService : virtual public ::IceDelegate::iBS::FcdcReadService,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int GetFeatureDomains(const ::iBS::IntVec&, ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureObservers(const ::iBS::IntVec&, ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserverStats(::Ice::Int, ::iBS::ObserverStatsInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserversStats(const ::iBS::IntVec&, ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRowMatrix(const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SampleRowMatrix(const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserverIndex(::Ice::Int, ::iBS::ObserverIndexInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetAMDTaskInfo(::Ice::Long, ::iBS::AMDTaskInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureValueStoreDir(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcReadWriteService : virtual public ::IceDelegate::iBS::FcdcReadWriteService,
                             virtual public ::IceDelegateM::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetBytesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcAdminService : virtual public ::IceDelegate::iBS::FcdcAdminService,
                         virtual public ::IceDelegateM::iBS::FcdcReadWriteService
{
public:

    virtual void Shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureDomainID(::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureObserverID(bool, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int, bool, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverIndex(::Ice::Int, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcRUVService : virtual public ::IceDelegate::iBS::FcdcRUVService,
                       virtual public ::IceDelegateM::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetActiveK(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputWorkerNum(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RebuildRUVModel(::Ice::Int, ::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetConditionIdxs(const ::iBS::IntVec&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetG(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetWt(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetEigenVals(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SelectKByEigenVals(::Ice::Double, ::Ice::Int&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int DecomposeVariance(const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BigMatrixService : virtual public ::IceDelegate::iBS::BigMatrixService,
                         virtual public ::IceDelegateM::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverStats(::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcFacetAdminService : virtual public ::IceDelegate::iBS::FcdcFacetAdminService,
                              virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RemoveRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRUVFacetInfo(::Ice::Int, ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace iBS
{

class ProxyCentralService : virtual public ::IceDelegate::iBS::ProxyCentralService,
                            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int UnRegister(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int UnRegisterAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ListAll(::iBS::StringVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcReadService : virtual public ::IceDelegate::iBS::FcdcReadService,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int GetFeatureDomains(const ::iBS::IntVec&, ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureObservers(const ::iBS::IntVec&, ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserverStats(::Ice::Int, ::iBS::ObserverStatsInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserversStats(const ::iBS::IntVec&, ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRowMatrix(const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SampleRowMatrix(const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetObserverIndex(::Ice::Int, ::iBS::ObserverIndexInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureIdxsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureCntsByIntKeys(::Ice::Int, const ::iBS::IntVec&, ::iBS::LongVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetAMDTaskInfo(::Ice::Long, ::iBS::AMDTaskInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureValueStoreDir(::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int, ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcReadWriteService : virtual public ::IceDelegate::iBS::FcdcReadWriteService,
                             virtual public ::IceDelegateD::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetDoublesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetBytesColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetIntsColumnVector(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetDoublesRowMatrix(::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcAdminService : virtual public ::IceDelegate::iBS::FcdcAdminService,
                         virtual public ::IceDelegateD::iBS::FcdcReadWriteService
{
public:

    virtual void Shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureDomainID(::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureObserverID(bool, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int, bool, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ForceLoadInRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ForceLeaveRAM(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverStats(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverIndex(::Ice::Int, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RemoveFeatureObservers(const ::iBS::IntVec&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcRUVService : virtual public ::IceDelegate::iBS::FcdcRUVService,
                       virtual public ::IceDelegateD::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetActiveK(::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetOutputWorkerNum(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RebuildRUVModel(::Ice::Int, ::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetConditionIdxs(const ::iBS::IntVec&, ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec&, ::iBS::IntVecVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetG(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetWt(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetEigenVals(::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SelectKByEigenVals(::Ice::Double, ::Ice::Int&, ::iBS::DoubleVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int DecomposeVariance(const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class BigMatrixService : virtual public ::IceDelegate::iBS::BigMatrixService,
                         virtual public ::IceDelegateD::iBS::FcdcReadService
{
public:

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RecalculateObserverStats(::Ice::Long, ::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FcdcFacetAdminService : virtual public ::IceDelegate::iBS::FcdcFacetAdminService,
                              virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int RemoveRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int GetRUVFacetInfo(::Ice::Int, ::iBS::RUVFacetInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace iBS
{

class ProxyCentralService : virtual public ::Ice::Object
{
public:

    typedef ProxyCentralServicePrx ProxyType;
    typedef ProxyCentralServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int RegisterByCallerAdress(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterByCallerAdress(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RegisterByProxyStr(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterByProxyStr(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int UnRegister(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UnRegister(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int UnRegisterAll(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UnRegisterAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ListAll(::iBS::StringVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ListAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ProxyCentralService& l, const ProxyCentralService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ProxyCentralService& l, const ProxyCentralService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FcdcReadService : virtual public ::Ice::Object
{
public:

    typedef FcdcReadServicePrx ProxyType;
    typedef FcdcReadServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int GetFeatureDomains(const ::iBS::IntVec&, ::iBS::FeatureDomainInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetFeatureDomains(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetFeatureObservers(const ::iBS::IntVec&, ::iBS::FeatureObserverInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetFeatureObservers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetDoublesColumnVector_async(const ::iBS::AMD_FcdcReadService_GetDoublesColumnVectorPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetDoublesColumnVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetIntsColumnVector_async(const ::iBS::AMD_FcdcReadService_GetIntsColumnVectorPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetIntsColumnVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetDoublesRowMatrix_async(const ::iBS::AMD_FcdcReadService_GetDoublesRowMatrixPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetDoublesRowMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetObserverStats(::Ice::Int, ::iBS::ObserverStatsInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetObserverStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetObserversStats(const ::iBS::IntVec&, ::iBS::ObserverStatsInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetObserversStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetRowMatrix_async(const ::iBS::AMD_FcdcReadService_GetRowMatrixPtr&, const ::iBS::IntVec&, ::Ice::Long, ::Ice::Long, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetRowMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SampleRowMatrix_async(const ::iBS::AMD_FcdcReadService_SampleRowMatrixPtr&, const ::iBS::IntVec&, const ::iBS::LongVec&, const IceUtil::Optional< ::iBS::RowAdjustEnum>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SampleRowMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetObserverIndex(::Ice::Int, ::iBS::ObserverIndexInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetObserverIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void GetFeatureIdxsByIntKeys_async(const ::iBS::AMD_FcdcReadService_GetFeatureIdxsByIntKeysPtr&, ::Ice::Int, const ::iBS::IntVec&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___GetFeatureIdxsByIntKeys(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void GetFeatureCntsByIntKeys_async(const ::iBS::AMD_FcdcReadService_GetFeatureCntsByIntKeysPtr&, ::Ice::Int, const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___GetFeatureCntsByIntKeys(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int GetAMDTaskInfo(::Ice::Long, ::iBS::AMDTaskInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAMDTaskInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetFeatureValueStoreDir(::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetFeatureValueStoreDir(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetFeatureValuePathPrefix(::Ice::Int, ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetFeatureValuePathPrefix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FcdcReadService& l, const FcdcReadService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FcdcReadService& l, const FcdcReadService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FcdcReadWriteService : virtual public ::iBS::FcdcReadService
{
public:

    typedef FcdcReadWriteServicePrx ProxyType;
    typedef FcdcReadWriteServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int SetFeatureDomains(const ::iBS::FeatureDomainInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetFeatureDomains(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetFeatureObservers(const ::iBS::FeatureObserverInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetFeatureObservers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetDoublesColumnVector_async(const ::iBS::AMD_FcdcReadWriteService_SetDoublesColumnVectorPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetDoublesColumnVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetBytesColumnVector_async(const ::iBS::AMD_FcdcReadWriteService_SetBytesColumnVectorPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>&, ::iBS::ByteArrayContentEnum, ::iBS::ByteArrayEndianEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetBytesColumnVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetIntsColumnVector_async(const ::iBS::AMD_FcdcReadWriteService_SetIntsColumnVectorPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetIntsColumnVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetDoublesRowMatrix_async(const ::iBS::AMD_FcdcReadWriteService_SetDoublesRowMatrixPtr&, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetDoublesRowMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FcdcReadWriteService& l, const FcdcReadWriteService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FcdcReadWriteService& l, const FcdcReadWriteService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FcdcAdminService : virtual public ::iBS::FcdcReadWriteService
{
public:

    typedef FcdcAdminServicePrx ProxyType;
    typedef FcdcAdminServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void Shutdown(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Shutdown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RqstNewFeatureDomainID(::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RqstNewFeatureDomainID(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RqstNewFeatureObserverID(bool, ::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RqstNewFeatureObserverID(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RqstNewFeatureObserversInGroup(::Ice::Int, bool, ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RqstNewFeatureObserversInGroup(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AttachBigMatrix(::Ice::Int, ::Ice::Long, const ::iBS::StringVec&, const ::std::string&, ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AttachBigMatrix(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int AttachBigVector(::Ice::Long, const ::std::string&, const ::std::string&, ::Ice::Int&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AttachBigVector(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ForceLoadInRAM_async(const ::iBS::AMD_FcdcAdminService_ForceLoadInRAMPtr&, const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___ForceLoadInRAM(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void ForceLeaveRAM_async(const ::iBS::AMD_FcdcAdminService_ForceLeaveRAMPtr&, const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___ForceLeaveRAM(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void RecalculateObserverStats_async(const ::iBS::AMD_FcdcAdminService_RecalculateObserverStatsPtr&, const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RecalculateObserverStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RecalculateObserverIndex_async(const ::iBS::AMD_FcdcAdminService_RecalculateObserverIndexPtr&, ::Ice::Int, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RecalculateObserverIndex(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RemoveFeatureObservers_async(const ::iBS::AMD_FcdcAdminService_RemoveFeatureObserversPtr&, const ::iBS::IntVec&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RemoveFeatureObservers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetObserverStats(const ::iBS::ObserverStatsInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetObserverStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FcdcAdminService& l, const FcdcAdminService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FcdcAdminService& l, const FcdcAdminService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FcdcRUVService : virtual public ::iBS::FcdcReadService
{
public:

    typedef FcdcRUVServicePrx ProxyType;
    typedef FcdcRUVServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SetActiveK_async(const ::iBS::AMD_FcdcRUVService_SetActiveKPtr&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetActiveK(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetOutputMode(::iBS::RUVOutputModeEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetOutputMode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetOutputSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int ExcludeSamplesForGroupMean(const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ExcludeSamplesForGroupMean(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetOutputScale(::iBS::RUVOutputScaleEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetOutputScale(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetOutputWorkerNum(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetOutputWorkerNum(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetCtrlQuantileValues(::Ice::Double, const ::iBS::DoubleVec&, ::Ice::Double, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetCtrlQuantileValues(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RebuildRUVModel_async(const ::iBS::AMD_FcdcRUVService_RebuildRUVModelPtr&, ::Ice::Int, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RebuildRUVModel(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetConditionIdxs(const ::iBS::IntVec&, ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetConditionIdxs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetConditionInfos(::iBS::ConditionInfoVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetConditionInfos(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetSamplesInGroups(const ::iBS::IntVec&, ::iBS::IntVecVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetSamplesInGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetG(::iBS::DoubleVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetG(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetWt(::iBS::DoubleVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetWt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetEigenVals(::iBS::DoubleVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetEigenVals(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SelectKByEigenVals(::Ice::Double, ::Ice::Int&, ::iBS::DoubleVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SelectKByEigenVals(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void DecomposeVariance_async(const ::iBS::AMD_FcdcRUVService_DecomposeVariancePtr&, const ::iBS::IntVec&, const ::iBS::IntVec&, const ::iBS::IntVecVec&, ::Ice::Long, ::Ice::Long, ::Ice::Int, ::Ice::Long, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DecomposeVariance(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetWtVectorIdxs(const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetWtVectorIdxs(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FcdcRUVService& l, const FcdcRUVService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FcdcRUVService& l, const FcdcRUVService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class BigMatrixService : virtual public ::iBS::FcdcReadService
{
public:

    typedef BigMatrixServicePrx ProxyType;
    typedef BigMatrixServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int SetOutputSamples(const ::iBS::IntVec&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetOutputSamples(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetRowAdjust(::iBS::RowAdjustEnum, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRowAdjust(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RecalculateObserverStats_async(const ::iBS::AMD_BigMatrixService_RecalculateObserverStatsPtr&, ::Ice::Long, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RecalculateObserverStats(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const BigMatrixService& l, const BigMatrixService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BigMatrixService& l, const BigMatrixService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FcdcFacetAdminService : virtual public ::Ice::Object
{
public:

    typedef FcdcFacetAdminServicePrx ProxyType;
    typedef FcdcFacetAdminServicePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int RqstNewRUVFacet(::iBS::RUVFacetInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RqstNewRUVFacet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int RemoveRUVFacet(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RemoveRUVFacet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetRUVFacetInfo(const ::iBS::RUVFacetInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetRUVFacetInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetRUVFacetInfo(::Ice::Int, ::iBS::RUVFacetInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetRUVFacetInfo(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iBS::FcdcRUVServicePrx GetRUVFacet(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetRUVFacet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::iBS::BigMatrixServicePrx GetBigMatrixFacet(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetBigMatrixFacet(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FcdcFacetAdminService& l, const FcdcFacetAdminService& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FcdcFacetAdminService& l, const FcdcFacetAdminService& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace iBS
{

template<class T>
class CallbackNC_ProxyCentralService_RegisterByCallerAdress : public Callback_ProxyCentralService_RegisterByCallerAdress_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ProxyCentralService_RegisterByCallerAdress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterByCallerAdress(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ProxyCentralService_RegisterByCallerAdressPtr
newCallback_ProxyCentralService_RegisterByCallerAdress(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_RegisterByCallerAdress<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProxyCentralService_RegisterByCallerAdressPtr
newCallback_ProxyCentralService_RegisterByCallerAdress(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_RegisterByCallerAdress<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProxyCentralService_RegisterByCallerAdress : public Callback_ProxyCentralService_RegisterByCallerAdress_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ProxyCentralService_RegisterByCallerAdress(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterByCallerAdress(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ProxyCentralService_RegisterByCallerAdressPtr
newCallback_ProxyCentralService_RegisterByCallerAdress(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_RegisterByCallerAdress<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProxyCentralService_RegisterByCallerAdressPtr
newCallback_ProxyCentralService_RegisterByCallerAdress(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_RegisterByCallerAdress<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ProxyCentralService_RegisterByProxyStr : public Callback_ProxyCentralService_RegisterByProxyStr_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ProxyCentralService_RegisterByProxyStr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterByProxyStr(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ProxyCentralService_RegisterByProxyStrPtr
newCallback_ProxyCentralService_RegisterByProxyStr(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_RegisterByProxyStr<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProxyCentralService_RegisterByProxyStrPtr
newCallback_ProxyCentralService_RegisterByProxyStr(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_RegisterByProxyStr<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProxyCentralService_RegisterByProxyStr : public Callback_ProxyCentralService_RegisterByProxyStr_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ProxyCentralService_RegisterByProxyStr(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RegisterByProxyStr(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ProxyCentralService_RegisterByProxyStrPtr
newCallback_ProxyCentralService_RegisterByProxyStr(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_RegisterByProxyStr<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProxyCentralService_RegisterByProxyStrPtr
newCallback_ProxyCentralService_RegisterByProxyStr(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_RegisterByProxyStr<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ProxyCentralService_UnRegister : public Callback_ProxyCentralService_UnRegister_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ProxyCentralService_UnRegister(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_UnRegister(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ProxyCentralService_UnRegisterPtr
newCallback_ProxyCentralService_UnRegister(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_UnRegister<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProxyCentralService_UnRegisterPtr
newCallback_ProxyCentralService_UnRegister(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_UnRegister<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProxyCentralService_UnRegister : public Callback_ProxyCentralService_UnRegister_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ProxyCentralService_UnRegister(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_UnRegister(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ProxyCentralService_UnRegisterPtr
newCallback_ProxyCentralService_UnRegister(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_UnRegister<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProxyCentralService_UnRegisterPtr
newCallback_ProxyCentralService_UnRegister(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_UnRegister<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ProxyCentralService_UnRegisterAll : public Callback_ProxyCentralService_UnRegisterAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ProxyCentralService_UnRegisterAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_UnRegisterAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ProxyCentralService_UnRegisterAllPtr
newCallback_ProxyCentralService_UnRegisterAll(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_UnRegisterAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProxyCentralService_UnRegisterAllPtr
newCallback_ProxyCentralService_UnRegisterAll(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_UnRegisterAll<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProxyCentralService_UnRegisterAll : public Callback_ProxyCentralService_UnRegisterAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ProxyCentralService_UnRegisterAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_UnRegisterAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ProxyCentralService_UnRegisterAllPtr
newCallback_ProxyCentralService_UnRegisterAll(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_UnRegisterAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProxyCentralService_UnRegisterAllPtr
newCallback_ProxyCentralService_UnRegisterAll(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_UnRegisterAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ProxyCentralService_ListAll : public Callback_ProxyCentralService_ListAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::StringVec&);

    CallbackNC_ProxyCentralService_ListAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::StringVec proxyStrs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ListAll(proxyStrs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, proxyStrs);
        }
    }

    Response response;
};

template<class T> Callback_ProxyCentralService_ListAllPtr
newCallback_ProxyCentralService_ListAll(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_ListAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ProxyCentralService_ListAllPtr
newCallback_ProxyCentralService_ListAll(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ProxyCentralService_ListAll<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ProxyCentralService_ListAll : public Callback_ProxyCentralService_ListAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::StringVec&, const CT&);

    Callback_ProxyCentralService_ListAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::ProxyCentralServicePrx __proxy = ::iBS::ProxyCentralServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::StringVec proxyStrs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ListAll(proxyStrs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, proxyStrs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ProxyCentralService_ListAllPtr
newCallback_ProxyCentralService_ListAll(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_ListAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ProxyCentralService_ListAllPtr
newCallback_ProxyCentralService_ListAll(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::StringVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ProxyCentralService_ListAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureDomains : public Callback_FcdcReadService_GetFeatureDomains_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&);

    CallbackNC_FcdcReadService_GetFeatureDomains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FeatureDomainInfoVec domainInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureDomains(domainInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, domainInfos);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureDomainsPtr
newCallback_FcdcReadService_GetFeatureDomains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureDomains<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureDomainsPtr
newCallback_FcdcReadService_GetFeatureDomains(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureDomains<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureDomains : public Callback_FcdcReadService_GetFeatureDomains_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&, const CT&);

    Callback_FcdcReadService_GetFeatureDomains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FeatureDomainInfoVec domainInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureDomains(domainInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, domainInfos, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureDomainsPtr
newCallback_FcdcReadService_GetFeatureDomains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureDomains<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureDomainsPtr
newCallback_FcdcReadService_GetFeatureDomains(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureDomainInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureDomains<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureObservers : public Callback_FcdcReadService_GetFeatureObservers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&);

    CallbackNC_FcdcReadService_GetFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FeatureObserverInfoVec observerInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureObservers(observerInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, observerInfos);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureObserversPtr
newCallback_FcdcReadService_GetFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureObserversPtr
newCallback_FcdcReadService_GetFeatureObservers(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureObservers : public Callback_FcdcReadService_GetFeatureObservers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&, const CT&);

    Callback_FcdcReadService_GetFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FeatureObserverInfoVec observerInfos;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureObservers(observerInfos, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, observerInfos, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureObserversPtr
newCallback_FcdcReadService_GetFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureObserversPtr
newCallback_FcdcReadService_GetFeatureObservers(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::FeatureObserverInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetDoublesColumnVector : public Callback_FcdcReadService_GetDoublesColumnVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcReadService_GetDoublesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetDoublesColumnVector(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetDoublesColumnVectorPtr
newCallback_FcdcReadService_GetDoublesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetDoublesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetDoublesColumnVectorPtr
newCallback_FcdcReadService_GetDoublesColumnVector(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetDoublesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetDoublesColumnVector : public Callback_FcdcReadService_GetDoublesColumnVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcReadService_GetDoublesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetDoublesColumnVector(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetDoublesColumnVectorPtr
newCallback_FcdcReadService_GetDoublesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetDoublesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetDoublesColumnVectorPtr
newCallback_FcdcReadService_GetDoublesColumnVector(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetDoublesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetIntsColumnVector : public Callback_FcdcReadService_GetIntsColumnVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&);

    CallbackNC_FcdcReadService_GetIntsColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Int*, const ::Ice::Int*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetIntsColumnVector(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetIntsColumnVectorPtr
newCallback_FcdcReadService_GetIntsColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetIntsColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetIntsColumnVectorPtr
newCallback_FcdcReadService_GetIntsColumnVector(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetIntsColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetIntsColumnVector : public Callback_FcdcReadService_GetIntsColumnVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const CT&);

    Callback_FcdcReadService_GetIntsColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Int*, const ::Ice::Int*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Int>, ::std::pair<const  ::Ice::Int*, const  ::Ice::Int*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetIntsColumnVector(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetIntsColumnVectorPtr
newCallback_FcdcReadService_GetIntsColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetIntsColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetIntsColumnVectorPtr
newCallback_FcdcReadService_GetIntsColumnVector(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Int*, const ::Ice::Int*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetIntsColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetDoublesRowMatrix : public Callback_FcdcReadService_GetDoublesRowMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcReadService_GetDoublesRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetDoublesRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetDoublesRowMatrixPtr
newCallback_FcdcReadService_GetDoublesRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetDoublesRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetDoublesRowMatrixPtr
newCallback_FcdcReadService_GetDoublesRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetDoublesRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetDoublesRowMatrix : public Callback_FcdcReadService_GetDoublesRowMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcReadService_GetDoublesRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetDoublesRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetDoublesRowMatrixPtr
newCallback_FcdcReadService_GetDoublesRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetDoublesRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetDoublesRowMatrixPtr
newCallback_FcdcReadService_GetDoublesRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetDoublesRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetObserverStats : public Callback_FcdcReadService_GetObserverStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverStatsInfo&);

    CallbackNC_FcdcReadService_GetObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverStatsInfo stats;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserverStats(stats, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, stats);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetObserverStatsPtr
newCallback_FcdcReadService_GetObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetObserverStatsPtr
newCallback_FcdcReadService_GetObserverStats(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetObserverStats : public Callback_FcdcReadService_GetObserverStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverStatsInfo&, const CT&);

    Callback_FcdcReadService_GetObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverStatsInfo stats;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserverStats(stats, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, stats, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetObserverStatsPtr
newCallback_FcdcReadService_GetObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetObserverStatsPtr
newCallback_FcdcReadService_GetObserverStats(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetObserversStats : public Callback_FcdcReadService_GetObserversStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&);

    CallbackNC_FcdcReadService_GetObserversStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverStatsInfoVec observerStats;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserversStats(observerStats, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, observerStats);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetObserversStatsPtr
newCallback_FcdcReadService_GetObserversStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserversStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetObserversStatsPtr
newCallback_FcdcReadService_GetObserversStats(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserversStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetObserversStats : public Callback_FcdcReadService_GetObserversStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&, const CT&);

    Callback_FcdcReadService_GetObserversStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverStatsInfoVec observerStats;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserversStats(observerStats, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, observerStats, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetObserversStatsPtr
newCallback_FcdcReadService_GetObserversStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserversStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetObserversStatsPtr
newCallback_FcdcReadService_GetObserversStats(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverStatsInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserversStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetRowMatrix : public Callback_FcdcReadService_GetRowMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcReadService_GetRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetRowMatrixPtr
newCallback_FcdcReadService_GetRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetRowMatrixPtr
newCallback_FcdcReadService_GetRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetRowMatrix : public Callback_FcdcReadService_GetRowMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcReadService_GetRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetRowMatrixPtr
newCallback_FcdcReadService_GetRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetRowMatrixPtr
newCallback_FcdcReadService_GetRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_SampleRowMatrix : public Callback_FcdcReadService_SampleRowMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcReadService_SampleRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_SampleRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_SampleRowMatrixPtr
newCallback_FcdcReadService_SampleRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_SampleRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_SampleRowMatrixPtr
newCallback_FcdcReadService_SampleRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_SampleRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_SampleRowMatrix : public Callback_FcdcReadService_SampleRowMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcReadService_SampleRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_SampleRowMatrix(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_SampleRowMatrixPtr
newCallback_FcdcReadService_SampleRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_SampleRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_SampleRowMatrixPtr
newCallback_FcdcReadService_SampleRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_SampleRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetObserverIndex : public Callback_FcdcReadService_GetObserverIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverIndexInfo&);

    CallbackNC_FcdcReadService_GetObserverIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverIndexInfo oii;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserverIndex(oii, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, oii);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetObserverIndexPtr
newCallback_FcdcReadService_GetObserverIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverIndexInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserverIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetObserverIndexPtr
newCallback_FcdcReadService_GetObserverIndex(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverIndexInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetObserverIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetObserverIndex : public Callback_FcdcReadService_GetObserverIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ObserverIndexInfo&, const CT&);

    Callback_FcdcReadService_GetObserverIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ObserverIndexInfo oii;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetObserverIndex(oii, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, oii, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetObserverIndexPtr
newCallback_FcdcReadService_GetObserverIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverIndexInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserverIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetObserverIndexPtr
newCallback_FcdcReadService_GetObserverIndex(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ObserverIndexInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetObserverIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureIdxsByIntKeys : public Callback_FcdcReadService_GetFeatureIdxsByIntKeys_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&);

    CallbackNC_FcdcReadService_GetFeatureIdxsByIntKeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureIdxs;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureIdxs;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetFeatureIdxsByIntKeys(___featureIdxs, __ret, __result);
            featureIdxs = ___featureIdxs.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, featureIdxs);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureIdxsByIntKeys(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureIdxsByIntKeys<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureIdxsByIntKeys(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureIdxsByIntKeys<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureIdxsByIntKeys : public Callback_FcdcReadService_GetFeatureIdxsByIntKeys_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&);

    Callback_FcdcReadService_GetFeatureIdxsByIntKeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureIdxs;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureIdxs;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetFeatureIdxsByIntKeys(___featureIdxs, __ret, __result);
            featureIdxs = ___featureIdxs.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, featureIdxs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureIdxsByIntKeys(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureIdxsByIntKeys<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureIdxsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureIdxsByIntKeys(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureIdxsByIntKeys<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureCntsByIntKeys : public Callback_FcdcReadService_GetFeatureCntsByIntKeys_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&);

    CallbackNC_FcdcReadService_GetFeatureCntsByIntKeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureCnts;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureCnts;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetFeatureCntsByIntKeys(___featureCnts, __ret, __result);
            featureCnts = ___featureCnts.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, featureCnts);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureCntsByIntKeys(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureCntsByIntKeys<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureCntsByIntKeys(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureCntsByIntKeys<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureCntsByIntKeys : public Callback_FcdcReadService_GetFeatureCntsByIntKeys_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&);

    Callback_FcdcReadService_GetFeatureCntsByIntKeys(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Long*, const ::Ice::Long*> featureCnts;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Long>, ::std::pair<const  ::Ice::Long*, const  ::Ice::Long*> > ___featureCnts;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetFeatureCntsByIntKeys(___featureCnts, __ret, __result);
            featureCnts = ___featureCnts.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, featureCnts, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureCntsByIntKeys(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureCntsByIntKeys<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureCntsByIntKeysPtr
newCallback_FcdcReadService_GetFeatureCntsByIntKeys(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Long*, const ::Ice::Long*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureCntsByIntKeys<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetAMDTaskInfo : public Callback_FcdcReadService_GetAMDTaskInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::AMDTaskInfo&);

    CallbackNC_FcdcReadService_GetAMDTaskInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::AMDTaskInfo task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetAMDTaskInfo(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, task);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetAMDTaskInfoPtr
newCallback_FcdcReadService_GetAMDTaskInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::AMDTaskInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetAMDTaskInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetAMDTaskInfoPtr
newCallback_FcdcReadService_GetAMDTaskInfo(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::AMDTaskInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetAMDTaskInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetAMDTaskInfo : public Callback_FcdcReadService_GetAMDTaskInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::AMDTaskInfo&, const CT&);

    Callback_FcdcReadService_GetAMDTaskInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::AMDTaskInfo task;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetAMDTaskInfo(task, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, task, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetAMDTaskInfoPtr
newCallback_FcdcReadService_GetAMDTaskInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::AMDTaskInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetAMDTaskInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetAMDTaskInfoPtr
newCallback_FcdcReadService_GetAMDTaskInfo(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::AMDTaskInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetAMDTaskInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureValueStoreDir : public Callback_FcdcReadService_GetFeatureValueStoreDir_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&);

    CallbackNC_FcdcReadService_GetFeatureValueStoreDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::string rootDir;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureValueStoreDir(rootDir, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, rootDir);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureValueStoreDirPtr
newCallback_FcdcReadService_GetFeatureValueStoreDir(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureValueStoreDir<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureValueStoreDirPtr
newCallback_FcdcReadService_GetFeatureValueStoreDir(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureValueStoreDir<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureValueStoreDir : public Callback_FcdcReadService_GetFeatureValueStoreDir_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const CT&);

    Callback_FcdcReadService_GetFeatureValueStoreDir(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::string rootDir;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureValueStoreDir(rootDir, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, rootDir, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureValueStoreDirPtr
newCallback_FcdcReadService_GetFeatureValueStoreDir(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureValueStoreDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureValueStoreDirPtr
newCallback_FcdcReadService_GetFeatureValueStoreDir(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureValueStoreDir<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadService_GetFeatureValuePathPrefix : public Callback_FcdcReadService_GetFeatureValuePathPrefix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&);

    CallbackNC_FcdcReadService_GetFeatureValuePathPrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::string pathPrefix;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureValuePathPrefix(pathPrefix, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, pathPrefix);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadService_GetFeatureValuePathPrefixPtr
newCallback_FcdcReadService_GetFeatureValuePathPrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureValuePathPrefix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadService_GetFeatureValuePathPrefixPtr
newCallback_FcdcReadService_GetFeatureValuePathPrefix(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadService_GetFeatureValuePathPrefix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadService_GetFeatureValuePathPrefix : public Callback_FcdcReadService_GetFeatureValuePathPrefix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::string&, const CT&);

    Callback_FcdcReadService_GetFeatureValuePathPrefix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadServicePrx __proxy = ::iBS::FcdcReadServicePrx::uncheckedCast(__result->getProxy());
        ::std::string pathPrefix;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetFeatureValuePathPrefix(pathPrefix, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, pathPrefix, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadService_GetFeatureValuePathPrefixPtr
newCallback_FcdcReadService_GetFeatureValuePathPrefix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureValuePathPrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadService_GetFeatureValuePathPrefixPtr
newCallback_FcdcReadService_GetFeatureValuePathPrefix(T* instance, void (T::*cb)(::Ice::Int, const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadService_GetFeatureValuePathPrefix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetFeatureDomains : public Callback_FcdcReadWriteService_SetFeatureDomains_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetFeatureDomains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetFeatureDomains(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetFeatureDomainsPtr
newCallback_FcdcReadWriteService_SetFeatureDomains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetFeatureDomains<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetFeatureDomainsPtr
newCallback_FcdcReadWriteService_SetFeatureDomains(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetFeatureDomains<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetFeatureDomains : public Callback_FcdcReadWriteService_SetFeatureDomains_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetFeatureDomains(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetFeatureDomains(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetFeatureDomainsPtr
newCallback_FcdcReadWriteService_SetFeatureDomains(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetFeatureDomains<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetFeatureDomainsPtr
newCallback_FcdcReadWriteService_SetFeatureDomains(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetFeatureDomains<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetFeatureObservers : public Callback_FcdcReadWriteService_SetFeatureObservers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetFeatureObservers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetFeatureObserversPtr
newCallback_FcdcReadWriteService_SetFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetFeatureObserversPtr
newCallback_FcdcReadWriteService_SetFeatureObservers(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetFeatureObservers : public Callback_FcdcReadWriteService_SetFeatureObservers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetFeatureObservers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetFeatureObserversPtr
newCallback_FcdcReadWriteService_SetFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetFeatureObserversPtr
newCallback_FcdcReadWriteService_SetFeatureObservers(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetDoublesColumnVector : public Callback_FcdcReadWriteService_SetDoublesColumnVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetDoublesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetDoublesColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr
newCallback_FcdcReadWriteService_SetDoublesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetDoublesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr
newCallback_FcdcReadWriteService_SetDoublesColumnVector(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetDoublesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetDoublesColumnVector : public Callback_FcdcReadWriteService_SetDoublesColumnVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetDoublesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetDoublesColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr
newCallback_FcdcReadWriteService_SetDoublesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetDoublesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetDoublesColumnVectorPtr
newCallback_FcdcReadWriteService_SetDoublesColumnVector(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetDoublesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetBytesColumnVector : public Callback_FcdcReadWriteService_SetBytesColumnVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetBytesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetBytesColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetBytesColumnVectorPtr
newCallback_FcdcReadWriteService_SetBytesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetBytesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetBytesColumnVectorPtr
newCallback_FcdcReadWriteService_SetBytesColumnVector(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetBytesColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetBytesColumnVector : public Callback_FcdcReadWriteService_SetBytesColumnVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetBytesColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetBytesColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetBytesColumnVectorPtr
newCallback_FcdcReadWriteService_SetBytesColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetBytesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetBytesColumnVectorPtr
newCallback_FcdcReadWriteService_SetBytesColumnVector(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetBytesColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetIntsColumnVector : public Callback_FcdcReadWriteService_SetIntsColumnVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetIntsColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetIntsColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetIntsColumnVectorPtr
newCallback_FcdcReadWriteService_SetIntsColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetIntsColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetIntsColumnVectorPtr
newCallback_FcdcReadWriteService_SetIntsColumnVector(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetIntsColumnVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetIntsColumnVector : public Callback_FcdcReadWriteService_SetIntsColumnVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetIntsColumnVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetIntsColumnVector(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetIntsColumnVectorPtr
newCallback_FcdcReadWriteService_SetIntsColumnVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetIntsColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetIntsColumnVectorPtr
newCallback_FcdcReadWriteService_SetIntsColumnVector(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetIntsColumnVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcReadWriteService_SetDoublesRowMatrix : public Callback_FcdcReadWriteService_SetDoublesRowMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcReadWriteService_SetDoublesRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetDoublesRowMatrix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr
newCallback_FcdcReadWriteService_SetDoublesRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetDoublesRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr
newCallback_FcdcReadWriteService_SetDoublesRowMatrix(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcReadWriteService_SetDoublesRowMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcReadWriteService_SetDoublesRowMatrix : public Callback_FcdcReadWriteService_SetDoublesRowMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcReadWriteService_SetDoublesRowMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcReadWriteServicePrx __proxy = ::iBS::FcdcReadWriteServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetDoublesRowMatrix(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr
newCallback_FcdcReadWriteService_SetDoublesRowMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetDoublesRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcReadWriteService_SetDoublesRowMatrixPtr
newCallback_FcdcReadWriteService_SetDoublesRowMatrix(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcReadWriteService_SetDoublesRowMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_Shutdown : public Callback_FcdcAdminService_Shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_FcdcAdminService_Shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_Shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_Shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_Shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_Shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_Shutdown : public Callback_FcdcAdminService_Shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_FcdcAdminService_Shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_Shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_Shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_Shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_ShutdownPtr
newCallback_FcdcAdminService_Shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_Shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RqstNewFeatureDomainID : public Callback_FcdcAdminService_RqstNewFeatureDomainID_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int);

    CallbackNC_FcdcAdminService_RqstNewFeatureDomainID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int domainID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureDomainID(domainID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, domainID);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr
newCallback_FcdcAdminService_RqstNewFeatureDomainID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureDomainID<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr
newCallback_FcdcAdminService_RqstNewFeatureDomainID(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureDomainID<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RqstNewFeatureDomainID : public Callback_FcdcAdminService_RqstNewFeatureDomainID_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const CT&);

    Callback_FcdcAdminService_RqstNewFeatureDomainID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int domainID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureDomainID(domainID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, domainID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr
newCallback_FcdcAdminService_RqstNewFeatureDomainID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureDomainID<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureDomainIDPtr
newCallback_FcdcAdminService_RqstNewFeatureDomainID(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureDomainID<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RqstNewFeatureObserverID : public Callback_FcdcAdminService_RqstNewFeatureObserverID_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int);

    CallbackNC_FcdcAdminService_RqstNewFeatureObserverID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int observerID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureObserverID(observerID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, observerID);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr
newCallback_FcdcAdminService_RqstNewFeatureObserverID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureObserverID<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr
newCallback_FcdcAdminService_RqstNewFeatureObserverID(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureObserverID<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RqstNewFeatureObserverID : public Callback_FcdcAdminService_RqstNewFeatureObserverID_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const CT&);

    Callback_FcdcAdminService_RqstNewFeatureObserverID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int observerID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureObserverID(observerID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, observerID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr
newCallback_FcdcAdminService_RqstNewFeatureObserverID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureObserverID<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureObserverIDPtr
newCallback_FcdcAdminService_RqstNewFeatureObserverID(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureObserverID<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RqstNewFeatureObserversInGroup : public Callback_FcdcAdminService_RqstNewFeatureObserversInGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&);

    CallbackNC_FcdcAdminService_RqstNewFeatureObserversInGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec observerIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureObserversInGroup(observerIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, observerIDs);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr
newCallback_FcdcAdminService_RqstNewFeatureObserversInGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureObserversInGroup<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr
newCallback_FcdcAdminService_RqstNewFeatureObserversInGroup(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RqstNewFeatureObserversInGroup<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RqstNewFeatureObserversInGroup : public Callback_FcdcAdminService_RqstNewFeatureObserversInGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&, const CT&);

    Callback_FcdcAdminService_RqstNewFeatureObserversInGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec observerIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewFeatureObserversInGroup(observerIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, observerIDs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr
newCallback_FcdcAdminService_RqstNewFeatureObserversInGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureObserversInGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RqstNewFeatureObserversInGroupPtr
newCallback_FcdcAdminService_RqstNewFeatureObserversInGroup(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RqstNewFeatureObserversInGroup<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_AttachBigMatrix : public Callback_FcdcAdminService_AttachBigMatrix_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&);

    CallbackNC_FcdcAdminService_AttachBigMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec OIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AttachBigMatrix(OIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, OIDs);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_AttachBigMatrixPtr
newCallback_FcdcAdminService_AttachBigMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_AttachBigMatrix<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_AttachBigMatrixPtr
newCallback_FcdcAdminService_AttachBigMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_AttachBigMatrix<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_AttachBigMatrix : public Callback_FcdcAdminService_AttachBigMatrix_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&, const CT&);

    Callback_FcdcAdminService_AttachBigMatrix(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec OIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AttachBigMatrix(OIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, OIDs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_AttachBigMatrixPtr
newCallback_FcdcAdminService_AttachBigMatrix(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_AttachBigMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_AttachBigMatrixPtr
newCallback_FcdcAdminService_AttachBigMatrix(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_AttachBigMatrix<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_AttachBigVector : public Callback_FcdcAdminService_AttachBigVector_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int);

    CallbackNC_FcdcAdminService_AttachBigVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int OID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AttachBigVector(OID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, OID);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_AttachBigVectorPtr
newCallback_FcdcAdminService_AttachBigVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_AttachBigVector<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_AttachBigVectorPtr
newCallback_FcdcAdminService_AttachBigVector(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_AttachBigVector<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_AttachBigVector : public Callback_FcdcAdminService_AttachBigVector_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const CT&);

    Callback_FcdcAdminService_AttachBigVector(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int OID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_AttachBigVector(OID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, OID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_AttachBigVectorPtr
newCallback_FcdcAdminService_AttachBigVector(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_AttachBigVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_AttachBigVectorPtr
newCallback_FcdcAdminService_AttachBigVector(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_AttachBigVector<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_ForceLoadInRAM : public Callback_FcdcAdminService_ForceLoadInRAM_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_ForceLoadInRAM(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ForceLoadInRAM(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_ForceLoadInRAMPtr
newCallback_FcdcAdminService_ForceLoadInRAM(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_ForceLoadInRAM<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_ForceLoadInRAMPtr
newCallback_FcdcAdminService_ForceLoadInRAM(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_ForceLoadInRAM<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_ForceLoadInRAM : public Callback_FcdcAdminService_ForceLoadInRAM_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_ForceLoadInRAM(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ForceLoadInRAM(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_ForceLoadInRAMPtr
newCallback_FcdcAdminService_ForceLoadInRAM(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_ForceLoadInRAM<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_ForceLoadInRAMPtr
newCallback_FcdcAdminService_ForceLoadInRAM(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_ForceLoadInRAM<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_ForceLeaveRAM : public Callback_FcdcAdminService_ForceLeaveRAM_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_ForceLeaveRAM(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ForceLeaveRAM(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_ForceLeaveRAMPtr
newCallback_FcdcAdminService_ForceLeaveRAM(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_ForceLeaveRAM<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_ForceLeaveRAMPtr
newCallback_FcdcAdminService_ForceLeaveRAM(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_ForceLeaveRAM<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_ForceLeaveRAM : public Callback_FcdcAdminService_ForceLeaveRAM_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_ForceLeaveRAM(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ForceLeaveRAM(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_ForceLeaveRAMPtr
newCallback_FcdcAdminService_ForceLeaveRAM(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_ForceLeaveRAM<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_ForceLeaveRAMPtr
newCallback_FcdcAdminService_ForceLeaveRAM(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_ForceLeaveRAM<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RecalculateObserverStats : public Callback_FcdcAdminService_RecalculateObserverStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_RecalculateObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RecalculateObserverStatsPtr
newCallback_FcdcAdminService_RecalculateObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RecalculateObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RecalculateObserverStatsPtr
newCallback_FcdcAdminService_RecalculateObserverStats(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RecalculateObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RecalculateObserverStats : public Callback_FcdcAdminService_RecalculateObserverStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_RecalculateObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RecalculateObserverStatsPtr
newCallback_FcdcAdminService_RecalculateObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RecalculateObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RecalculateObserverStatsPtr
newCallback_FcdcAdminService_RecalculateObserverStats(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RecalculateObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RecalculateObserverIndex : public Callback_FcdcAdminService_RecalculateObserverIndex_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_RecalculateObserverIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RecalculateObserverIndexPtr
newCallback_FcdcAdminService_RecalculateObserverIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RecalculateObserverIndex<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RecalculateObserverIndexPtr
newCallback_FcdcAdminService_RecalculateObserverIndex(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RecalculateObserverIndex<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RecalculateObserverIndex : public Callback_FcdcAdminService_RecalculateObserverIndex_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_RecalculateObserverIndex(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverIndex(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RecalculateObserverIndexPtr
newCallback_FcdcAdminService_RecalculateObserverIndex(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RecalculateObserverIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RecalculateObserverIndexPtr
newCallback_FcdcAdminService_RecalculateObserverIndex(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RecalculateObserverIndex<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_RemoveFeatureObservers : public Callback_FcdcAdminService_RemoveFeatureObservers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_RemoveFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RemoveFeatureObservers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_RemoveFeatureObserversPtr
newCallback_FcdcAdminService_RemoveFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RemoveFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_RemoveFeatureObserversPtr
newCallback_FcdcAdminService_RemoveFeatureObservers(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_RemoveFeatureObservers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_RemoveFeatureObservers : public Callback_FcdcAdminService_RemoveFeatureObservers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_RemoveFeatureObservers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RemoveFeatureObservers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_RemoveFeatureObserversPtr
newCallback_FcdcAdminService_RemoveFeatureObservers(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RemoveFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_RemoveFeatureObserversPtr
newCallback_FcdcAdminService_RemoveFeatureObservers(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_RemoveFeatureObservers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcAdminService_SetObserverStats : public Callback_FcdcAdminService_SetObserverStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcAdminService_SetObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetObserverStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcAdminService_SetObserverStatsPtr
newCallback_FcdcAdminService_SetObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_SetObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcAdminService_SetObserverStatsPtr
newCallback_FcdcAdminService_SetObserverStats(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcAdminService_SetObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcAdminService_SetObserverStats : public Callback_FcdcAdminService_SetObserverStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcAdminService_SetObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcAdminServicePrx __proxy = ::iBS::FcdcAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetObserverStats(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcAdminService_SetObserverStatsPtr
newCallback_FcdcAdminService_SetObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_SetObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcAdminService_SetObserverStatsPtr
newCallback_FcdcAdminService_SetObserverStats(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcAdminService_SetObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetActiveK : public Callback_FcdcRUVService_SetActiveK_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetActiveK(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetActiveK(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetActiveKPtr
newCallback_FcdcRUVService_SetActiveK(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetActiveK<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetActiveKPtr
newCallback_FcdcRUVService_SetActiveK(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetActiveK<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetActiveK : public Callback_FcdcRUVService_SetActiveK_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetActiveK(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetActiveK(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetActiveKPtr
newCallback_FcdcRUVService_SetActiveK(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetActiveK<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetActiveKPtr
newCallback_FcdcRUVService_SetActiveK(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetActiveK<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetOutputMode : public Callback_FcdcRUVService_SetOutputMode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetOutputMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputMode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetOutputModePtr
newCallback_FcdcRUVService_SetOutputMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputMode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetOutputModePtr
newCallback_FcdcRUVService_SetOutputMode(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputMode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetOutputMode : public Callback_FcdcRUVService_SetOutputMode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetOutputMode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputMode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetOutputModePtr
newCallback_FcdcRUVService_SetOutputMode(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetOutputModePtr
newCallback_FcdcRUVService_SetOutputMode(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputMode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetOutputSamples : public Callback_FcdcRUVService_SetOutputSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetOutputSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetOutputSamplesPtr
newCallback_FcdcRUVService_SetOutputSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetOutputSamplesPtr
newCallback_FcdcRUVService_SetOutputSamples(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetOutputSamples : public Callback_FcdcRUVService_SetOutputSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetOutputSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetOutputSamplesPtr
newCallback_FcdcRUVService_SetOutputSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetOutputSamplesPtr
newCallback_FcdcRUVService_SetOutputSamples(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_ExcludeSamplesForGroupMean : public Callback_FcdcRUVService_ExcludeSamplesForGroupMean_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_ExcludeSamplesForGroupMean(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExcludeSamplesForGroupMean(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr
newCallback_FcdcRUVService_ExcludeSamplesForGroupMean(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_ExcludeSamplesForGroupMean<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr
newCallback_FcdcRUVService_ExcludeSamplesForGroupMean(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_ExcludeSamplesForGroupMean<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_ExcludeSamplesForGroupMean : public Callback_FcdcRUVService_ExcludeSamplesForGroupMean_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_ExcludeSamplesForGroupMean(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_ExcludeSamplesForGroupMean(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr
newCallback_FcdcRUVService_ExcludeSamplesForGroupMean(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_ExcludeSamplesForGroupMean<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_ExcludeSamplesForGroupMeanPtr
newCallback_FcdcRUVService_ExcludeSamplesForGroupMean(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_ExcludeSamplesForGroupMean<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetOutputScale : public Callback_FcdcRUVService_SetOutputScale_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetOutputScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetOutputScalePtr
newCallback_FcdcRUVService_SetOutputScale(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputScale<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetOutputScalePtr
newCallback_FcdcRUVService_SetOutputScale(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputScale<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetOutputScale : public Callback_FcdcRUVService_SetOutputScale_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetOutputScale(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputScale(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetOutputScalePtr
newCallback_FcdcRUVService_SetOutputScale(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetOutputScalePtr
newCallback_FcdcRUVService_SetOutputScale(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputScale<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetOutputWorkerNum : public Callback_FcdcRUVService_SetOutputWorkerNum_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetOutputWorkerNum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputWorkerNum(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetOutputWorkerNumPtr
newCallback_FcdcRUVService_SetOutputWorkerNum(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputWorkerNum<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetOutputWorkerNumPtr
newCallback_FcdcRUVService_SetOutputWorkerNum(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetOutputWorkerNum<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetOutputWorkerNum : public Callback_FcdcRUVService_SetOutputWorkerNum_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetOutputWorkerNum(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputWorkerNum(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetOutputWorkerNumPtr
newCallback_FcdcRUVService_SetOutputWorkerNum(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputWorkerNum<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetOutputWorkerNumPtr
newCallback_FcdcRUVService_SetOutputWorkerNum(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetOutputWorkerNum<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetCtrlQuantileValues : public Callback_FcdcRUVService_SetCtrlQuantileValues_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetCtrlQuantileValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetCtrlQuantileValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetCtrlQuantileValuesPtr
newCallback_FcdcRUVService_SetCtrlQuantileValues(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetCtrlQuantileValues<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetCtrlQuantileValuesPtr
newCallback_FcdcRUVService_SetCtrlQuantileValues(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetCtrlQuantileValues<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetCtrlQuantileValues : public Callback_FcdcRUVService_SetCtrlQuantileValues_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetCtrlQuantileValues(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetCtrlQuantileValues(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetCtrlQuantileValuesPtr
newCallback_FcdcRUVService_SetCtrlQuantileValues(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetCtrlQuantileValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetCtrlQuantileValuesPtr
newCallback_FcdcRUVService_SetCtrlQuantileValues(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetCtrlQuantileValues<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_RebuildRUVModel : public Callback_FcdcRUVService_RebuildRUVModel_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_FcdcRUVService_RebuildRUVModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RebuildRUVModel(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_RebuildRUVModelPtr
newCallback_FcdcRUVService_RebuildRUVModel(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_RebuildRUVModel<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_RebuildRUVModelPtr
newCallback_FcdcRUVService_RebuildRUVModel(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_RebuildRUVModel<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_RebuildRUVModel : public Callback_FcdcRUVService_RebuildRUVModel_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_FcdcRUVService_RebuildRUVModel(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RebuildRUVModel(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_RebuildRUVModelPtr
newCallback_FcdcRUVService_RebuildRUVModel(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_RebuildRUVModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_RebuildRUVModelPtr
newCallback_FcdcRUVService_RebuildRUVModel(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_RebuildRUVModel<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetConditionIdxs : public Callback_FcdcRUVService_GetConditionIdxs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&);

    CallbackNC_FcdcRUVService_GetConditionIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec conditionIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetConditionIdxs(conditionIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, conditionIdxs);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetConditionIdxsPtr
newCallback_FcdcRUVService_GetConditionIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetConditionIdxs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetConditionIdxsPtr
newCallback_FcdcRUVService_GetConditionIdxs(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetConditionIdxs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetConditionIdxs : public Callback_FcdcRUVService_GetConditionIdxs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVec&, const CT&);

    Callback_FcdcRUVService_GetConditionIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVec conditionIdxs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetConditionIdxs(conditionIdxs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, conditionIdxs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetConditionIdxsPtr
newCallback_FcdcRUVService_GetConditionIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetConditionIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetConditionIdxsPtr
newCallback_FcdcRUVService_GetConditionIdxs(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetConditionIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetConditionInfos : public Callback_FcdcRUVService_GetConditionInfos_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ConditionInfoVec&);

    CallbackNC_FcdcRUVService_GetConditionInfos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ConditionInfoVec conditions;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetConditionInfos(conditions, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, conditions);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetConditionInfosPtr
newCallback_FcdcRUVService_GetConditionInfos(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ConditionInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetConditionInfos<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetConditionInfosPtr
newCallback_FcdcRUVService_GetConditionInfos(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ConditionInfoVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetConditionInfos<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetConditionInfos : public Callback_FcdcRUVService_GetConditionInfos_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::ConditionInfoVec&, const CT&);

    Callback_FcdcRUVService_GetConditionInfos(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::ConditionInfoVec conditions;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetConditionInfos(conditions, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, conditions, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetConditionInfosPtr
newCallback_FcdcRUVService_GetConditionInfos(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::ConditionInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetConditionInfos<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetConditionInfosPtr
newCallback_FcdcRUVService_GetConditionInfos(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::ConditionInfoVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetConditionInfos<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetSamplesInGroups : public Callback_FcdcRUVService_GetSamplesInGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVecVec&);

    CallbackNC_FcdcRUVService_GetSamplesInGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVecVec groupSampleIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetSamplesInGroups(groupSampleIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, groupSampleIDs);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetSamplesInGroupsPtr
newCallback_FcdcRUVService_GetSamplesInGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetSamplesInGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetSamplesInGroupsPtr
newCallback_FcdcRUVService_GetSamplesInGroups(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetSamplesInGroups<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetSamplesInGroups : public Callback_FcdcRUVService_GetSamplesInGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::IntVecVec&, const CT&);

    Callback_FcdcRUVService_GetSamplesInGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::IntVecVec groupSampleIDs;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetSamplesInGroups(groupSampleIDs, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, groupSampleIDs, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetSamplesInGroupsPtr
newCallback_FcdcRUVService_GetSamplesInGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetSamplesInGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetSamplesInGroupsPtr
newCallback_FcdcRUVService_GetSamplesInGroups(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::IntVecVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetSamplesInGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetG : public Callback_FcdcRUVService_GetG_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcRUVService_GetG(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetG(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetGPtr
newCallback_FcdcRUVService_GetG(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetG<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetGPtr
newCallback_FcdcRUVService_GetG(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetG<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetG : public Callback_FcdcRUVService_GetG_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcRUVService_GetG(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetG(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetGPtr
newCallback_FcdcRUVService_GetG(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetG<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetGPtr
newCallback_FcdcRUVService_GetG(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetG<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetWt : public Callback_FcdcRUVService_GetWt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&);

    CallbackNC_FcdcRUVService_GetWt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetWt(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetWtPtr
newCallback_FcdcRUVService_GetWt(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetWt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetWtPtr
newCallback_FcdcRUVService_GetWt(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetWt<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetWt : public Callback_FcdcRUVService_GetWt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&);

    Callback_FcdcRUVService_GetWt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::std::pair<const ::Ice::Double*, const ::Ice::Double*> values;
        ::std::pair< ::IceUtil::ScopedArray< ::Ice::Double>, ::std::pair<const  ::Ice::Double*, const  ::Ice::Double*> > ___values;
        ::Ice::Int __ret;
        try
        {
            __proxy->___end_GetWt(___values, __ret, __result);
            values = ___values.second;
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetWtPtr
newCallback_FcdcRUVService_GetWt(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetWt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetWtPtr
newCallback_FcdcRUVService_GetWt(T* instance, void (T::*cb)(::Ice::Int, const ::std::pair<const ::Ice::Double*, const ::Ice::Double*>&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetWt<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_GetEigenVals : public Callback_FcdcRUVService_GetEigenVals_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::DoubleVec&);

    CallbackNC_FcdcRUVService_GetEigenVals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::DoubleVec values;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetEigenVals(values, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, values);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_GetEigenValsPtr
newCallback_FcdcRUVService_GetEigenVals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::DoubleVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetEigenVals<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_GetEigenValsPtr
newCallback_FcdcRUVService_GetEigenVals(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::DoubleVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_GetEigenVals<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_GetEigenVals : public Callback_FcdcRUVService_GetEigenVals_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::DoubleVec&, const CT&);

    Callback_FcdcRUVService_GetEigenVals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::DoubleVec values;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetEigenVals(values, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, values, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_GetEigenValsPtr
newCallback_FcdcRUVService_GetEigenVals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::DoubleVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetEigenVals<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_GetEigenValsPtr
newCallback_FcdcRUVService_GetEigenVals(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::DoubleVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_GetEigenVals<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SelectKByEigenVals : public Callback_FcdcRUVService_SelectKByEigenVals_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&);

    CallbackNC_FcdcRUVService_SelectKByEigenVals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int k;
        ::iBS::DoubleVec fractions;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SelectKByEigenVals(k, fractions, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, k, fractions);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SelectKByEigenValsPtr
newCallback_FcdcRUVService_SelectKByEigenVals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SelectKByEigenVals<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SelectKByEigenValsPtr
newCallback_FcdcRUVService_SelectKByEigenVals(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SelectKByEigenVals<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SelectKByEigenVals : public Callback_FcdcRUVService_SelectKByEigenVals_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&, const CT&);

    Callback_FcdcRUVService_SelectKByEigenVals(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int k;
        ::iBS::DoubleVec fractions;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SelectKByEigenVals(k, fractions, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, k, fractions, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SelectKByEigenValsPtr
newCallback_FcdcRUVService_SelectKByEigenVals(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SelectKByEigenVals<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SelectKByEigenValsPtr
newCallback_FcdcRUVService_SelectKByEigenVals(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, const ::iBS::DoubleVec&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SelectKByEigenVals<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_DecomposeVariance : public Callback_FcdcRUVService_DecomposeVariance_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long);

    CallbackNC_FcdcRUVService_DecomposeVariance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVVarDecomposeInfoVec vds;
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DecomposeVariance(vds, taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, vds, taskID);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_DecomposeVariancePtr
newCallback_FcdcRUVService_DecomposeVariance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_DecomposeVariance<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_DecomposeVariancePtr
newCallback_FcdcRUVService_DecomposeVariance(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_DecomposeVariance<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_DecomposeVariance : public Callback_FcdcRUVService_DecomposeVariance_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long, const CT&);

    Callback_FcdcRUVService_DecomposeVariance(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVVarDecomposeInfoVec vds;
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DecomposeVariance(vds, taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, vds, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_DecomposeVariancePtr
newCallback_FcdcRUVService_DecomposeVariance(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_DecomposeVariance<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_DecomposeVariancePtr
newCallback_FcdcRUVService_DecomposeVariance(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVVarDecomposeInfoVec&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_DecomposeVariance<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcRUVService_SetWtVectorIdxs : public Callback_FcdcRUVService_SetWtVectorIdxs_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcRUVService_SetWtVectorIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetWtVectorIdxs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcRUVService_SetWtVectorIdxsPtr
newCallback_FcdcRUVService_SetWtVectorIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetWtVectorIdxs<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcRUVService_SetWtVectorIdxsPtr
newCallback_FcdcRUVService_SetWtVectorIdxs(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcRUVService_SetWtVectorIdxs<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcRUVService_SetWtVectorIdxs : public Callback_FcdcRUVService_SetWtVectorIdxs_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcRUVService_SetWtVectorIdxs(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcRUVServicePrx __proxy = ::iBS::FcdcRUVServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetWtVectorIdxs(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcRUVService_SetWtVectorIdxsPtr
newCallback_FcdcRUVService_SetWtVectorIdxs(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetWtVectorIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcRUVService_SetWtVectorIdxsPtr
newCallback_FcdcRUVService_SetWtVectorIdxs(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcRUVService_SetWtVectorIdxs<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BigMatrixService_SetOutputSamples : public Callback_BigMatrixService_SetOutputSamples_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_BigMatrixService_SetOutputSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_BigMatrixService_SetOutputSamplesPtr
newCallback_BigMatrixService_SetOutputSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_SetOutputSamples<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BigMatrixService_SetOutputSamplesPtr
newCallback_BigMatrixService_SetOutputSamples(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_SetOutputSamples<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BigMatrixService_SetOutputSamples : public Callback_BigMatrixService_SetOutputSamples_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_BigMatrixService_SetOutputSamples(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetOutputSamples(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BigMatrixService_SetOutputSamplesPtr
newCallback_BigMatrixService_SetOutputSamples(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_SetOutputSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BigMatrixService_SetOutputSamplesPtr
newCallback_BigMatrixService_SetOutputSamples(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_SetOutputSamples<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BigMatrixService_SetRowAdjust : public Callback_BigMatrixService_SetRowAdjust_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_BigMatrixService_SetRowAdjust(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRowAdjust(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_BigMatrixService_SetRowAdjustPtr
newCallback_BigMatrixService_SetRowAdjust(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_SetRowAdjust<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BigMatrixService_SetRowAdjustPtr
newCallback_BigMatrixService_SetRowAdjust(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_SetRowAdjust<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BigMatrixService_SetRowAdjust : public Callback_BigMatrixService_SetRowAdjust_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_BigMatrixService_SetRowAdjust(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRowAdjust(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BigMatrixService_SetRowAdjustPtr
newCallback_BigMatrixService_SetRowAdjust(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_SetRowAdjust<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BigMatrixService_SetRowAdjustPtr
newCallback_BigMatrixService_SetRowAdjust(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_SetRowAdjust<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_BigMatrixService_RecalculateObserverStats : public Callback_BigMatrixService_RecalculateObserverStats_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long);

    CallbackNC_BigMatrixService_RecalculateObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverStats(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, taskID);
        }
    }

    Response response;
};

template<class T> Callback_BigMatrixService_RecalculateObserverStatsPtr
newCallback_BigMatrixService_RecalculateObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_RecalculateObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BigMatrixService_RecalculateObserverStatsPtr
newCallback_BigMatrixService_RecalculateObserverStats(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BigMatrixService_RecalculateObserverStats<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_BigMatrixService_RecalculateObserverStats : public Callback_BigMatrixService_RecalculateObserverStats_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Long, const CT&);

    Callback_BigMatrixService_RecalculateObserverStats(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::BigMatrixServicePrx __proxy = ::iBS::BigMatrixServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Long taskID;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RecalculateObserverStats(taskID, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, taskID, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BigMatrixService_RecalculateObserverStatsPtr
newCallback_BigMatrixService_RecalculateObserverStats(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_RecalculateObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BigMatrixService_RecalculateObserverStatsPtr
newCallback_BigMatrixService_RecalculateObserverStats(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BigMatrixService_RecalculateObserverStats<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_RqstNewRUVFacet : public Callback_FcdcFacetAdminService_RqstNewRUVFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVFacetInfo&);

    CallbackNC_FcdcFacetAdminService_RqstNewRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVFacetInfo rfi;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewRUVFacet(rfi, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, rfi);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr
newCallback_FcdcFacetAdminService_RqstNewRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_RqstNewRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr
newCallback_FcdcFacetAdminService_RqstNewRUVFacet(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_RqstNewRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_RqstNewRUVFacet : public Callback_FcdcFacetAdminService_RqstNewRUVFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&);

    Callback_FcdcFacetAdminService_RqstNewRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVFacetInfo rfi;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RqstNewRUVFacet(rfi, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, rfi, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr
newCallback_FcdcFacetAdminService_RqstNewRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_RqstNewRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_RqstNewRUVFacetPtr
newCallback_FcdcFacetAdminService_RqstNewRUVFacet(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_RqstNewRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_RemoveRUVFacet : public Callback_FcdcFacetAdminService_RemoveRUVFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcFacetAdminService_RemoveRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RemoveRUVFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_RemoveRUVFacetPtr
newCallback_FcdcFacetAdminService_RemoveRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_RemoveRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_RemoveRUVFacetPtr
newCallback_FcdcFacetAdminService_RemoveRUVFacet(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_RemoveRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_RemoveRUVFacet : public Callback_FcdcFacetAdminService_RemoveRUVFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcFacetAdminService_RemoveRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_RemoveRUVFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_RemoveRUVFacetPtr
newCallback_FcdcFacetAdminService_RemoveRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_RemoveRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_RemoveRUVFacetPtr
newCallback_FcdcFacetAdminService_RemoveRUVFacet(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_RemoveRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_SetRUVFacetInfo : public Callback_FcdcFacetAdminService_SetRUVFacetInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_FcdcFacetAdminService_SetRUVFacetInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRUVFacetInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_SetRUVFacetInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_SetRUVFacetInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_SetRUVFacetInfo(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_SetRUVFacetInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_SetRUVFacetInfo : public Callback_FcdcFacetAdminService_SetRUVFacetInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_FcdcFacetAdminService_SetRUVFacetInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetRUVFacetInfo(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_SetRUVFacetInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_SetRUVFacetInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_SetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_SetRUVFacetInfo(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_SetRUVFacetInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_GetRUVFacetInfo : public Callback_FcdcFacetAdminService_GetRUVFacetInfo_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVFacetInfo&);

    CallbackNC_FcdcFacetAdminService_GetRUVFacetInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVFacetInfo rfi;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRUVFacetInfo(rfi, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, rfi);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_GetRUVFacetInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetRUVFacetInfo<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_GetRUVFacetInfo(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetRUVFacetInfo<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_GetRUVFacetInfo : public Callback_FcdcFacetAdminService_GetRUVFacetInfo_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&);

    Callback_FcdcFacetAdminService_GetRUVFacetInfo(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::RUVFacetInfo rfi;
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetRUVFacetInfo(rfi, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, rfi, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_GetRUVFacetInfo(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetRUVFacetInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_GetRUVFacetInfoPtr
newCallback_FcdcFacetAdminService_GetRUVFacetInfo(T* instance, void (T::*cb)(::Ice::Int, const ::iBS::RUVFacetInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetRUVFacetInfo<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_GetRUVFacet : public Callback_FcdcFacetAdminService_GetRUVFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iBS::FcdcRUVServicePrx&);

    CallbackNC_FcdcFacetAdminService_GetRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FcdcRUVServicePrx __ret;
        try
        {
            __ret = __proxy->end_GetRUVFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_GetRUVFacetPtr
newCallback_FcdcFacetAdminService_GetRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::FcdcRUVServicePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_GetRUVFacetPtr
newCallback_FcdcFacetAdminService_GetRUVFacet(T* instance, void (T::*cb)(const ::iBS::FcdcRUVServicePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetRUVFacet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_GetRUVFacet : public Callback_FcdcFacetAdminService_GetRUVFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iBS::FcdcRUVServicePrx&, const CT&);

    Callback_FcdcFacetAdminService_GetRUVFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::FcdcRUVServicePrx __ret;
        try
        {
            __ret = __proxy->end_GetRUVFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_GetRUVFacetPtr
newCallback_FcdcFacetAdminService_GetRUVFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::FcdcRUVServicePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_GetRUVFacetPtr
newCallback_FcdcFacetAdminService_GetRUVFacet(T* instance, void (T::*cb)(const ::iBS::FcdcRUVServicePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetRUVFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FcdcFacetAdminService_GetBigMatrixFacet : public Callback_FcdcFacetAdminService_GetBigMatrixFacet_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::iBS::BigMatrixServicePrx&);

    CallbackNC_FcdcFacetAdminService_GetBigMatrixFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BigMatrixServicePrx __ret;
        try
        {
            __ret = __proxy->end_GetBigMatrixFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr
newCallback_FcdcFacetAdminService_GetBigMatrixFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BigMatrixServicePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetBigMatrixFacet<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr
newCallback_FcdcFacetAdminService_GetBigMatrixFacet(T* instance, void (T::*cb)(const ::iBS::BigMatrixServicePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FcdcFacetAdminService_GetBigMatrixFacet<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FcdcFacetAdminService_GetBigMatrixFacet : public Callback_FcdcFacetAdminService_GetBigMatrixFacet_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::iBS::BigMatrixServicePrx&, const CT&);

    Callback_FcdcFacetAdminService_GetBigMatrixFacet(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::iBS::FcdcFacetAdminServicePrx __proxy = ::iBS::FcdcFacetAdminServicePrx::uncheckedCast(__result->getProxy());
        ::iBS::BigMatrixServicePrx __ret;
        try
        {
            __ret = __proxy->end_GetBigMatrixFacet(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr
newCallback_FcdcFacetAdminService_GetBigMatrixFacet(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::iBS::BigMatrixServicePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetBigMatrixFacet<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FcdcFacetAdminService_GetBigMatrixFacetPtr
newCallback_FcdcFacetAdminService_GetBigMatrixFacet(T* instance, void (T::*cb)(const ::iBS::BigMatrixServicePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FcdcFacetAdminService_GetBigMatrixFacet<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
