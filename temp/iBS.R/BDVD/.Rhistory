ylab="AMR Revealed")
for(i in 1:length(dataFiles))
{
xs=runPredictions[[i]][,2]
ys=runPredictions[[i]][,1]
lines(xs, ys, type="l", lwd=3, lty=linetype[i], col=colors[i], pch=plotchar[i])
legendTxts[i]=sampleNames[i]
}
# add a legend
legend(1,25, legend=legendTxts,
cex=1, col=colors, pch=plotchar, lty=linetype, bty ="n")
runPredictions[[1]]
runPredictions[[1]][1:100,]
rm(list=ls())
source("E:/iBS/trunk/core/src/iBS.R/BDVD/Common.R")
outIDs=c(10001,10002,10003,10004)
sampleNames=c("GM12878","H1-hESC","EBV-Quiescent1","PBMC")
dataFiles=paste0("E:/Biostatistics/Imprinting/Joint/gid_",outIDs,".bfv")
runPredictions= vector(mode="list", length=length(dataFiles))
for(i in 1:length(dataFiles))
{
colCnt = 3
rowCnt = 1000000
mat= readBigMatrix(colCnt,rowCnt,dataFiles[i])
runPredictions[[i]]=mat
}
runPredictions[[1]][1:100,]
rm(list=ls())
source("E:/iBS/trunk/core/src/iBS.R/BDVD/Common.R")
outIDs=c(10001,10002,10003,10004)
sampleNames=c("GM12878","H1-hESC","EBV-Quiescent1","PBMC")
dataFiles=paste0("E:/Biostatistics/Imprinting/Joint/gid_",outIDs,".bfv")
runPredictions= vector(mode="list", length=length(dataFiles))
for(i in 1:length(dataFiles))
{
colCnt = 3
rowCnt = 1000000
mat= readBigMatrix(colCnt,rowCnt,dataFiles[i])
runPredictions[[i]]=mat
}
runPredictions[[1]][1:100,]
rm(list=ls())
source("E:/iBS/trunk/core/src/iBS.R/BDVD/Common.R")
outIDs=c(10001,10002,10003,10004)
sampleNames=c("GM12878","H1-hESC","EBV-Quiescent1","PBMC")
dataFiles=paste0("E:/Biostatistics/Imprinting/Joint/gid_",outIDs,".bfv")
runPredictions= vector(mode="list", length=length(dataFiles))
for(i in 1:length(dataFiles))
{
colCnt = 3
rowCnt = 1000000
mat= readBigMatrix(colCnt,rowCnt,dataFiles[i])
runPredictions[[i]]=mat
}
runPredictions[[1]][1:100,]
rm(list=ls())
source("E:/iBS/trunk/core/src/iBS.R/BDVD/Common.R")
outIDs=c(10001,10002,10003,10004)
sampleNames=c("GM12878","H1-hESC","EBV-Quiescent1","PBMC")
dataFiles=paste0("E:/Biostatistics/Imprinting/Joint/gid_",outIDs,".bfv")
runPredictions= vector(mode="list", length=length(dataFiles))
for(i in 1:length(dataFiles))
{
colCnt = 3
rowCnt = 1000000
mat= readBigMatrix(colCnt,rowCnt,dataFiles[i])
runPredictions[[i]]=mat
}
runPredictions[[2]]
rm(list=ls())
source("E:/iBS/trunk/core/src/iBS.R/BDVD/Common.R")
outIDs=c(10001,10002,10003,10004)
sampleNames=c("GM12878","H1-hESC","EBV-Quiescent1","PBMC")
dataFiles=paste0("E:/Biostatistics/Imprinting/Joint/gid_",outIDs,".bfv")
runPredictions= vector(mode="list", length=length(dataFiles))
for(i in 1:length(dataFiles))
{
colCnt = 3
rowCnt = 1000000
mat= readBigMatrix(colCnt,rowCnt,dataFiles[i])
runPredictions[[i]]=mat
}
runPredictions[[2]]
#====================================
#AMR revealed vs. base pair coverage
dev.off()
dev.new()
M = length(dataFiles)
colors <- 1:M
linetype <- rep(1,M)
plotchar <- rep(19,M)
aucs=rep(0,M)
legendTxts=rep("",M)
maxBpCnt = 50*1000
# set up the plot
plot(c(0,maxRegionCnt*1),c(0,25), type="n", xlab="BP Reported",
#plot(c(0,20),c(0,length(AMR_Names)), type="n", xlab="Region Count",
ylab="AMR Revealed")
for(i in 1:length(dataFiles))
{
xs=runPredictions[[i]][,2]
ys=runPredictions[[i]][,1]
lines(xs, ys, type="l", lwd=3, lty=linetype[i], col=colors[i], pch=plotchar[i])
legendTxts[i]=sampleNames[i]
}
# add a legend
legend(1,25, legend=legendTxts,
cex=1, col=colors, pch=plotchar, lty=linetype, bty ="n")
dev.off()
dev.new()
M = length(dataFiles)
colors <- 1:M
linetype <- rep(1,M)
plotchar <- rep(19,M)
aucs=rep(0,M)
legendTxts=rep("",M)
maxRegionCnt = 1000
# set up the plot
plot(c(0,maxRegionCnt*1),c(0,25), type="n", xlab="Region Reported",
#plot(c(0,20),c(0,length(AMR_Names)), type="n", xlab="Region Count",
ylab="AMR Revealed")
for(i in 1:length(dataFiles))
{
xs=runPredictions[[i]][,3]
ys=runPredictions[[i]][,1]
lines(xs, ys, type="l", lwd=3, lty=linetype[i], col=colors[i], pch=plotchar[i])
legendTxts[i]=sampleNames[i]
}
# add a legend
legend(1,25, legend=legendTxts,
cex=1, col=colors, pch=plotchar, lty=linetype, bty ="n")
dev.off()
dev.new()
M = length(dataFiles)
colors <- 1:M
linetype <- rep(1,M)
plotchar <- rep(19,M)
aucs=rep(0,M)
legendTxts=rep("",M)
maxBpCnt = 50*1000
# set up the plot
plot(c(0,maxBpCnt),c(0,25), type="n", xlab="BP Reported",
#plot(c(0,20),c(0,length(AMR_Names)), type="n", xlab="Region Count",
ylab="AMR Revealed")
for(i in 1:length(dataFiles))
{
xs=runPredictions[[i]][,2]
ys=runPredictions[[i]][,1]
lines(xs, ys, type="l", lwd=3, lty=linetype[i], col=colors[i], pch=plotchar[i])
legendTxts[i]=sampleNames[i]
}
# add a legend
legend(1,25, legend=legendTxts,
cex=1, col=colors, pch=plotchar, lty=linetype, bty ="n")
dev.off()
dev.new()
M = length(dataFiles)
colors <- 1:M
linetype <- rep(1,M)
plotchar <- rep(19,M)
aucs=rep(0,M)
legendTxts=rep("",M)
maxBpCnt = 500*1000
# set up the plot
plot(c(0,maxBpCnt),c(0,25), type="n", xlab="BP Reported",
#plot(c(0,20),c(0,length(AMR_Names)), type="n", xlab="Region Count",
ylab="AMR Revealed")
for(i in 1:length(dataFiles))
{
xs=runPredictions[[i]][,2]
ys=runPredictions[[i]][,1]
lines(xs, ys, type="l", lwd=3, lty=linetype[i], col=colors[i], pch=plotchar[i])
legendTxts[i]=sampleNames[i]
}
# add a legend
legend(1,25, legend=legendTxts,
cex=1, col=colors, pch=plotchar, lty=linetype, bty ="n")
library(rocr)
library(ROCR)
?performance
performance
a=[0.1,0.3,0.05]
a=c(0.1,0.3,0.05)
a<0.2
?max
c("salmon4", "red2", "dodgerblue3", "darkorange1", "green2", "yellow1")
a=c("salmon4", "red2", "dodgerblue3", "darkorange1", "green2", "yellow1")
b=rep(a,4)
b
as.int(0.3)
as.integer(0.3)
?boxplot
as.integer(1000000000000000)
as.integer(1000000000000)
as.integer(10000000000)
as.integer(10000000)
a=1024*1024*1024*100
a
str(a)
10000000000
matrix(NA,2,3)
a=4.85969e+09
b=2.5296e+09
c=2.33009e+09
b/a
b/c
a/c
a
b
c
c/a
b/a
397*250/1024
a-b-c
abs(4.5)
abs(-4.5)
?abs
a=c(-1,2,NA)
abs(a)
P=2545
N=597
TP=2127
TN=415
FP=N-TN
FN=P-TP
MCC=(TP*TN-FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
MCC
P=2545
N=597
TP=2488
TN=545
FP=N-TN
FN=P-TP
MCC=(TP*TN-FP*FN)/sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN))
MCC
FP
FN
pmPredictorRowIDs=vector(mode="list", length=3)
pmPredictorRowIDs[[1]]=c(1,2,3)
pmPredictorRowIDs[[2]]=c(1,2)
pmPredictorRowIDs[[3]]=c(1,2,4,5)
which(lapply(pmPredictorRowIDs,length)==2)
lapply(pmPredictorRowIDs,length)
which(lapply(pmPredictorRowIDs,length)==4)
which(lapply(pmPredictorRowIDs,length)>2)
which(lapply(pmPredictorRowIDs,length)>=2)
DNaseSampleIdxs=c(1, 3, 9, 17, 19, 22, 28, 36, 39, 42, 49, 55, 60, 62, 68, 71, 73, 75, 79, 81, 84, 88, 90, 93, 95, 97, 100, 102, 104, 109, 112, 115, 117, 119, 121, 125, 127, 130, 137, 146, 154, 157, 159, 161, 164, 168, 171, 175, 177, 181, 185, 190, 201, 209, 215, 217, 221, 223, 225, 227, 229, 231, 233, 235, 237, 244, 249, 251, 252, 259, 261, 262, 264, 265, 267, 269, 271, 273, 275, 276, 278, 280, 282, 284, 286, 288, 290, 296, 298, 300, 302, 304, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 351, 353, 371, 374, 376, 378, 380, 382, 386, 388, 390, 392, 396, 398, 400, 402, 404, 409, 414, 420, 422, 424)
length(DNaseSampleIdxs)
DukeOnlySampleIdxs=c(1, 9, 17, 19, 22, 28, 36, 39, 42, 49, 60, 62, 68, 71, 73, 75, 84, 88, 93, 95, 102, 109, 115, 117, 119, 125, 127, 130, 146, 157, 161, 164, 168, 171, 175, 177, 181, 190, 201, 209, 215, 217)
UWOnlySampleIdxs=c(221, 223, 225, 227, 229, 231, 233, 235, 237, 244, 249, 251, 252, 259, 261, 262, 264, 265, 267, 269, 271, 273, 275, 276, 278, 280, 282, 284, 286, 288, 290, 296, 298, 300, 302, 304, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 351, 353, 371, 374, 376, 378, 380, 382, 386, 388, 390, 392, 396, 398, 400, 402, 404, 409, 414, 420, 422, 424)
DukeOnlyColIdxs=match(DukeOnlySampleIdxs,DNaseSampleIdxs)
UWOnlyColIdxs=match(UWOnlySampleIdxs,DNaseSampleIdxs)
cIdxs_train=UWOnlyColIdxs
cIdxs_test=DukeOnlyColIdxs
cIdxs_train
cIdxs_train
cIdxs_test
?corr
?cor
NA <1
if(NA){ print(i)}
is.NA
is.na(NA)
is.na(1)
?sample
sample(10,4)
colCnt113
szValueType=8
batchFileSize=1024*1024*1024
rowBytesSize=colCnt*szValueType
if(batchFileSize%%rowBytesSize!=0){
#data row will not split in two batch files
batchFileSize = batchFileSize-(batchFileSize%%rowBytesSize)
}
valueCntPerBatchFile = as.integer(batchFileSize / szValueType)
rowCntPerBatchFile = as.integer(valueCntPerBatchFile / colCnt)
colCnt=113
szValueType=8
batchFileSize=1024*1024*1024
rowBytesSize=colCnt*szValueType
if(batchFileSize%%rowBytesSize!=0){
#data row will not split in two batch files
batchFileSize = batchFileSize-(batchFileSize%%rowBytesSize)
}
valueCntPerBatchFile = as.integer(batchFileSize / szValueType)
rowCntPerBatchFile = as.integer(valueCntPerBatchFile / colCnt)
rowCntPerBatchFile
a=matrix(0,2,3)
a
a[1,1:3]
str(a[1,1:3])
rm(a)
a=1
b=2
rm(a,b)
a=list(x=c(1,2),y=2)
b=unlist(a)
b
a
binom.test(8, 10, p = 0.5)
binom.test(8, 10, p = 0.5, alternative="two.sided")
a=binom.test(8, 10, p = 0.5, alternative="two.sided")
str(a)
a$p.value
binom.test(8, 10, p = 0.5, alternative="two.sided")
binom.test(2, 10, p = 0.5, alternative="two.sided")
36*688.39
24782.04+3000
2.5+2+3+3+2.5+5+6.5+3+1+2
2.5+2+4+3+3.5+5+6.5+3+1+2
32.5*50
# CONSTANTS
# RSCRIPT_DIR
# DATA_DIR
# OUT_DIR
#library(scales)
rm(list=ls())
#setwd("__RSCRIPT_DIR__")
setwd("E:/iBS/trunk/core/src/iBS.R/BDVD")
source("Common.R")
data_dir="__DATA_DIR__"
out_dir="__OUT_DIR__"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWExon/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWDNase/100bp/ruvs-r2/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWDNase/100bp/ruvs-var-r2/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/UWDNaseMM9/100bp/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/Broad194/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/BroadUWH3K4me3/s05-vd"
data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/BroadH3K4me1/s05-vd"
out_dir=data_dir
vd_fn=paste(data_dir,"/vd.txt",sep="")
vdTbl=read.table(vd_fn,stringsAsFactors =FALSE,
sep="\t",header= TRUE)
KsCnt=nrow(vdTbl)
bu=rep(0,KsCnt)
b=rep(0,KsCnt)
b_bl=rep(0,KsCnt)
b_wl=rep(0,KsCnt)
for(i in 1:KsCnt){
k = vdTbl[i,"k"]
extW=vdTbl[i,"extW"]
SS_t = vdTbl[i,"SS_t"]
SS_r =vdTbl[i,"SS_r"]
SS_bu = vdTbl[i,"SS_bu"]
SS_b = vdTbl[i,"SS_b"]
SS_u = vdTbl[i,"SS_u"]
b_SS_t = vdTbl[i,"b_SS_t"]
b_SS_bl = vdTbl[i,"b_SS_bl"]
b_SS_wl = vdTbl[i,"b_SS_wl"]
# Biological + Unwanted
bu[i] = SS_bu/SS_t
b[i] = SS_b/SS_t
b_bl[i] = b[i]*(1-b_SS_bl/b_SS_t)
b_wl[i] = b[i]*(1-b_SS_wl/b_SS_t)
}
oidxs=getRUVConfigOrders(vdTbl[,"k"],vdTbl[,"extW"])
bu=bu[oidxs]
b=b[oidxs]
b_bl=b_bl[oidxs]
b_wl=b_wl[oidxs]
vdTbl=vdTbl[oidxs,]
runNames=getRUVConfigTexts(vdTbl[,"k"],vdTbl[,"extW"])
colIdxs=c(1:KsCnt)
propMat=cbind(b_bl,b-b_bl,bu-b,1-bu)
colnames(propMat)=c("b_wl","b_bl","u","e")
rownames(propMat)=runNames[colIdxs]
##
## eigen values - fraction of variance explained
##
pdf(file = paste(out_dir,"/vd_plot.pdf",sep=""))
#plot bars first
colIdxs=c(1:KsCnt)
plot(colIdxs,bu[colIdxs], type="h", xlab="",col="gray",lty=2,
ylab="Proportion", bty = "n",xaxt='n',xlim=c(0.8, KsCnt+0.2),ylim=c(0, 1))
lines(colIdxs, bu[colIdxs], type="o", lwd=2,
lty=1, col="deepskyblue", pch=19)
lines(colIdxs, b[colIdxs], type="o", lwd=2,
lty=1, col="green", pch=19)
lines(colIdxs, b_bl[colIdxs], type="o", lwd=2,
lty=1, col="blue", pch=19)
axis(side=1, at=colIdxs, labels=runNames[colIdxs])
dev.off()
##
## stacked barplot
##
pdf(file = paste(out_dir,"/vd_stackbarplot.pdf",sep=""),width=5,height=4)
#plot bars first
colIdxs=c(1:KsCnt)
barplot(t(propMat),col=c("#4dac26","#b8e186","#e7298a","#f4cae4"),
xlab="k (# unwanted factors)", ylab="Proportion")
dev.off()
##
## plot unwanted fraction as a function of K
##
learntKidxs=2:11
uFractions=rep(0,length(learntKidxs))
for(i in learntKidxs)
{
uFractions[i]=(propMat[i,"u"]-propMat[i-1,"u"])/propMat[i,"u"]
}
pdf(file = paste(out_dir,"/uwanted_fractions.pdf",sep=""))
#plot bars first
ks=vdTbl[learntKidxs,"k"]
maxK=max(ks)
plot(ks,uFractions[learntKidxs], type="h", xlab="k (# unwanted factors)",col="gray",lty=2,
ylab="Percentage of increase", bty = "n",xaxt='n',ylim=c(0,1),xlim=c(0.8, maxK+0.2))
lines(ks, uFractions[learntKidxs], type="o", lwd=3,
lty=1, col="deepskyblue", pch=19)
axis(side=1, at=ks, labels=as.character(ks))
abline(h=0.15, col="pink", lwd=1,lty=3)
dev.off()
# CONSTANTS
# RSCRIPT_DIR
# DATA_DIR
# OUT_DIR
#library(scales)
rm(list=ls())
#setwd("__RSCRIPT_DIR__")
setwd("E:/iBS/trunk/core/src/iBS.R/BDVD")
source("Common.R")
data_dir="__DATA_DIR__"
out_dir="__OUT_DIR__"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWExon/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWDNase/100bp/ruvs-r2/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/DukeUWDNase/100bp/ruvs-var-r2/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/UWDNaseMM9/100bp/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/Broad194/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/BroadUWH3K4me3/s05-vd"
#data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/BroadH3K4me1/s05-vd"
data_dir="E:/iBS/trunk/analysis/iBS.Projects/BDVD/Histone/100bp/BroadH3K27ac/s05-vd"
out_dir=data_dir
vd_fn=paste(data_dir,"/vd.txt",sep="")
vdTbl=read.table(vd_fn,stringsAsFactors =FALSE,
sep="\t",header= TRUE)
KsCnt=nrow(vdTbl)
bu=rep(0,KsCnt)
b=rep(0,KsCnt)
b_bl=rep(0,KsCnt)
b_wl=rep(0,KsCnt)
for(i in 1:KsCnt){
k = vdTbl[i,"k"]
extW=vdTbl[i,"extW"]
SS_t = vdTbl[i,"SS_t"]
SS_r =vdTbl[i,"SS_r"]
SS_bu = vdTbl[i,"SS_bu"]
SS_b = vdTbl[i,"SS_b"]
SS_u = vdTbl[i,"SS_u"]
b_SS_t = vdTbl[i,"b_SS_t"]
b_SS_bl = vdTbl[i,"b_SS_bl"]
b_SS_wl = vdTbl[i,"b_SS_wl"]
# Biological + Unwanted
bu[i] = SS_bu/SS_t
b[i] = SS_b/SS_t
b_bl[i] = b[i]*(1-b_SS_bl/b_SS_t)
b_wl[i] = b[i]*(1-b_SS_wl/b_SS_t)
}
oidxs=getRUVConfigOrders(vdTbl[,"k"],vdTbl[,"extW"])
bu=bu[oidxs]
b=b[oidxs]
b_bl=b_bl[oidxs]
b_wl=b_wl[oidxs]
vdTbl=vdTbl[oidxs,]
runNames=getRUVConfigTexts(vdTbl[,"k"],vdTbl[,"extW"])
colIdxs=c(1:KsCnt)
propMat=cbind(b_bl,b-b_bl,bu-b,1-bu)
colnames(propMat)=c("b_wl","b_bl","u","e")
rownames(propMat)=runNames[colIdxs]
##
## eigen values - fraction of variance explained
##
pdf(file = paste(out_dir,"/vd_plot.pdf",sep=""))
#plot bars first
colIdxs=c(1:KsCnt)
plot(colIdxs,bu[colIdxs], type="h", xlab="",col="gray",lty=2,
ylab="Proportion", bty = "n",xaxt='n',xlim=c(0.8, KsCnt+0.2),ylim=c(0, 1))
lines(colIdxs, bu[colIdxs], type="o", lwd=2,
lty=1, col="deepskyblue", pch=19)
lines(colIdxs, b[colIdxs], type="o", lwd=2,
lty=1, col="green", pch=19)
lines(colIdxs, b_bl[colIdxs], type="o", lwd=2,
lty=1, col="blue", pch=19)
axis(side=1, at=colIdxs, labels=runNames[colIdxs])
dev.off()
##
## stacked barplot
##
pdf(file = paste(out_dir,"/vd_stackbarplot.pdf",sep=""),width=5,height=4)
#plot bars first
colIdxs=c(1:KsCnt)
barplot(t(propMat),col=c("#4dac26","#b8e186","#e7298a","#f4cae4"),
xlab="k (# unwanted factors)", ylab="Proportion")
dev.off()
##
## plot unwanted fraction as a function of K
##
learntKidxs=2:11
uFractions=rep(0,length(learntKidxs))
for(i in learntKidxs)
{
uFractions[i]=(propMat[i,"u"]-propMat[i-1,"u"])/propMat[i,"u"]
}
pdf(file = paste(out_dir,"/uwanted_fractions.pdf",sep=""))
#plot bars first
ks=vdTbl[learntKidxs,"k"]
maxK=max(ks)
plot(ks,uFractions[learntKidxs], type="h", xlab="k (# unwanted factors)",col="gray",lty=2,
ylab="Percentage of increase", bty = "n",xaxt='n',ylim=c(0,1),xlim=c(0.8, maxK+0.2))
lines(ks, uFractions[learntKidxs], type="o", lwd=3,
lty=1, col="deepskyblue", pch=19)
axis(side=1, at=ks, labels=as.character(ks))
abline(h=0.15, col="pink", lwd=1,lty=3)
dev.off()
